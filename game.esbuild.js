(() => {
  // ../common/webgl.ts
  var GL_DEPTH_BUFFER_BIT = 256;
  var GL_COLOR_BUFFER_BIT = 16384;
  var GL_POINTS = 0;
  var GL_LINE_LOOP = 2;
  var GL_TRIANGLES = 4;
  var GL_SRC_ALPHA = 770;
  var GL_ONE_MINUS_SRC_ALPHA = 771;
  var GL_STATIC_DRAW = 35044;
  var GL_ARRAY_BUFFER = 34962;
  var GL_ELEMENT_ARRAY_BUFFER = 34963;
  var GL_CULL_FACE = 2884;
  var GL_BLEND = 3042;
  var GL_DEPTH_TEST = 2929;
  var GL_CW = 2304;
  var GL_DATA_UNSIGNED_BYTE = 5121;
  var GL_DATA_UNSIGNED_INT = 5125;
  var GL_DATA_FLOAT = 5126;
  var GL_DEPTH_COMPONENT = 6402;
  var GL_RGBA = 6408;
  var GL_FRAGMENT_SHADER = 35632;
  var GL_VERTEX_SHADER = 35633;
  var GL_NEAREST = 9728;
  var GL_LINEAR = 9729;
  var GL_TEXTURE_MAG_FILTER = 10240;
  var GL_TEXTURE_MIN_FILTER = 10241;
  var GL_TEXTURE_WRAP_S = 10242;
  var GL_TEXTURE_WRAP_T = 10243;
  var GL_TEXTURE_2D = 3553;
  var GL_TEXTURE0 = 33984;
  var GL_TEXTURE1 = 33985;
  var GL_TEXTURE2 = 33986;
  var GL_TEXTURE3 = 33987;
  var GL_CLAMP_TO_EDGE = 33071;
  var GL_FRAMEBUFFER = 36160;
  var GL_COLOR_ATTACHMENT0 = 36064;
  var GL_DEPTH_ATTACHMENT = 36096;
  var GL_FRAMEBUFFER_COMPLETE = 36053;
  var GL_RGBA8 = 32856;
  var GL_TEXTURE_COMPARE_MODE = 34892;
  var GL_COMPARE_REF_TO_TEXTURE = 34894;
  var GL_RGBA32F = 34836;
  var GL_RGBA16F = 34842;
  var GL_DEPTH_COMPONENT24 = 33190;
  var GL_UNSIGNED_SHORT = 5123;
  var GL_FLOAT = 5126;

  // ../common/game.ts
  var update_span = document.getElementById("update");
  var delta_span = document.getElementById("delta");
  var fps_span = document.getElementById("fps");
  var step = 1 / 60;
  var GameImpl = class {
    constructor() {
      this.Running = 0;
      this.Now = 0;
      this.ViewportWidth = window.innerWidth;
      this.ViewportHeight = window.innerHeight;
      this.ViewportResized = true;
      this.InputState = {
        MouseX: 0,
        MouseY: 0
      };
      this.InputDelta = {
        MouseX: 0,
        MouseY: 0
      };
      this.InputDistance = {
        Mouse: 0,
        Mouse0: 0,
        Mouse1: 0,
        Mouse2: 0,
        Touch0: 0,
        Touch1: 0
      };
      this.InputTouches = {};
      this.Ui = document.querySelector("main");
      document.addEventListener("visibilitychange", () => document.hidden ? this.Stop() : this.Start());
      this.Ui.addEventListener("contextmenu", (evt) => evt.preventDefault());
      this.Ui.addEventListener("mousedown", (evt) => {
        this.InputState[`Mouse${evt.button}`] = 1;
        this.InputDelta[`Mouse${evt.button}`] = 1;
      });
      this.Ui.addEventListener("mouseup", (evt) => {
        this.InputState[`Mouse${evt.button}`] = 0;
        this.InputDelta[`Mouse${evt.button}`] = -1;
      });
      this.Ui.addEventListener("mousemove", (evt) => {
        this.InputState["MouseX"] = evt.clientX;
        this.InputState["MouseY"] = evt.clientY;
        this.InputDelta["MouseX"] = evt.movementX;
        this.InputDelta["MouseY"] = evt.movementY;
      });
      this.Ui.addEventListener("wheel", (evt) => {
        evt.preventDefault();
        this.InputDelta["WheelY"] = evt.deltaY;
      });
      this.Ui.addEventListener("touchstart", (evt) => {
        if (evt.target === this.Ui) {
          evt.preventDefault();
        }
        if (evt.touches.length === 1) {
          this.InputTouches = {};
        }
        for (let i = 0; i < evt.touches.length; i++) {
          let touch = evt.touches[i];
          this.InputTouches[touch.identifier] = i;
        }
        for (let i = 0; i < evt.changedTouches.length; i++) {
          let touch = evt.changedTouches[i];
          let index = this.InputTouches[touch.identifier];
          this.InputState[`Touch${index}`] = 1;
          this.InputState[`Touch${index}X`] = touch.clientX;
          this.InputState[`Touch${index}Y`] = touch.clientY;
          this.InputDelta[`Touch${index}`] = 1;
          this.InputDelta[`Touch${index}X`] = 0;
          this.InputDelta[`Touch${index}Y`] = 0;
        }
      });
      this.Ui.addEventListener("touchmove", (evt) => {
        if (evt.target === this.Ui) {
          evt.preventDefault();
        }
        for (let i = 0; i < evt.changedTouches.length; i++) {
          let touch = evt.changedTouches[i];
          let index = this.InputTouches[touch.identifier];
          this.InputDelta[`Touch${index}X`] = touch.clientX - this.InputState[`Touch${index}X`];
          this.InputDelta[`Touch${index}Y`] = touch.clientY - this.InputState[`Touch${index}Y`];
          this.InputState[`Touch${index}X`] = touch.clientX;
          this.InputState[`Touch${index}Y`] = touch.clientY;
        }
      });
      this.Ui.addEventListener("touchend", (evt) => {
        if (evt.target === this.Ui) {
          evt.preventDefault();
        }
        for (let i = 0; i < evt.changedTouches.length; i++) {
          let touch = evt.changedTouches[i];
          let index = this.InputTouches[touch.identifier];
          this.InputState[`Touch${index}`] = 0;
          this.InputDelta[`Touch${index}`] = -1;
        }
      });
      this.Ui.addEventListener("touchcancel", (evt) => {
        for (let i = 0; i < evt.changedTouches.length; i++) {
          let touch = evt.changedTouches[i];
          let index = this.InputTouches[touch.identifier];
          this.InputState[`Touch${index}`] = 0;
          this.InputDelta[`Touch${index}`] = -1;
        }
      });
      window.addEventListener("keydown", (evt) => {
        if (!evt.repeat) {
          this.InputState[evt.code] = 1;
          this.InputDelta[evt.code] = 1;
        }
      });
      window.addEventListener("keyup", (evt) => {
        this.InputState[evt.code] = 0;
        this.InputDelta[evt.code] = -1;
      });
    }
    Start() {
      let accumulator = 0;
      let last = performance.now();
      let tick = (now) => {
        let delta = (now - last) / 1e3;
        last = now;
        this.Running = requestAnimationFrame(tick);
        this.FrameSetup(delta);
        accumulator += delta;
        while (accumulator >= step) {
          accumulator -= step;
          this.FixedUpdate(step);
        }
        this.FrameUpdate(delta);
        this.FrameReset(delta);
      };
      this.Stop();
      tick(last);
    }
    Stop() {
      cancelAnimationFrame(this.Running);
      this.Running = 0;
    }
    FrameSetup(delta) {
      this.Now = performance.now();
      let mouse_distance = Math.abs(this.InputDelta["MouseX"]) + Math.abs(this.InputDelta["MouseY"]);
      this.InputDistance["Mouse"] += mouse_distance;
      if (this.InputState["Mouse0"] === 1) {
        this.InputDistance["Mouse0"] += mouse_distance;
      }
      if (this.InputState["Mouse1"] === 1) {
        this.InputDistance["Mouse1"] += mouse_distance;
      }
      if (this.InputState["Mouse2"] === 1) {
        this.InputDistance["Mouse2"] += mouse_distance;
      }
      if (this.InputState["Touch0"] === 1) {
        this.InputDistance["Touch0"] += Math.abs(this.InputDelta["Touch0X"]) + Math.abs(this.InputDelta["Touch0Y"]);
      }
      if (this.InputState["Touch1"] === 1) {
        this.InputDistance["Touch1"] += Math.abs(this.InputDelta["Touch1X"]) + Math.abs(this.InputDelta["Touch1Y"]);
      }
    }
    FixedUpdate(step2) {
    }
    FrameUpdate(delta) {
    }
    FrameReset(delta) {
      this.ViewportResized = false;
      if (this.InputDelta["Mouse0"] === -1) {
        this.InputDistance["Mouse0"] = 0;
      }
      if (this.InputDelta["Mouse1"] === -1) {
        this.InputDistance["Mouse1"] = 0;
      }
      if (this.InputDelta["Mouse2"] === -1) {
        this.InputDistance["Mouse2"] = 0;
      }
      if (this.InputDelta["Touch0"] === -1) {
        this.InputDistance["Touch0"] = 0;
      }
      if (this.InputDelta["Touch1"] === -1) {
        this.InputDistance["Touch1"] = 0;
      }
      for (let name in this.InputDelta) {
        this.InputDelta[name] = 0;
      }
      let update16 = performance.now() - this.Now;
      if (update_span) {
        update_span.textContent = update16.toFixed(1);
      }
      if (delta_span) {
        delta_span.textContent = (delta * 1e3).toFixed(1);
      }
      if (fps_span) {
        fps_span.textContent = (1 / delta).toFixed();
      }
    }
  };
  var Game3D = class extends GameImpl {
    constructor() {
      super();
      this.Canvas2D = document.querySelector("#billboard");
      this.Context2D = this.Canvas2D.getContext("2d");
      this.Canvas3D = document.querySelector("#scene");
      this.Gl = this.Canvas3D.getContext("webgl2");
      this.Audio = new AudioContext();
      this.Cameras = [];
      this.Targets = {};
      this.Gl.enable(GL_DEPTH_TEST);
      this.Gl.enable(GL_CULL_FACE);
      this.Gl.blendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);
    }
    FrameSetup(delta) {
      super.FrameSetup(delta);
      this.Cameras = [];
    }
  };
  function instantiate(game2, blueprint) {
    let entity = game2.World.CreateEntity();
    for (let mixin of blueprint) {
      mixin(game2, entity);
    }
    return entity;
  }

  // ../common/world.ts
  var WorldImpl = class {
    constructor(capacity = 1e4) {
      this.Signature = [];
      this.Graveyard = [];
      this.Capacity = capacity;
    }
    CreateEntity() {
      if (this.Graveyard.length > 0) {
        return this.Graveyard.pop();
      }
      if (false) {
        throw new Error("No more entities available.");
      }
      return this.Signature.push(0) - 1;
    }
    DestroyEntity(entity) {
      this.Signature[entity] = 0;
      if (false) {
        throw new Error("Entity already in graveyard.");
      }
      this.Graveyard.push(entity);
    }
  };
  function first_having(world, query, start_at = 0) {
    for (let i = start_at; i < world.Signature.length; i++) {
      if ((world.Signature[i] & query) === query) {
        return i;
      }
    }
  }

  // ../src/world.ts
  var World = class extends WorldImpl {
    constructor() {
      super(...arguments);
      this.Animate = [];
      this.AudioSource = [];
      this.Camera = [];
      this.Children = [];
      this.Collide = [];
      this.ControlAlways = [];
      this.ControlPlayer = [];
      this.Cull = [];
      this.Draw = [];
      this.EmitParticles = [];
      this.Lifespan = [];
      this.Light = [];
      this.Mimic = [];
      this.Move = [];
      this.Named = [];
      this.Render = [];
      this.RigidBody = [];
      this.Shake = [];
      this.Spawn = [];
      this.Task = [];
      this.Toggle = [];
      this.Transform = [];
      this.Trigger = [];
    }
  };

  // ../src/components/com_children.ts
  function children(...blueprints) {
    return (game2, entity) => {
      if (game2.World.Signature[entity] & 16 /* Children */) {
      } else {
        game2.World.Signature[entity] |= 16 /* Children */;
        game2.World.Children[entity] = {
          Children: []
        };
      }
      let child_entities = game2.World.Children[entity].Children;
      for (let blueprint of blueprints) {
        let child = instantiate(game2, blueprint);
        child_entities.push(child);
      }
    };
  }
  function* query_down(world, entity, mask) {
    if ((world.Signature[entity] & mask) === mask) {
      yield entity;
    }
    if (world.Signature[entity] & 16 /* Children */) {
      for (let child of world.Children[entity].Children) {
        yield* query_down(world, child, mask);
      }
    }
  }
  function destroy_all(world, entity) {
    if (world.Signature[entity] & 16 /* Children */) {
      for (let child of world.Children[entity].Children) {
        destroy_all(world, child);
      }
    }
    world.DestroyEntity(entity);
  }

  // ../common/texture.ts
  function resize_texture_rgba8(gl, texture, width, height) {
    gl.bindTexture(GL_TEXTURE_2D, texture);
    gl.texImage2D(GL_TEXTURE_2D, 0, GL_RGBA8, width, height, 0, GL_RGBA, GL_DATA_UNSIGNED_BYTE, null);
    gl.texParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);
    gl.texParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);
    return texture;
  }
  function resize_texture_rgba16f(gl, texture, width, height) {
    gl.bindTexture(GL_TEXTURE_2D, texture);
    gl.texImage2D(GL_TEXTURE_2D, 0, GL_RGBA16F, width, height, 0, GL_RGBA, GL_DATA_FLOAT, null);
    gl.texParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);
    gl.texParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);
    return texture;
  }
  function resize_texture_rgba32f(gl, texture, width, height) {
    gl.bindTexture(GL_TEXTURE_2D, texture);
    gl.texImage2D(GL_TEXTURE_2D, 0, GL_RGBA32F, width, height, 0, GL_RGBA, GL_DATA_FLOAT, null);
    gl.texParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_NEAREST);
    gl.texParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_NEAREST);
    return texture;
  }
  function resize_texture_depth24(gl, texture, width, height) {
    gl.bindTexture(GL_TEXTURE_2D, texture);
    gl.texImage2D(GL_TEXTURE_2D, 0, GL_DEPTH_COMPONENT24, width, height, 0, GL_DEPTH_COMPONENT, GL_DATA_UNSIGNED_INT, null);
    gl.texParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);
    gl.texParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);
    gl.texParameteri(GL_TEXTURE_2D, GL_TEXTURE_COMPARE_MODE, GL_COMPARE_REF_TO_TEXTURE);
    gl.texParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_CLAMP_TO_EDGE);
    gl.texParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_CLAMP_TO_EDGE);
    return texture;
  }

  // ../common/framebuffer.ts
  function resize_forward_target(gl, target, width, height) {
    target.Width = width;
    target.Height = height;
    resize_texture_rgba8(gl, target.ColorTexture, target.Width, target.Height);
    resize_texture_depth24(gl, target.DepthTexture, target.Width, target.Height);
  }
  function resize_hdr_target(gl, target, width, height) {
    target.Width = width;
    target.Height = height;
    resize_texture_rgba16f(gl, target.ColorTexture, target.Width, target.Height);
    resize_texture_depth24(gl, target.DepthTexture, target.Width, target.Height);
  }
  function resize_deferred_target(gl, target, width, height) {
    target.Width = width;
    target.Height = height;
    resize_texture_rgba32f(gl, target.DiffuseTexture, target.Width, target.Height);
    resize_texture_rgba32f(gl, target.SpecularTexture, target.Width, target.Height);
    resize_texture_rgba32f(gl, target.PositionTexture, target.Width, target.Height);
    resize_texture_rgba32f(gl, target.NormalTexture, target.Width, target.Height);
    resize_texture_depth24(gl, target.DepthTexture, target.Width, target.Height);
  }
  function create_depth_target(gl, width, height) {
    let target = {
      Kind: 3 /* Depth */,
      Framebuffer: gl.createFramebuffer(),
      Width: width,
      Height: height,
      ResizeToViewport: false,
      ColorTexture: resize_texture_rgba8(gl, gl.createTexture(), width, height),
      DepthTexture: resize_texture_depth24(gl, gl.createTexture(), width, height)
    };
    gl.bindFramebuffer(GL_FRAMEBUFFER, target.Framebuffer);
    gl.framebufferTexture2D(GL_FRAMEBUFFER, GL_DEPTH_ATTACHMENT, GL_TEXTURE_2D, target.DepthTexture, 0);
    gl.framebufferTexture2D(GL_FRAMEBUFFER, GL_COLOR_ATTACHMENT0, GL_TEXTURE_2D, target.ColorTexture, 0);
    let status = gl.checkFramebufferStatus(GL_FRAMEBUFFER);
    if (status != GL_FRAMEBUFFER_COMPLETE) {
      throw new Error(`Failed to set up the framebuffer (${status}).`);
    }
    return target;
  }

  // ../materials/light.ts
  var MAX_FORWARD_LIGHTS = 8;
  var INCLUDE_GAMMA_CORRECTION = `
    // Expand (decode) an sRGB color to linear color space, similar to how the
    // monitor does it when displaying pixels to the user.

    // Convert ~sRGB to linear.
    vec3 GAMMA_DECODE(vec3 rgb) {
        return pow(rgb, vec3(2.2));
    }

    // Convert ~sRGBA to linear.
    vec4 GAMMA_DECODE(vec4 color) {
        return vec4(pow(color.rgb, vec3(2.2)), color.a);
    }

    // Compress (encode) a linear RGB color to sRGB. Usually this is done after
    // lighting computations and just before sending the color to the canvas, to
    // compensate for the loss in brightness caused by the monitor.

    // Convert linear to ~sRGB.
    vec3 GAMMA_ENCODE(vec3 rgb) {
        return pow(rgb, vec3(1.0 / 2.2));
    }

    // Convert linear to ~sRGBA.
    vec4 GAMMA_ENCODE(vec4 color) {
        return vec4(pow(color.rgb, vec3(1.0 / 2.2)), color.a);
    }
`;

  // ../common/material.ts
  function link(gl, vertex5, fragment5) {
    let program = gl.createProgram();
    gl.attachShader(program, compile(gl, GL_VERTEX_SHADER, vertex5));
    gl.attachShader(program, compile(gl, GL_FRAGMENT_SHADER, fragment5));
    gl.linkProgram(program);
    if (false) {
      throw new Error(gl.getProgramInfoLog(program));
    }
    return program;
  }
  function compile(gl, type, source) {
    let shader = gl.createShader(type);
    gl.shaderSource(shader, source);
    gl.compileShader(shader);
    if (false) {
      throw new Error(gl.getShaderInfoLog(shader));
    }
    return shader;
  }

  // ../materials/mat_forward_colored_shadows.ts
  var vertex = `#version 300 es

    uniform mat4 pv;
    uniform mat4 world;

    layout(location=${0 /* Position */}) in vec4 attr_position;

    out vec4 vert_position;

    void main() {
        vert_position = world * attr_position;
        gl_Position = pv * vert_position;
    }
`;
  var fragment = `#version 300 es

    precision mediump float;
    precision lowp sampler2DShadow;

    uniform vec4 diffuse_color;
    uniform mat4 shadow_space;
    uniform sampler2DShadow shadow_map;

    in vec4 vert_position;

    out vec4 frag_color;

    ${INCLUDE_GAMMA_CORRECTION}

    // How much shadow to apply at world_pos, expressed as [min, 1]:
    // min = completely in shadow, 1 = completely not in shadow
    float shadow_factor(vec4 world_pos, float min) {
        vec4 shadow_space_pos = shadow_space * world_pos;
        vec3 shadow_space_ndc = shadow_space_pos.xyz / shadow_space_pos.w;
        // Transform the [-1, 1] NDC to [0, 1] to match the shadow texture data.
        shadow_space_ndc = shadow_space_ndc * 0.5 + 0.5;

        // Add shadow bias to avoid shadow acne.
        shadow_space_ndc.z -= 0.001;

        return texture(shadow_map, shadow_space_ndc) * (1.0 - min) + min;
    }

    void main() {
        vec3 diffuse_rgb = GAMMA_DECODE(diffuse_color.rgb);
        vec3 shaded_rgb = diffuse_rgb * shadow_factor(vert_position, 0.5);
        frag_color= vec4(GAMMA_ENCODE(shaded_rgb), diffuse_color.a);
    }
`;
  function mat_forward_colored_shadows(gl) {
    let program = link(gl, vertex, fragment);
    return {
      Mode: GL_TRIANGLES,
      Program: program,
      Locations: {
        Pv: gl.getUniformLocation(program, "pv"),
        World: gl.getUniformLocation(program, "world"),
        Color: gl.getUniformLocation(program, "diffuse_color"),
        ShadowSpace: gl.getUniformLocation(program, "shadow_space"),
        ShadowMap: gl.getUniformLocation(program, "shadow_map")
      }
    };
  }

  // ../materials/mat_forward_colored_unlit.ts
  var vertex2 = `#version 300 es

    uniform mat4 pv;
    uniform mat4 world;

    layout(location=${0 /* Position */}) in vec4 attr_position;

    void main() {
        gl_Position = pv * world * attr_position;
    }
`;
  var fragment2 = `#version 300 es

    precision mediump float;

    uniform vec4 color;

    out vec4 frag_color;

    void main() {
        frag_color = color;
    }
`;
  function mat_forward_colored_unlit(gl, mode = GL_TRIANGLES) {
    let program = link(gl, vertex2, fragment2);
    return {
      Mode: mode,
      Program: program,
      Locations: {
        Pv: gl.getUniformLocation(program, "pv"),
        World: gl.getUniformLocation(program, "world"),
        Color: gl.getUniformLocation(program, "color")
      }
    };
  }
  function mat_forward_colored_wireframe(gl) {
    return mat_forward_colored_unlit(gl, GL_LINE_LOOP);
  }

  // ../materials/mat_forward_depth.ts
  var vertex3 = `#version 300 es


    uniform mat4 pv;
    uniform mat4 world;

    layout(location=${0 /* Position */}) in vec4 attr_position;

    void main() {
        gl_Position = pv * world * attr_position;
    }
`;
  var fragment3 = `#version 300 es

    precision mediump float;

    out vec4 frag_color;

    void main() {
        // Visualization only. Actual z is saved in the depth buffer.
        float z = gl_FragCoord.z * 10.0;
        frag_color = vec4(z, z, z, 1.0);
    }
`;
  function mat_forward_depth(gl) {
    let program = link(gl, vertex3, fragment3);
    return {
      Mode: GL_TRIANGLES,
      Program: program,
      Locations: {
        Pv: gl.getUniformLocation(program, "pv"),
        World: gl.getUniformLocation(program, "world")
      }
    };
  }

  // ../materials/mat_forward_particles_colored.ts
  var vertex4 = `#version 300 es

    uniform mat4 pv;
    uniform vec4 color_start;
    uniform vec4 color_end;
    // [x: lifespan, y: speed, z: size_start, w: size_end];
    uniform vec4 details;

    // [x, y, z, w: age]
    in vec4 attr_origin_age;
    in vec3 attr_direction;

    out vec4 vert_color;

    void main() {
        // Move the particle along the direction axis.
        vec3 velocity = attr_direction * details.y;
        gl_Position = pv * vec4(attr_origin_age.xyz + velocity * attr_origin_age.w, 1.0);

        // Interpolate color and size.
        float t = attr_origin_age.w / details.x;
        gl_PointSize = mix(details.z, details.w, t);
        vert_color = mix(color_start, color_end, t);
    }
`;
  var fragment4 = `#version 300 es

    precision mediump float;

    in vec4 vert_color;

    out vec4 frag_color;

    void main() {
        frag_color = vert_color;
    }
`;
  function mat_forward_particles_colored(gl) {
    let program = link(gl, vertex4, fragment4);
    return {
      Mode: GL_POINTS,
      Program: program,
      Locations: {
        Pv: gl.getUniformLocation(program, "pv"),
        ColorStart: gl.getUniformLocation(program, "color_start"),
        ColorEnd: gl.getUniformLocation(program, "color_end"),
        Details: gl.getUniformLocation(program, "details"),
        OriginAge: gl.getAttribLocation(program, "attr_origin_age"),
        Direction: gl.getAttribLocation(program, "attr_direction")
      }
    };
  }

  // ../meshes/body.ts
  function mesh_body(gl) {
    let vao = gl.createVertexArray();
    gl.bindVertexArray(vao);
    let vertex_buf = gl.createBuffer();
    gl.bindBuffer(GL_ARRAY_BUFFER, vertex_buf);
    gl.bufferData(GL_ARRAY_BUFFER, vertex_arr, GL_STATIC_DRAW);
    gl.enableVertexAttribArray(0 /* Position */);
    gl.vertexAttribPointer(0 /* Position */, 3, GL_FLOAT, false, 0, 0);
    let normal_buf = gl.createBuffer();
    gl.bindBuffer(GL_ARRAY_BUFFER, normal_buf);
    gl.bufferData(GL_ARRAY_BUFFER, normal_arr, GL_STATIC_DRAW);
    gl.enableVertexAttribArray(1 /* Normal */);
    gl.vertexAttribPointer(1 /* Normal */, 3, GL_FLOAT, false, 0, 0);
    let texcoord_buf = gl.createBuffer();
    gl.bindBuffer(GL_ARRAY_BUFFER, texcoord_buf);
    gl.bufferData(GL_ARRAY_BUFFER, texcoord_arr, GL_STATIC_DRAW);
    gl.enableVertexAttribArray(2 /* TexCoord */);
    gl.vertexAttribPointer(2 /* TexCoord */, 2, GL_FLOAT, false, 0, 0);
    let weights_buf = gl.createBuffer();
    gl.bindBuffer(GL_ARRAY_BUFFER, weights_buf);
    gl.bufferData(GL_ARRAY_BUFFER, weights_arr, GL_STATIC_DRAW);
    gl.enableVertexAttribArray(5 /* Weights */);
    gl.vertexAttribPointer(5 /* Weights */, 4, GL_FLOAT, false, 0, 0);
    let index_buf = gl.createBuffer();
    gl.bindBuffer(GL_ELEMENT_ARRAY_BUFFER, index_buf);
    gl.bufferData(GL_ELEMENT_ARRAY_BUFFER, index_arr, GL_STATIC_DRAW);
    gl.bindVertexArray(null);
    return {
      Vao: vao,
      VertexBuffer: vertex_buf,
      VertexArray: vertex_arr,
      NormalBuffer: normal_buf,
      NormalArray: normal_arr,
      TexCoordBuffer: texcoord_buf,
      TexCoordArray: texcoord_arr,
      WeightsBuffer: weights_buf,
      WeightsArray: weights_arr,
      IndexBuffer: index_buf,
      IndexArray: index_arr,
      IndexCount: index_arr.length
    };
  }
  var vertex_arr = Float32Array.from([
    0.616,
    0.44,
    -1,
    0.616,
    0.44,
    -1,
    0.616,
    0.44,
    -1,
    0.616,
    0.44,
    -1,
    0.616,
    1,
    -0.44,
    0.616,
    1,
    -0.44,
    0.616,
    1,
    -0.44,
    0.616,
    1,
    -0.44,
    1.4,
    0.44,
    -0.44,
    1.4,
    0.44,
    -0.44,
    1.4,
    0.44,
    -0.44,
    1.4,
    0.44,
    -0.44,
    0.616,
    0.7196,
    -0.9252,
    0.616,
    0.7196,
    -0.9252,
    0.616,
    0.7196,
    -0.9252,
    0.616,
    0.7196,
    -0.9252,
    1.0075,
    0.44,
    -0.9252,
    1.0075,
    0.44,
    -0.9252,
    1.0075,
    0.44,
    -0.9252,
    1.0075,
    0.44,
    -0.9252,
    0.9909,
    0.7078,
    -0.8525,
    0.9909,
    0.7078,
    -0.8525,
    0.9909,
    0.7078,
    -0.8525,
    0.9909,
    0.7078,
    -0.8525,
    1.0075,
    0.9252,
    -0.44,
    1.0075,
    0.9252,
    -0.44,
    1.0075,
    0.9252,
    -0.44,
    1.0075,
    0.9252,
    -0.44,
    0.616,
    0.9252,
    -0.7196,
    0.616,
    0.9252,
    -0.7196,
    0.616,
    0.9252,
    -0.7196,
    0.616,
    0.9252,
    -0.7196,
    0.9909,
    0.8525,
    -0.7078,
    0.9909,
    0.8525,
    -0.7078,
    0.9909,
    0.8525,
    -0.7078,
    0.9909,
    0.8525,
    -0.7078,
    1.2953,
    0.44,
    -0.7196,
    1.2953,
    0.44,
    -0.7196,
    1.2953,
    0.44,
    -0.7196,
    1.2953,
    0.44,
    -0.7196,
    1.2953,
    0.7196,
    -0.44,
    1.2953,
    0.7196,
    -0.44,
    1.2953,
    0.7196,
    -0.44,
    1.2953,
    0.7196,
    -0.44,
    1.1935,
    0.7078,
    -0.7078,
    1.1935,
    0.7078,
    -0.7078,
    1.1935,
    0.7078,
    -0.7078,
    1.1935,
    0.7078,
    -0.7078,
    0.616,
    -1,
    -0.44,
    0.616,
    -1,
    -0.44,
    0.616,
    -1,
    -0.44,
    0.616,
    -1,
    -0.44,
    0.616,
    -0.44,
    -1,
    0.616,
    -0.44,
    -1,
    0.616,
    -0.44,
    -1,
    0.616,
    -0.44,
    -1,
    1.4,
    -0.44,
    -0.44,
    1.4,
    -0.44,
    -0.44,
    1.4,
    -0.44,
    -0.44,
    1.4,
    -0.44,
    -0.44,
    0.616,
    -0.9252,
    -0.7196,
    0.616,
    -0.9252,
    -0.7196,
    0.616,
    -0.9252,
    -0.7196,
    0.616,
    -0.9252,
    -0.7196,
    1.0075,
    -0.9252,
    -0.44,
    1.0075,
    -0.9252,
    -0.44,
    1.0075,
    -0.9252,
    -0.44,
    1.0075,
    -0.9252,
    -0.44,
    0.9909,
    -0.8525,
    -0.7078,
    0.9909,
    -0.8525,
    -0.7078,
    0.9909,
    -0.8525,
    -0.7078,
    0.9909,
    -0.8525,
    -0.7078,
    1.0075,
    -0.44,
    -0.9252,
    1.0075,
    -0.44,
    -0.9252,
    1.0075,
    -0.44,
    -0.9252,
    1.0075,
    -0.44,
    -0.9252,
    0.616,
    -0.7196,
    -0.9252,
    0.616,
    -0.7196,
    -0.9252,
    0.616,
    -0.7196,
    -0.9252,
    0.616,
    -0.7196,
    -0.9252,
    0.9909,
    -0.7078,
    -0.8525,
    0.9909,
    -0.7078,
    -0.8525,
    0.9909,
    -0.7078,
    -0.8525,
    0.9909,
    -0.7078,
    -0.8525,
    1.2953,
    -0.7196,
    -0.44,
    1.2953,
    -0.7196,
    -0.44,
    1.2953,
    -0.7196,
    -0.44,
    1.2953,
    -0.7196,
    -0.44,
    1.2953,
    -0.44,
    -0.7196,
    1.2953,
    -0.44,
    -0.7196,
    1.2953,
    -0.44,
    -0.7196,
    1.2953,
    -0.44,
    -0.7196,
    1.1935,
    -0.7078,
    -0.7078,
    1.1935,
    -0.7078,
    -0.7078,
    1.1935,
    -0.7078,
    -0.7078,
    1.1935,
    -0.7078,
    -0.7078,
    1.4,
    0.44,
    0.44,
    1.4,
    0.44,
    0.44,
    1.4,
    0.44,
    0.44,
    1.4,
    0.44,
    0.44,
    0.616,
    1,
    0.44,
    0.616,
    1,
    0.44,
    0.616,
    1,
    0.44,
    0.616,
    1,
    0.44,
    0.616,
    0.44,
    1,
    0.616,
    0.44,
    1,
    0.616,
    0.44,
    1,
    0.616,
    0.44,
    1,
    1.2953,
    0.7196,
    0.44,
    1.2953,
    0.7196,
    0.44,
    1.2953,
    0.7196,
    0.44,
    1.2953,
    0.7196,
    0.44,
    1.2953,
    0.44,
    0.7196,
    1.2953,
    0.44,
    0.7196,
    1.2953,
    0.44,
    0.7196,
    1.2953,
    0.44,
    0.7196,
    1.1935,
    0.7078,
    0.7078,
    1.1935,
    0.7078,
    0.7078,
    1.1935,
    0.7078,
    0.7078,
    1.1935,
    0.7078,
    0.7078,
    0.616,
    0.9252,
    0.7196,
    0.616,
    0.9252,
    0.7196,
    0.616,
    0.9252,
    0.7196,
    0.616,
    0.9252,
    0.7196,
    1.0075,
    0.9252,
    0.44,
    1.0075,
    0.9252,
    0.44,
    1.0075,
    0.9252,
    0.44,
    1.0075,
    0.9252,
    0.44,
    0.9909,
    0.8525,
    0.7078,
    0.9909,
    0.8525,
    0.7078,
    0.9909,
    0.8525,
    0.7078,
    0.9909,
    0.8525,
    0.7078,
    1.0075,
    0.44,
    0.9252,
    1.0075,
    0.44,
    0.9252,
    1.0075,
    0.44,
    0.9252,
    1.0075,
    0.44,
    0.9252,
    0.616,
    0.7196,
    0.9252,
    0.616,
    0.7196,
    0.9252,
    0.616,
    0.7196,
    0.9252,
    0.616,
    0.7196,
    0.9252,
    0.9909,
    0.7078,
    0.8525,
    0.9909,
    0.7078,
    0.8525,
    0.9909,
    0.7078,
    0.8525,
    0.9909,
    0.7078,
    0.8525,
    1.4,
    -0.44,
    0.44,
    1.4,
    -0.44,
    0.44,
    1.4,
    -0.44,
    0.44,
    1.4,
    -0.44,
    0.44,
    0.616,
    -0.44,
    1,
    0.616,
    -0.44,
    1,
    0.616,
    -0.44,
    1,
    0.616,
    -0.44,
    1,
    0.616,
    -1,
    0.44,
    0.616,
    -1,
    0.44,
    0.616,
    -1,
    0.44,
    0.616,
    -1,
    0.44,
    1.2953,
    -0.44,
    0.7196,
    1.2953,
    -0.44,
    0.7196,
    1.2953,
    -0.44,
    0.7196,
    1.2953,
    -0.44,
    0.7196,
    1.2953,
    -0.7196,
    0.44,
    1.2953,
    -0.7196,
    0.44,
    1.2953,
    -0.7196,
    0.44,
    1.2953,
    -0.7196,
    0.44,
    1.1935,
    -0.7078,
    0.7078,
    1.1935,
    -0.7078,
    0.7078,
    1.1935,
    -0.7078,
    0.7078,
    1.1935,
    -0.7078,
    0.7078,
    0.616,
    -0.7196,
    0.9252,
    0.616,
    -0.7196,
    0.9252,
    0.616,
    -0.7196,
    0.9252,
    0.616,
    -0.7196,
    0.9252,
    1.0075,
    -0.44,
    0.9252,
    1.0075,
    -0.44,
    0.9252,
    1.0075,
    -0.44,
    0.9252,
    1.0075,
    -0.44,
    0.9252,
    0.9909,
    -0.7078,
    0.8525,
    0.9909,
    -0.7078,
    0.8525,
    0.9909,
    -0.7078,
    0.8525,
    0.9909,
    -0.7078,
    0.8525,
    1.0075,
    -0.9252,
    0.44,
    1.0075,
    -0.9252,
    0.44,
    1.0075,
    -0.9252,
    0.44,
    1.0075,
    -0.9252,
    0.44,
    0.616,
    -0.9252,
    0.7196,
    0.616,
    -0.9252,
    0.7196,
    0.616,
    -0.9252,
    0.7196,
    0.616,
    -0.9252,
    0.7196,
    0.9909,
    -0.8525,
    0.7078,
    0.9909,
    -0.8525,
    0.7078,
    0.9909,
    -0.8525,
    0.7078,
    0.9909,
    -0.8525,
    0.7078,
    -0.616,
    0.44,
    -1,
    -0.616,
    0.44,
    -1,
    -0.616,
    0.44,
    -1,
    -0.616,
    0.44,
    -1,
    -1.4,
    0.44,
    -0.44,
    -1.4,
    0.44,
    -0.44,
    -1.4,
    0.44,
    -0.44,
    -1.4,
    0.44,
    -0.44,
    -0.616,
    1,
    -0.44,
    -0.616,
    1,
    -0.44,
    -0.616,
    1,
    -0.44,
    -0.616,
    1,
    -0.44,
    -1.0075,
    0.44,
    -0.9252,
    -1.0075,
    0.44,
    -0.9252,
    -1.0075,
    0.44,
    -0.9252,
    -1.0075,
    0.44,
    -0.9252,
    -0.616,
    0.7196,
    -0.9252,
    -0.616,
    0.7196,
    -0.9252,
    -0.616,
    0.7196,
    -0.9252,
    -0.616,
    0.7196,
    -0.9252,
    -0.9909,
    0.7078,
    -0.8525,
    -0.9909,
    0.7078,
    -0.8525,
    -0.9909,
    0.7078,
    -0.8525,
    -0.9909,
    0.7078,
    -0.8525,
    -1.2953,
    0.7196,
    -0.44,
    -1.2953,
    0.7196,
    -0.44,
    -1.2953,
    0.7196,
    -0.44,
    -1.2953,
    0.7196,
    -0.44,
    -1.2953,
    0.44,
    -0.7196,
    -1.2953,
    0.44,
    -0.7196,
    -1.2953,
    0.44,
    -0.7196,
    -1.2953,
    0.44,
    -0.7196,
    -1.1935,
    0.7078,
    -0.7078,
    -1.1935,
    0.7078,
    -0.7078,
    -1.1935,
    0.7078,
    -0.7078,
    -1.1935,
    0.7078,
    -0.7078,
    -0.616,
    0.9252,
    -0.7196,
    -0.616,
    0.9252,
    -0.7196,
    -0.616,
    0.9252,
    -0.7196,
    -0.616,
    0.9252,
    -0.7196,
    -1.0075,
    0.9252,
    -0.44,
    -1.0075,
    0.9252,
    -0.44,
    -1.0075,
    0.9252,
    -0.44,
    -1.0075,
    0.9252,
    -0.44,
    -0.9909,
    0.8525,
    -0.7078,
    -0.9909,
    0.8525,
    -0.7078,
    -0.9909,
    0.8525,
    -0.7078,
    -0.9909,
    0.8525,
    -0.7078,
    -1.4,
    -0.44,
    -0.44,
    -1.4,
    -0.44,
    -0.44,
    -1.4,
    -0.44,
    -0.44,
    -1.4,
    -0.44,
    -0.44,
    -0.616,
    -0.44,
    -1,
    -0.616,
    -0.44,
    -1,
    -0.616,
    -0.44,
    -1,
    -0.616,
    -0.44,
    -1,
    -0.616,
    -1,
    -0.44,
    -0.616,
    -1,
    -0.44,
    -0.616,
    -1,
    -0.44,
    -0.616,
    -1,
    -0.44,
    -1.2953,
    -0.44,
    -0.7196,
    -1.2953,
    -0.44,
    -0.7196,
    -1.2953,
    -0.44,
    -0.7196,
    -1.2953,
    -0.44,
    -0.7196,
    -1.2953,
    -0.7196,
    -0.44,
    -1.2953,
    -0.7196,
    -0.44,
    -1.2953,
    -0.7196,
    -0.44,
    -1.2953,
    -0.7196,
    -0.44,
    -1.1935,
    -0.7078,
    -0.7078,
    -1.1935,
    -0.7078,
    -0.7078,
    -1.1935,
    -0.7078,
    -0.7078,
    -1.1935,
    -0.7078,
    -0.7078,
    -0.616,
    -0.7196,
    -0.9252,
    -0.616,
    -0.7196,
    -0.9252,
    -0.616,
    -0.7196,
    -0.9252,
    -0.616,
    -0.7196,
    -0.9252,
    -1.0075,
    -0.44,
    -0.9252,
    -1.0075,
    -0.44,
    -0.9252,
    -1.0075,
    -0.44,
    -0.9252,
    -1.0075,
    -0.44,
    -0.9252,
    -0.9909,
    -0.7078,
    -0.8525,
    -0.9909,
    -0.7078,
    -0.8525,
    -0.9909,
    -0.7078,
    -0.8525,
    -0.9909,
    -0.7078,
    -0.8525,
    -1.0075,
    -0.9252,
    -0.44,
    -1.0075,
    -0.9252,
    -0.44,
    -1.0075,
    -0.9252,
    -0.44,
    -1.0075,
    -0.9252,
    -0.44,
    -0.616,
    -0.9252,
    -0.7196,
    -0.616,
    -0.9252,
    -0.7196,
    -0.616,
    -0.9252,
    -0.7196,
    -0.616,
    -0.9252,
    -0.7196,
    -0.9909,
    -0.8525,
    -0.7078,
    -0.9909,
    -0.8525,
    -0.7078,
    -0.9909,
    -0.8525,
    -0.7078,
    -0.9909,
    -0.8525,
    -0.7078,
    -1.4,
    0.44,
    0.44,
    -1.4,
    0.44,
    0.44,
    -1.4,
    0.44,
    0.44,
    -1.4,
    0.44,
    0.44,
    -0.616,
    0.44,
    1,
    -0.616,
    0.44,
    1,
    -0.616,
    0.44,
    1,
    -0.616,
    0.44,
    1,
    -0.616,
    1,
    0.44,
    -0.616,
    1,
    0.44,
    -0.616,
    1,
    0.44,
    -0.616,
    1,
    0.44,
    -1.2953,
    0.44,
    0.7196,
    -1.2953,
    0.44,
    0.7196,
    -1.2953,
    0.44,
    0.7196,
    -1.2953,
    0.44,
    0.7196,
    -1.2953,
    0.7196,
    0.44,
    -1.2953,
    0.7196,
    0.44,
    -1.2953,
    0.7196,
    0.44,
    -1.2953,
    0.7196,
    0.44,
    -1.1935,
    0.7078,
    0.7078,
    -1.1935,
    0.7078,
    0.7078,
    -1.1935,
    0.7078,
    0.7078,
    -1.1935,
    0.7078,
    0.7078,
    -0.616,
    0.7196,
    0.9252,
    -0.616,
    0.7196,
    0.9252,
    -0.616,
    0.7196,
    0.9252,
    -0.616,
    0.7196,
    0.9252,
    -1.0075,
    0.44,
    0.9252,
    -1.0075,
    0.44,
    0.9252,
    -1.0075,
    0.44,
    0.9252,
    -1.0075,
    0.44,
    0.9252,
    -0.9909,
    0.7078,
    0.8525,
    -0.9909,
    0.7078,
    0.8525,
    -0.9909,
    0.7078,
    0.8525,
    -0.9909,
    0.7078,
    0.8525,
    -1.0075,
    0.9252,
    0.44,
    -1.0075,
    0.9252,
    0.44,
    -1.0075,
    0.9252,
    0.44,
    -1.0075,
    0.9252,
    0.44,
    -0.616,
    0.9252,
    0.7196,
    -0.616,
    0.9252,
    0.7196,
    -0.616,
    0.9252,
    0.7196,
    -0.616,
    0.9252,
    0.7196,
    -0.9909,
    0.8525,
    0.7078,
    -0.9909,
    0.8525,
    0.7078,
    -0.9909,
    0.8525,
    0.7078,
    -0.9909,
    0.8525,
    0.7078,
    -0.616,
    -1,
    0.44,
    -0.616,
    -1,
    0.44,
    -0.616,
    -1,
    0.44,
    -0.616,
    -1,
    0.44,
    -0.616,
    -0.44,
    1,
    -0.616,
    -0.44,
    1,
    -0.616,
    -0.44,
    1,
    -0.616,
    -0.44,
    1,
    -1.4,
    -0.44,
    0.44,
    -1.4,
    -0.44,
    0.44,
    -1.4,
    -0.44,
    0.44,
    -1.4,
    -0.44,
    0.44,
    -0.616,
    -0.9252,
    0.7196,
    -0.616,
    -0.9252,
    0.7196,
    -0.616,
    -0.9252,
    0.7196,
    -0.616,
    -0.9252,
    0.7196,
    -1.0075,
    -0.9252,
    0.44,
    -1.0075,
    -0.9252,
    0.44,
    -1.0075,
    -0.9252,
    0.44,
    -1.0075,
    -0.9252,
    0.44,
    -0.9909,
    -0.8525,
    0.7078,
    -0.9909,
    -0.8525,
    0.7078,
    -0.9909,
    -0.8525,
    0.7078,
    -0.9909,
    -0.8525,
    0.7078,
    -1.0075,
    -0.44,
    0.9252,
    -1.0075,
    -0.44,
    0.9252,
    -1.0075,
    -0.44,
    0.9252,
    -1.0075,
    -0.44,
    0.9252,
    -0.616,
    -0.7196,
    0.9252,
    -0.616,
    -0.7196,
    0.9252,
    -0.616,
    -0.7196,
    0.9252,
    -0.616,
    -0.7196,
    0.9252,
    -0.9909,
    -0.7078,
    0.8525,
    -0.9909,
    -0.7078,
    0.8525,
    -0.9909,
    -0.7078,
    0.8525,
    -0.9909,
    -0.7078,
    0.8525,
    -1.2953,
    -0.7196,
    0.44,
    -1.2953,
    -0.7196,
    0.44,
    -1.2953,
    -0.7196,
    0.44,
    -1.2953,
    -0.7196,
    0.44,
    -1.2953,
    -0.44,
    0.7196,
    -1.2953,
    -0.44,
    0.7196,
    -1.2953,
    -0.44,
    0.7196,
    -1.2953,
    -0.44,
    0.7196,
    -1.1935,
    -0.7078,
    0.7078,
    -1.1935,
    -0.7078,
    0.7078,
    -1.1935,
    -0.7078,
    0.7078,
    -1.1935,
    -0.7078,
    0.7078
  ]);
  var normal_arr = Float32Array.from([
    0,
    0,
    -1,
    0,
    0.2585,
    -0.966,
    0.1863,
    0.2608,
    -0.9472,
    0.1877,
    0,
    -0.9822,
    0,
    0.966,
    -0.2585,
    0,
    1,
    0,
    0.1863,
    0.9472,
    -0.2608,
    0.1877,
    0.9822,
    0,
    0.878,
    0.3385,
    -0.3385,
    0.9365,
    0,
    -0.3508,
    0.9365,
    0.3508,
    0,
    1,
    0,
    0,
    0,
    0.2585,
    -0.966,
    0,
    0.7071,
    -0.7071,
    0.1574,
    0.6983,
    -0.6983,
    0.1863,
    0.2608,
    -0.9472,
    0.1863,
    0.2608,
    -0.9472,
    0.1877,
    0,
    -0.9822,
    0.563,
    0.2487,
    -0.7882,
    0.5812,
    0,
    -0.8137,
    0.1574,
    0.6983,
    -0.6983,
    0.1863,
    0.2608,
    -0.9472,
    0.4508,
    0.6312,
    -0.6312,
    0.563,
    0.2487,
    -0.7882,
    0.1863,
    0.9472,
    -0.2608,
    0.1877,
    0.9822,
    0,
    0.563,
    0.7882,
    -0.2487,
    0.5812,
    0.8137,
    0,
    0,
    0.7071,
    -0.7071,
    0,
    0.966,
    -0.2585,
    0.1574,
    0.6983,
    -0.6983,
    0.1863,
    0.9472,
    -0.2608,
    0.1574,
    0.6983,
    -0.6983,
    0.1863,
    0.9472,
    -0.2608,
    0.4508,
    0.6312,
    -0.6312,
    0.563,
    0.7882,
    -0.2487,
    0.563,
    0.2487,
    -0.7882,
    0.5812,
    0,
    -0.8137,
    0.878,
    0.3385,
    -0.3385,
    0.9365,
    0,
    -0.3508,
    0.563,
    0.7882,
    -0.2487,
    0.5812,
    0.8137,
    0,
    0.878,
    0.3385,
    -0.3385,
    0.9365,
    0.3508,
    0,
    0.4508,
    0.6312,
    -0.6312,
    0.563,
    0.7882,
    -0.2487,
    0.563,
    0.2487,
    -0.7882,
    0.878,
    0.3385,
    -0.3385,
    0,
    -1,
    0,
    0,
    -0.966,
    -0.2585,
    0.1863,
    -0.9472,
    -0.2608,
    0.1877,
    -0.9822,
    0,
    0,
    -0.2585,
    -0.966,
    0,
    0,
    -1,
    0.1863,
    -0.2608,
    -0.9472,
    0.1877,
    0,
    -0.9822,
    0.878,
    -0.3385,
    -0.3385,
    0.9365,
    0,
    -0.3508,
    0.9365,
    -0.3508,
    0,
    1,
    0,
    0,
    0,
    -0.966,
    -0.2585,
    0,
    -0.7071,
    -0.7071,
    0.1574,
    -0.6983,
    -0.6983,
    0.1863,
    -0.9472,
    -0.2608,
    0.1863,
    -0.9472,
    -0.2608,
    0.1877,
    -0.9822,
    0,
    0.563,
    -0.7882,
    -0.2487,
    0.5812,
    -0.8137,
    0,
    0.1574,
    -0.6983,
    -0.6983,
    0.1863,
    -0.9472,
    -0.2608,
    0.4508,
    -0.6312,
    -0.6312,
    0.563,
    -0.7882,
    -0.2487,
    0.1863,
    -0.2608,
    -0.9472,
    0.1877,
    0,
    -0.9822,
    0.563,
    -0.2487,
    -0.7882,
    0.5812,
    0,
    -0.8137,
    0,
    -0.7071,
    -0.7071,
    0,
    -0.2585,
    -0.966,
    0.1574,
    -0.6983,
    -0.6983,
    0.1863,
    -0.2608,
    -0.9472,
    0.1574,
    -0.6983,
    -0.6983,
    0.1863,
    -0.2608,
    -0.9472,
    0.4508,
    -0.6312,
    -0.6312,
    0.563,
    -0.2487,
    -0.7882,
    0.563,
    -0.7882,
    -0.2487,
    0.5812,
    -0.8137,
    0,
    0.878,
    -0.3385,
    -0.3385,
    0.9365,
    -0.3508,
    0,
    0.563,
    -0.2487,
    -0.7882,
    0.5812,
    0,
    -0.8137,
    0.878,
    -0.3385,
    -0.3385,
    0.9365,
    0,
    -0.3508,
    0.4508,
    -0.6312,
    -0.6312,
    0.563,
    -0.7882,
    -0.2487,
    0.563,
    -0.2487,
    -0.7882,
    0.878,
    -0.3385,
    -0.3385,
    0.878,
    0.3385,
    0.3385,
    0.9365,
    0,
    0.3508,
    0.9365,
    0.3508,
    0,
    1,
    0,
    0,
    0,
    0.966,
    0.2585,
    0,
    1,
    0,
    0.1863,
    0.9472,
    0.2608,
    0.1877,
    0.9822,
    0,
    0,
    0,
    1,
    0,
    0.2585,
    0.966,
    0.1863,
    0.2608,
    0.9472,
    0.1877,
    0,
    0.9822,
    0.563,
    0.7882,
    0.2487,
    0.5812,
    0.8137,
    0,
    0.878,
    0.3385,
    0.3385,
    0.9365,
    0.3508,
    0,
    0.563,
    0.2487,
    0.7882,
    0.5812,
    0,
    0.8137,
    0.878,
    0.3385,
    0.3385,
    0.9365,
    0,
    0.3508,
    0.4508,
    0.6312,
    0.6312,
    0.563,
    0.7882,
    0.2487,
    0.563,
    0.2487,
    0.7882,
    0.878,
    0.3385,
    0.3385,
    0,
    0.7071,
    0.7071,
    0,
    0.966,
    0.2585,
    0.1574,
    0.6983,
    0.6983,
    0.1863,
    0.9472,
    0.2608,
    0.1863,
    0.9472,
    0.2608,
    0.1877,
    0.9822,
    0,
    0.563,
    0.7882,
    0.2487,
    0.5812,
    0.8137,
    0,
    0.1574,
    0.6983,
    0.6983,
    0.1863,
    0.9472,
    0.2608,
    0.4508,
    0.6312,
    0.6312,
    0.563,
    0.7882,
    0.2487,
    0.1863,
    0.2608,
    0.9472,
    0.1877,
    0,
    0.9822,
    0.563,
    0.2487,
    0.7882,
    0.5812,
    0,
    0.8137,
    0,
    0.2585,
    0.966,
    0,
    0.7071,
    0.7071,
    0.1574,
    0.6983,
    0.6983,
    0.1863,
    0.2608,
    0.9472,
    0.1574,
    0.6983,
    0.6983,
    0.1863,
    0.2608,
    0.9472,
    0.4508,
    0.6312,
    0.6312,
    0.563,
    0.2487,
    0.7882,
    0.878,
    -0.3385,
    0.3385,
    0.9365,
    0,
    0.3508,
    0.9365,
    -0.3508,
    0,
    1,
    0,
    0,
    0,
    -0.2585,
    0.966,
    0,
    0,
    1,
    0.1863,
    -0.2608,
    0.9472,
    0.1877,
    0,
    0.9822,
    0,
    -1,
    0,
    0,
    -0.966,
    0.2585,
    0.1863,
    -0.9472,
    0.2608,
    0.1877,
    -0.9822,
    0,
    0.563,
    -0.2487,
    0.7882,
    0.5812,
    0,
    0.8137,
    0.878,
    -0.3385,
    0.3385,
    0.9365,
    0,
    0.3508,
    0.563,
    -0.7882,
    0.2487,
    0.5812,
    -0.8137,
    0,
    0.878,
    -0.3385,
    0.3385,
    0.9365,
    -0.3508,
    0,
    0.4508,
    -0.6312,
    0.6312,
    0.563,
    -0.7882,
    0.2487,
    0.563,
    -0.2487,
    0.7882,
    0.878,
    -0.3385,
    0.3385,
    0,
    -0.7071,
    0.7071,
    0,
    -0.2585,
    0.966,
    0.1574,
    -0.6983,
    0.6983,
    0.1863,
    -0.2608,
    0.9472,
    0.1863,
    -0.2608,
    0.9472,
    0.1877,
    0,
    0.9822,
    0.563,
    -0.2487,
    0.7882,
    0.5812,
    0,
    0.8137,
    0.1574,
    -0.6983,
    0.6983,
    0.1863,
    -0.2608,
    0.9472,
    0.4508,
    -0.6312,
    0.6312,
    0.563,
    -0.2487,
    0.7882,
    0.1863,
    -0.9472,
    0.2608,
    0.1877,
    -0.9822,
    0,
    0.563,
    -0.7882,
    0.2487,
    0.5812,
    -0.8137,
    0,
    0,
    -0.966,
    0.2585,
    0,
    -0.7071,
    0.7071,
    0.1574,
    -0.6983,
    0.6983,
    0.1863,
    -0.9472,
    0.2608,
    0.1574,
    -0.6983,
    0.6983,
    0.1863,
    -0.9472,
    0.2608,
    0.4508,
    -0.6312,
    0.6312,
    0.563,
    -0.7882,
    0.2487,
    -0.1877,
    0,
    -0.9822,
    -0.1863,
    0.2608,
    -0.9472,
    0,
    0,
    -1,
    0,
    0.2585,
    -0.966,
    -1,
    0,
    0,
    -0.9365,
    0.3508,
    0,
    -0.9365,
    0,
    -0.3508,
    -0.878,
    0.3385,
    -0.3385,
    -0.1877,
    0.9822,
    0,
    -0.1863,
    0.9472,
    -0.2608,
    0,
    0.966,
    -0.2585,
    0,
    1,
    0,
    -0.5812,
    0,
    -0.8137,
    -0.563,
    0.2487,
    -0.7882,
    -0.1877,
    0,
    -0.9822,
    -0.1863,
    0.2608,
    -0.9472,
    -0.1863,
    0.2608,
    -0.9472,
    -0.1574,
    0.6983,
    -0.6983,
    0,
    0.2585,
    -0.966,
    0,
    0.7071,
    -0.7071,
    -0.563,
    0.2487,
    -0.7882,
    -0.4508,
    0.6312,
    -0.6312,
    -0.1863,
    0.2608,
    -0.9472,
    -0.1574,
    0.6983,
    -0.6983,
    -0.9365,
    0.3508,
    0,
    -0.878,
    0.3385,
    -0.3385,
    -0.5812,
    0.8137,
    0,
    -0.563,
    0.7882,
    -0.2487,
    -0.9365,
    0,
    -0.3508,
    -0.878,
    0.3385,
    -0.3385,
    -0.5812,
    0,
    -0.8137,
    -0.563,
    0.2487,
    -0.7882,
    -0.878,
    0.3385,
    -0.3385,
    -0.563,
    0.2487,
    -0.7882,
    -0.563,
    0.7882,
    -0.2487,
    -0.4508,
    0.6312,
    -0.6312,
    -0.1863,
    0.9472,
    -0.2608,
    -0.1574,
    0.6983,
    -0.6983,
    0,
    0.7071,
    -0.7071,
    0,
    0.966,
    -0.2585,
    -0.5812,
    0.8137,
    0,
    -0.563,
    0.7882,
    -0.2487,
    -0.1877,
    0.9822,
    0,
    -0.1863,
    0.9472,
    -0.2608,
    -0.563,
    0.7882,
    -0.2487,
    -0.4508,
    0.6312,
    -0.6312,
    -0.1863,
    0.9472,
    -0.2608,
    -0.1574,
    0.6983,
    -0.6983,
    -1,
    0,
    0,
    -0.9365,
    -0.3508,
    0,
    -0.9365,
    0,
    -0.3508,
    -0.878,
    -0.3385,
    -0.3385,
    -0.1877,
    0,
    -0.9822,
    -0.1863,
    -0.2608,
    -0.9472,
    0,
    -0.2585,
    -0.966,
    0,
    0,
    -1,
    -0.1877,
    -0.9822,
    0,
    -0.1863,
    -0.9472,
    -0.2608,
    0,
    -1,
    0,
    0,
    -0.966,
    -0.2585,
    -0.9365,
    0,
    -0.3508,
    -0.878,
    -0.3385,
    -0.3385,
    -0.5812,
    0,
    -0.8137,
    -0.563,
    -0.2487,
    -0.7882,
    -0.9365,
    -0.3508,
    0,
    -0.878,
    -0.3385,
    -0.3385,
    -0.5812,
    -0.8137,
    0,
    -0.563,
    -0.7882,
    -0.2487,
    -0.878,
    -0.3385,
    -0.3385,
    -0.563,
    -0.2487,
    -0.7882,
    -0.563,
    -0.7882,
    -0.2487,
    -0.4508,
    -0.6312,
    -0.6312,
    -0.1863,
    -0.2608,
    -0.9472,
    -0.1574,
    -0.6983,
    -0.6983,
    0,
    -0.7071,
    -0.7071,
    0,
    -0.2585,
    -0.966,
    -0.5812,
    0,
    -0.8137,
    -0.563,
    -0.2487,
    -0.7882,
    -0.1877,
    0,
    -0.9822,
    -0.1863,
    -0.2608,
    -0.9472,
    -0.563,
    -0.2487,
    -0.7882,
    -0.4508,
    -0.6312,
    -0.6312,
    -0.1863,
    -0.2608,
    -0.9472,
    -0.1574,
    -0.6983,
    -0.6983,
    -0.5812,
    -0.8137,
    0,
    -0.563,
    -0.7882,
    -0.2487,
    -0.1877,
    -0.9822,
    0,
    -0.1863,
    -0.9472,
    -0.2608,
    -0.1863,
    -0.9472,
    -0.2608,
    -0.1574,
    -0.6983,
    -0.6983,
    0,
    -0.966,
    -0.2585,
    0,
    -0.7071,
    -0.7071,
    -0.563,
    -0.7882,
    -0.2487,
    -0.4508,
    -0.6312,
    -0.6312,
    -0.1863,
    -0.9472,
    -0.2608,
    -0.1574,
    -0.6983,
    -0.6983,
    -1,
    0,
    0,
    -0.9365,
    0.3508,
    0,
    -0.9365,
    0,
    0.3508,
    -0.878,
    0.3385,
    0.3385,
    -0.1877,
    0,
    0.9822,
    -0.1863,
    0.2608,
    0.9472,
    0,
    0,
    1,
    0,
    0.2585,
    0.966,
    -0.1877,
    0.9822,
    0,
    -0.1863,
    0.9472,
    0.2608,
    0,
    0.966,
    0.2585,
    0,
    1,
    0,
    -0.9365,
    0,
    0.3508,
    -0.878,
    0.3385,
    0.3385,
    -0.5812,
    0,
    0.8137,
    -0.563,
    0.2487,
    0.7882,
    -0.9365,
    0.3508,
    0,
    -0.878,
    0.3385,
    0.3385,
    -0.5812,
    0.8137,
    0,
    -0.563,
    0.7882,
    0.2487,
    -0.878,
    0.3385,
    0.3385,
    -0.563,
    0.2487,
    0.7882,
    -0.563,
    0.7882,
    0.2487,
    -0.4508,
    0.6312,
    0.6312,
    -0.1863,
    0.2608,
    0.9472,
    -0.1574,
    0.6983,
    0.6983,
    0,
    0.2585,
    0.966,
    0,
    0.7071,
    0.7071,
    -0.5812,
    0,
    0.8137,
    -0.563,
    0.2487,
    0.7882,
    -0.1877,
    0,
    0.9822,
    -0.1863,
    0.2608,
    0.9472,
    -0.563,
    0.2487,
    0.7882,
    -0.4508,
    0.6312,
    0.6312,
    -0.1863,
    0.2608,
    0.9472,
    -0.1574,
    0.6983,
    0.6983,
    -0.5812,
    0.8137,
    0,
    -0.563,
    0.7882,
    0.2487,
    -0.1877,
    0.9822,
    0,
    -0.1863,
    0.9472,
    0.2608,
    -0.1863,
    0.9472,
    0.2608,
    -0.1574,
    0.6983,
    0.6983,
    0,
    0.7071,
    0.7071,
    0,
    0.966,
    0.2585,
    -0.563,
    0.7882,
    0.2487,
    -0.4508,
    0.6312,
    0.6312,
    -0.1863,
    0.9472,
    0.2608,
    -0.1574,
    0.6983,
    0.6983,
    -0.1877,
    -0.9822,
    0,
    -0.1863,
    -0.9472,
    0.2608,
    0,
    -1,
    0,
    0,
    -0.966,
    0.2585,
    -0.1877,
    0,
    0.9822,
    -0.1863,
    -0.2608,
    0.9472,
    0,
    -0.2585,
    0.966,
    0,
    0,
    1,
    -1,
    0,
    0,
    -0.9365,
    -0.3508,
    0,
    -0.9365,
    0,
    0.3508,
    -0.878,
    -0.3385,
    0.3385,
    -0.1863,
    -0.9472,
    0.2608,
    -0.1574,
    -0.6983,
    0.6983,
    0,
    -0.966,
    0.2585,
    0,
    -0.7071,
    0.7071,
    -0.5812,
    -0.8137,
    0,
    -0.563,
    -0.7882,
    0.2487,
    -0.1877,
    -0.9822,
    0,
    -0.1863,
    -0.9472,
    0.2608,
    -0.563,
    -0.7882,
    0.2487,
    -0.4508,
    -0.6312,
    0.6312,
    -0.1863,
    -0.9472,
    0.2608,
    -0.1574,
    -0.6983,
    0.6983,
    -0.5812,
    0,
    0.8137,
    -0.563,
    -0.2487,
    0.7882,
    -0.1877,
    0,
    0.9822,
    -0.1863,
    -0.2608,
    0.9472,
    -0.1863,
    -0.2608,
    0.9472,
    -0.1574,
    -0.6983,
    0.6983,
    0,
    -0.7071,
    0.7071,
    0,
    -0.2585,
    0.966,
    -0.563,
    -0.2487,
    0.7882,
    -0.4508,
    -0.6312,
    0.6312,
    -0.1863,
    -0.2608,
    0.9472,
    -0.1574,
    -0.6983,
    0.6983,
    -0.9365,
    -0.3508,
    0,
    -0.878,
    -0.3385,
    0.3385,
    -0.5812,
    -0.8137,
    0,
    -0.563,
    -0.7882,
    0.2487,
    -0.9365,
    0,
    0.3508,
    -0.878,
    -0.3385,
    0.3385,
    -0.5812,
    0,
    0.8137,
    -0.563,
    -0.2487,
    0.7882,
    -0.878,
    -0.3385,
    0.3385,
    -0.563,
    -0.2487,
    0.7882,
    -0.563,
    -0.7882,
    0.2487,
    -0.4508,
    -0.6312,
    0.6312
  ]);
  var texcoord_arr = Float32Array.from([
    0.555,
    0.57,
    0.555,
    0.57,
    0.555,
    0.57,
    0.555,
    0.57,
    0.695,
    0.43,
    0.695,
    0.43,
    0.695,
    0.43,
    0.695,
    0.43,
    0.555,
    0.43,
    0.555,
    0.43,
    0.555,
    0.43,
    0.555,
    0.43,
    0.59,
    0.57,
    0.59,
    0.57,
    0.59,
    0.57,
    0.59,
    0.57,
    0.555,
    0.535,
    0.555,
    0.535,
    0.555,
    0.5,
    0.555,
    0.535,
    0.5885,
    0.5365,
    0.5885,
    0.5365,
    0.5885,
    0.5365,
    0.5885,
    0.5,
    0.66,
    0.43,
    0.66,
    0.43,
    0.66,
    0.43,
    0.66,
    0.43,
    0.625,
    0.57,
    0.695,
    0.465,
    0.625,
    0.57,
    0.695,
    0.465,
    0.625,
    0.5365,
    0.6615,
    0.4635,
    0.625,
    0.5365,
    0.6615,
    0.4635,
    0.555,
    0.465,
    0.555,
    0.465,
    0.555,
    0.465,
    0.555,
    0.465,
    0.625,
    0.43,
    0.59,
    0.43,
    0.59,
    0.43,
    0.59,
    0.43,
    0.5885,
    0.5,
    0.625,
    0.4635,
    0.5885,
    0.4635,
    0.5885,
    0.4635,
    0.305,
    0.43,
    0.305,
    0.43,
    0.305,
    0.43,
    0.305,
    0.43,
    0.445,
    0.57,
    0.445,
    0.57,
    0.445,
    0.57,
    0.445,
    0.57,
    0.445,
    0.43,
    0.445,
    0.43,
    0.445,
    0.43,
    0.445,
    0.43,
    0.305,
    0.465,
    0.305,
    0.465,
    0.305,
    0.465,
    0.305,
    0.465,
    0.34,
    0.43,
    0.34,
    0.43,
    0.375,
    0.43,
    0.34,
    0.43,
    0.3385,
    0.4635,
    0.3385,
    0.4635,
    0.3385,
    0.4635,
    0.375,
    0.4635,
    0.445,
    0.535,
    0.445,
    0.535,
    0.445,
    0.535,
    0.445,
    0.535,
    0.305,
    0.5,
    0.41,
    0.57,
    0.305,
    0.5,
    0.41,
    0.57,
    0.3385,
    0.5,
    0.4115,
    0.5365,
    0.3385,
    0.5,
    0.4115,
    0.5365,
    0.41,
    0.43,
    0.41,
    0.43,
    0.41,
    0.43,
    0.41,
    0.43,
    0.445,
    0.5,
    0.445,
    0.465,
    0.445,
    0.465,
    0.445,
    0.465,
    0.375,
    0.4635,
    0.4115,
    0.4635,
    0.4115,
    0.5,
    0.4115,
    0.4635,
    0.555,
    0.32,
    0.555,
    0.32,
    0.555,
    0.32,
    0.555,
    0.32,
    0.695,
    0.32,
    0.695,
    0.32,
    0.695,
    0.32,
    0.695,
    0.32,
    0.555,
    0.18,
    0.555,
    0.18,
    0.555,
    0.18,
    0.555,
    0.18,
    0.59,
    0.32,
    0.59,
    0.32,
    0.59,
    0.32,
    0.59,
    0.32,
    0.555,
    0.25,
    0.555,
    0.285,
    0.555,
    0.285,
    0.555,
    0.285,
    0.5885,
    0.2865,
    0.5885,
    0.2865,
    0.5885,
    0.25,
    0.5885,
    0.2865,
    0.625,
    0.18,
    0.695,
    0.285,
    0.6156,
    0.18,
    0.695,
    0.285,
    0.66,
    0.32,
    0.66,
    0.32,
    0.625,
    0.32,
    0.66,
    0.32,
    0.6066,
    0.2135,
    0.6615,
    0.2865,
    0.625,
    0.2865,
    0.625,
    0.2865,
    0.555,
    0.215,
    0.555,
    0.215,
    0.555,
    0.215,
    0.555,
    0.215,
    0.59,
    0.18,
    0.59,
    0.18,
    0.625,
    0.18,
    0.59,
    0.18,
    0.625,
    0.2135,
    0.5885,
    0.2135,
    0.5885,
    0.25,
    0.5885,
    0.2135,
    0.445,
    0.32,
    0.445,
    0.32,
    0.445,
    0.32,
    0.445,
    0.32,
    0.445,
    0.18,
    0.445,
    0.18,
    0.445,
    0.18,
    0.445,
    0.18,
    0.305,
    0.32,
    0.305,
    0.32,
    0.305,
    0.32,
    0.305,
    0.32,
    0.445,
    0.285,
    0.445,
    0.285,
    0.445,
    0.285,
    0.445,
    0.285,
    0.375,
    0.32,
    0.41,
    0.32,
    0.41,
    0.32,
    0.41,
    0.32,
    0.4115,
    0.2316,
    0.375,
    0.2865,
    0.4115,
    0.2865,
    0.4115,
    0.2865,
    0.305,
    0.25,
    0.41,
    0.18,
    0.305,
    0.2594,
    0.41,
    0.18,
    0.445,
    0.215,
    0.445,
    0.215,
    0.445,
    0.25,
    0.445,
    0.215,
    0.3385,
    0.2684,
    0.4115,
    0.2135,
    0.375,
    0.2135,
    0.4115,
    0.25,
    0.34,
    0.32,
    0.34,
    0.32,
    0.34,
    0.32,
    0.34,
    0.32,
    0.305,
    0.285,
    0.305,
    0.285,
    0.305,
    0.25,
    0.305,
    0.285,
    0.3385,
    0.25,
    0.3385,
    0.2865,
    0.375,
    0.2135,
    0.3385,
    0.2865,
    0.555,
    0.68,
    0.555,
    0.68,
    0.555,
    0.68,
    0.555,
    0.68,
    0.555,
    0.82,
    0.555,
    0.82,
    0.555,
    0.82,
    0.555,
    0.82,
    0.805,
    0.43,
    0.805,
    0.43,
    0.805,
    0.43,
    0.805,
    0.43,
    0.555,
    0.715,
    0.555,
    0.715,
    0.555,
    0.715,
    0.555,
    0.715,
    0.59,
    0.68,
    0.625,
    0.68,
    0.59,
    0.68,
    0.59,
    0.68,
    0.5885,
    0.7135,
    0.5885,
    0.7684,
    0.5885,
    0.7135,
    0.625,
    0.7135,
    0.59,
    0.82,
    0.59,
    0.82,
    0.59,
    0.82,
    0.59,
    0.82,
    0.555,
    0.785,
    0.555,
    0.785,
    0.555,
    0.785,
    0.555,
    0.75,
    0.5885,
    0.7865,
    0.5885,
    0.75,
    0.5885,
    0.7865,
    0.5885,
    0.75,
    0.805,
    0.465,
    0.6156,
    0.68,
    0.625,
    0.68,
    0.805,
    0.465,
    0.625,
    0.82,
    0.625,
    0.82,
    0.84,
    0.43,
    0.84,
    0.43,
    0.625,
    0.7865,
    0.625,
    0.7865,
    0.8385,
    0.4635,
    0.6066,
    0.7135,
    0.445,
    0.82,
    0.445,
    0.82,
    0.445,
    0.82,
    0.445,
    0.82,
    0.445,
    0.68,
    0.445,
    0.68,
    0.445,
    0.68,
    0.445,
    0.68,
    0.195,
    0.43,
    0.195,
    0.43,
    0.195,
    0.43,
    0.195,
    0.43,
    0.445,
    0.785,
    0.445,
    0.785,
    0.445,
    0.785,
    0.445,
    0.785,
    0.41,
    0.82,
    0.41,
    0.82,
    0.125,
    0.43,
    0.125,
    0.43,
    0.4115,
    0.7865,
    0.4115,
    0.7865,
    0.125,
    0.4635,
    0.4115,
    0.7865,
    0.41,
    0.68,
    0.195,
    0.4906,
    0.195,
    0.5,
    0.41,
    0.68,
    0.445,
    0.715,
    0.445,
    0.75,
    0.445,
    0.715,
    0.445,
    0.715,
    0.4115,
    0.75,
    0.4115,
    0.75,
    0.4115,
    0.7135,
    0.1615,
    0.4816,
    0.16,
    0.43,
    0.16,
    0.43,
    0.16,
    0.43,
    0.16,
    0.43,
    0.195,
    0.465,
    0.195,
    0.5,
    0.195,
    0.465,
    0.195,
    0.465,
    0.1615,
    0.4635,
    0.375,
    0.7865,
    0.1615,
    0.4635,
    0.1615,
    0.5,
    0.555,
    0.93,
    0.555,
    0.93,
    0.555,
    0.93,
    0.555,
    0.93,
    0.555,
    0.07,
    0.555,
    0.07,
    0.555,
    0.07,
    0.555,
    0.07,
    0.805,
    0.32,
    0.805,
    0.32,
    0.805,
    0.32,
    0.805,
    0.32,
    0.555,
    0.965,
    0.555,
    0.965,
    0.555,
    0.965,
    0.555,
    0.965,
    0.59,
    0.93,
    0.59,
    0.93,
    0.59,
    0.93,
    0.625,
    0.93,
    0.5885,
    0.9635,
    0.5885,
    0.9635,
    0.625,
    0.9635,
    0.5885,
    0.9635,
    0.59,
    0.07,
    0.59,
    0.07,
    0.59,
    0.07,
    0.59,
    0.07,
    0.555,
    1,
    0.555,
    1,
    0.555,
    0.035,
    0.555,
    0.035,
    0.5885,
    1,
    0.5885,
    1,
    0.5885,
    0.0365,
    0.5885,
    0.0365,
    0.625,
    0.93,
    0.6156,
    0.93,
    0.84,
    0.32,
    0.84,
    0.32,
    0.805,
    0.285,
    0.625,
    0.07,
    0.625,
    0.07,
    0.805,
    0.285,
    0.6066,
    0.9635,
    0.625,
    0.9635,
    0.8385,
    0.2865,
    0.625,
    0.0365,
    0.195,
    0.32,
    0.195,
    0.32,
    0.195,
    0.32,
    0.195,
    0.32,
    0.445,
    0.07,
    0.445,
    0.07,
    0.445,
    0.07,
    0.445,
    0.07,
    0.445,
    0.93,
    0.445,
    0.93,
    0.445,
    0.93,
    0.445,
    0.93,
    0.195,
    0.285,
    0.195,
    0.285,
    0.195,
    0.285,
    0.195,
    0.285,
    0.16,
    0.32,
    0.125,
    0.32,
    0.16,
    0.32,
    0.16,
    0.32,
    0.125,
    0.2865,
    0.1615,
    0.2865,
    0.1615,
    0.2865,
    0.1615,
    0.2865,
    0.445,
    1,
    0.445,
    0.9906,
    0.445,
    0.035,
    0.445,
    0.035,
    0.41,
    0.07,
    0.195,
    0.25,
    0.195,
    0.25,
    0.41,
    0.07,
    0.4115,
    0.9816,
    0.1615,
    0.25,
    0.4115,
    0.0365,
    0.1615,
    0.25,
    0.41,
    0.93,
    0.41,
    0.93,
    0.125,
    0.32,
    0.1344,
    0.32,
    0.445,
    0.965,
    0.445,
    0.965,
    0.445,
    0.965,
    0.445,
    1,
    0.4115,
    0.9635,
    0.4115,
    1,
    0.1434,
    0.2865,
    0.125,
    0.2865
  ]);
  var weights_arr = Float32Array.from([]);
  var index_arr = Uint16Array.from([
    53,
    0,
    247,
    0,
    194,
    247,
    146,
    58,
    163,
    58,
    87,
    163,
    161,
    85,
    183,
    85,
    67,
    183,
    181,
    65,
    155,
    65,
    51,
    155,
    195,
    1,
    210,
    1,
    12,
    210,
    211,
    13,
    230,
    13,
    28,
    230,
    231,
    29,
    202,
    29,
    4,
    202,
    289,
    197,
    304,
    197,
    216,
    304,
    306,
    218,
    324,
    218,
    232,
    324,
    326,
    234,
    296,
    234,
    200,
    296,
    342,
    148,
    367,
    148,
    169,
    367,
    366,
    168,
    351,
    168,
    185,
    351,
    350,
    184,
    339,
    184,
    153,
    339,
    10,
    98,
    43,
    98,
    111,
    43,
    41,
    109,
    27,
    109,
    127,
    27,
    25,
    125,
    7,
    125,
    103,
    7,
    105,
    295,
    136,
    295,
    314,
    136,
    137,
    315,
    120,
    315,
    330,
    120,
    121,
    331,
    100,
    331,
    298,
    100,
    198,
    242,
    220,
    242,
    252,
    220,
    222,
    254,
    204,
    254,
    268,
    204,
    206,
    270,
    192,
    270,
    244,
    192,
    97,
    145,
    115,
    145,
    159,
    115,
    113,
    157,
    135,
    157,
    175,
    135,
    133,
    173,
    107,
    173,
    151,
    107,
    346,
    290,
    376,
    290,
    300,
    376,
    378,
    302,
    360,
    302,
    316,
    360,
    362,
    318,
    340,
    318,
    292,
    340,
    3,
    55,
    17,
    55,
    73,
    17,
    19,
    75,
    37,
    75,
    89,
    37,
    39,
    91,
    9,
    91,
    57,
    9,
    52,
    246,
    77,
    246,
    267,
    77,
    76,
    266,
    61,
    266,
    283,
    61,
    60,
    282,
    49,
    282,
    251,
    49,
    241,
    345,
    256,
    345,
    372,
    256,
    258,
    374,
    276,
    374,
    352,
    276,
    278,
    354,
    248,
    354,
    336,
    248,
    383,
    369,
    357,
    382,
    356,
    375,
    356,
    353,
    375,
    377,
    380,
    347,
    380,
    373,
    347,
    368,
    381,
    361,
    381,
    379,
    361,
    364,
    370,
    341,
    370,
    363,
    341,
    359,
    371,
    349,
    371,
    365,
    349,
    355,
    358,
    337,
    358,
    348,
    337,
    333,
    321,
    311,
    332,
    310,
    325,
    310,
    307,
    325,
    328,
    334,
    297,
    334,
    327,
    297,
    323,
    335,
    313,
    335,
    329,
    313,
    319,
    322,
    293,
    322,
    312,
    293,
    309,
    320,
    303,
    320,
    317,
    303,
    305,
    308,
    291,
    308,
    301,
    291,
    285,
    273,
    263,
    284,
    262,
    277,
    262,
    259,
    277,
    280,
    286,
    249,
    286,
    279,
    249,
    275,
    287,
    265,
    287,
    281,
    265,
    271,
    274,
    245,
    274,
    264,
    245,
    261,
    272,
    255,
    272,
    269,
    255,
    257,
    260,
    243,
    260,
    253,
    243,
    237,
    227,
    213,
    239,
    215,
    229,
    215,
    209,
    229,
    235,
    238,
    201,
    238,
    228,
    201,
    226,
    236,
    219,
    236,
    233,
    219,
    221,
    224,
    199,
    224,
    217,
    199,
    212,
    225,
    205,
    225,
    223,
    205,
    208,
    214,
    193,
    214,
    207,
    193,
    190,
    178,
    164,
    191,
    165,
    182,
    165,
    160,
    182,
    187,
    189,
    154,
    189,
    180,
    154,
    176,
    188,
    170,
    188,
    186,
    170,
    172,
    177,
    150,
    177,
    171,
    150,
    166,
    179,
    156,
    179,
    174,
    156,
    162,
    167,
    144,
    167,
    158,
    144,
    142,
    130,
    116,
    143,
    118,
    134,
    118,
    112,
    134,
    139,
    141,
    106,
    141,
    132,
    106,
    128,
    140,
    122,
    140,
    138,
    122,
    124,
    129,
    102,
    129,
    123,
    102,
    117,
    131,
    108,
    131,
    126,
    108,
    114,
    119,
    96,
    119,
    110,
    96,
    92,
    82,
    70,
    93,
    71,
    84,
    71,
    66,
    84,
    90,
    95,
    56,
    95,
    86,
    56,
    83,
    94,
    74,
    94,
    88,
    74,
    79,
    81,
    54,
    81,
    72,
    54,
    68,
    80,
    62,
    80,
    78,
    62,
    64,
    69,
    50,
    69,
    63,
    50,
    44,
    34,
    22,
    46,
    23,
    36,
    23,
    18,
    36,
    42,
    47,
    8,
    47,
    38,
    8,
    35,
    45,
    26,
    45,
    40,
    26,
    31,
    33,
    6,
    33,
    24,
    6,
    20,
    32,
    14,
    32,
    30,
    14,
    16,
    21,
    2,
    21,
    15,
    2,
    147,
    99,
    59,
    99,
    11,
    59,
    101,
    299,
    5,
    299,
    203,
    5,
    343,
    294,
    149,
    294,
    104,
    149,
    240,
    196,
    344,
    196,
    288,
    344,
    338,
    152,
    250,
    152,
    48,
    250
  ]);

  // ../meshes/cube.ts
  function mesh_cube(gl) {
    let vao = gl.createVertexArray();
    gl.bindVertexArray(vao);
    let vertex_buf = gl.createBuffer();
    gl.bindBuffer(GL_ARRAY_BUFFER, vertex_buf);
    gl.bufferData(GL_ARRAY_BUFFER, vertex_arr2, GL_STATIC_DRAW);
    gl.enableVertexAttribArray(0 /* Position */);
    gl.vertexAttribPointer(0 /* Position */, 3, GL_FLOAT, false, 0, 0);
    let normal_buf = gl.createBuffer();
    gl.bindBuffer(GL_ARRAY_BUFFER, normal_buf);
    gl.bufferData(GL_ARRAY_BUFFER, normal_arr2, GL_STATIC_DRAW);
    gl.enableVertexAttribArray(1 /* Normal */);
    gl.vertexAttribPointer(1 /* Normal */, 3, GL_FLOAT, false, 0, 0);
    let texcoord_buf = gl.createBuffer();
    gl.bindBuffer(GL_ARRAY_BUFFER, texcoord_buf);
    gl.bufferData(GL_ARRAY_BUFFER, texcoord_arr2, GL_STATIC_DRAW);
    gl.enableVertexAttribArray(2 /* TexCoord */);
    gl.vertexAttribPointer(2 /* TexCoord */, 2, GL_FLOAT, false, 0, 0);
    let weights_buf = gl.createBuffer();
    gl.bindBuffer(GL_ARRAY_BUFFER, weights_buf);
    gl.bufferData(GL_ARRAY_BUFFER, weights_arr2, GL_STATIC_DRAW);
    gl.enableVertexAttribArray(5 /* Weights */);
    gl.vertexAttribPointer(5 /* Weights */, 4, GL_FLOAT, false, 0, 0);
    let index_buf = gl.createBuffer();
    gl.bindBuffer(GL_ELEMENT_ARRAY_BUFFER, index_buf);
    gl.bufferData(GL_ELEMENT_ARRAY_BUFFER, index_arr2, GL_STATIC_DRAW);
    gl.bindVertexArray(null);
    return {
      Vao: vao,
      VertexBuffer: vertex_buf,
      VertexArray: vertex_arr2,
      NormalBuffer: normal_buf,
      NormalArray: normal_arr2,
      TexCoordBuffer: texcoord_buf,
      TexCoordArray: texcoord_arr2,
      WeightsBuffer: weights_buf,
      WeightsArray: weights_arr2,
      IndexBuffer: index_buf,
      IndexArray: index_arr2,
      IndexCount: index_arr2.length
    };
  }
  var vertex_arr2 = Float32Array.from([
    -0.5,
    -0.5,
    0.5,
    -0.5,
    -0.5,
    0.5,
    -0.5,
    -0.5,
    0.5,
    -0.5,
    0.5,
    0.5,
    -0.5,
    0.5,
    0.5,
    -0.5,
    0.5,
    0.5,
    -0.5,
    -0.5,
    -0.5,
    -0.5,
    -0.5,
    -0.5,
    -0.5,
    -0.5,
    -0.5,
    -0.5,
    0.5,
    -0.5,
    -0.5,
    0.5,
    -0.5,
    -0.5,
    0.5,
    -0.5,
    0.5,
    -0.5,
    0.5,
    0.5,
    -0.5,
    0.5,
    0.5,
    -0.5,
    0.5,
    0.5,
    0.5,
    0.5,
    0.5,
    0.5,
    0.5,
    0.5,
    0.5,
    0.5,
    0.5,
    -0.5,
    -0.5,
    0.5,
    -0.5,
    -0.5,
    0.5,
    -0.5,
    -0.5,
    0.5,
    0.5,
    -0.5,
    0.5,
    0.5,
    -0.5,
    0.5,
    0.5,
    -0.5
  ]);
  var normal_arr2 = Float32Array.from([
    -1,
    0,
    0,
    0,
    -1,
    0,
    0,
    0,
    1,
    -1,
    0,
    0,
    0,
    0,
    1,
    0,
    1,
    0,
    -1,
    0,
    0,
    0,
    -1,
    0,
    0,
    0,
    -1,
    -1,
    0,
    0,
    0,
    0,
    -1,
    0,
    1,
    0,
    0,
    -1,
    0,
    0,
    0,
    1,
    1,
    0,
    0,
    0,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    0,
    0,
    -1,
    0,
    0,
    0,
    -1,
    1,
    0,
    0,
    0,
    0,
    -1,
    0,
    1,
    0,
    1,
    0,
    0
  ]);
  var texcoord_arr2 = Float32Array.from([]);
  var weights_arr2 = Float32Array.from([]);
  var index_arr2 = Uint16Array.from([
    16,
    5,
    22,
    5,
    11,
    22,
    1,
    12,
    7,
    12,
    18,
    7,
    2,
    4,
    13,
    4,
    15,
    13,
    14,
    17,
    20,
    17,
    23,
    20,
    19,
    21,
    8,
    21,
    10,
    8,
    6,
    9,
    0,
    9,
    3,
    0
  ]);

  // ../meshes/cylinder.ts
  function mesh_cylinder(gl) {
    let vao = gl.createVertexArray();
    gl.bindVertexArray(vao);
    let vertex_buf = gl.createBuffer();
    gl.bindBuffer(GL_ARRAY_BUFFER, vertex_buf);
    gl.bufferData(GL_ARRAY_BUFFER, vertex_arr3, GL_STATIC_DRAW);
    gl.enableVertexAttribArray(0 /* Position */);
    gl.vertexAttribPointer(0 /* Position */, 3, GL_FLOAT, false, 0, 0);
    let normal_buf = gl.createBuffer();
    gl.bindBuffer(GL_ARRAY_BUFFER, normal_buf);
    gl.bufferData(GL_ARRAY_BUFFER, normal_arr3, GL_STATIC_DRAW);
    gl.enableVertexAttribArray(1 /* Normal */);
    gl.vertexAttribPointer(1 /* Normal */, 3, GL_FLOAT, false, 0, 0);
    let texcoord_buf = gl.createBuffer();
    gl.bindBuffer(GL_ARRAY_BUFFER, texcoord_buf);
    gl.bufferData(GL_ARRAY_BUFFER, texcoord_arr3, GL_STATIC_DRAW);
    gl.enableVertexAttribArray(2 /* TexCoord */);
    gl.vertexAttribPointer(2 /* TexCoord */, 2, GL_FLOAT, false, 0, 0);
    let weights_buf = gl.createBuffer();
    gl.bindBuffer(GL_ARRAY_BUFFER, weights_buf);
    gl.bufferData(GL_ARRAY_BUFFER, weights_arr3, GL_STATIC_DRAW);
    gl.enableVertexAttribArray(5 /* Weights */);
    gl.vertexAttribPointer(5 /* Weights */, 4, GL_FLOAT, false, 0, 0);
    let index_buf = gl.createBuffer();
    gl.bindBuffer(GL_ELEMENT_ARRAY_BUFFER, index_buf);
    gl.bufferData(GL_ELEMENT_ARRAY_BUFFER, index_arr3, GL_STATIC_DRAW);
    gl.bindVertexArray(null);
    return {
      Vao: vao,
      VertexBuffer: vertex_buf,
      VertexArray: vertex_arr3,
      NormalBuffer: normal_buf,
      NormalArray: normal_arr3,
      TexCoordBuffer: texcoord_buf,
      TexCoordArray: texcoord_arr3,
      WeightsBuffer: weights_buf,
      WeightsArray: weights_arr3,
      IndexBuffer: index_buf,
      IndexArray: index_arr3,
      IndexCount: index_arr3.length
    };
  }
  var vertex_arr3 = Float32Array.from([
    0,
    -0.5,
    -0.5,
    0,
    0.5,
    -0.5,
    0.3536,
    -0.5,
    -0.3536,
    0.3536,
    0.5,
    -0.3536,
    0.5,
    -0.5,
    0,
    0.5,
    0.5,
    0,
    0.3536,
    -0.5,
    0.3536,
    0.3536,
    0.5,
    0.3536,
    -0,
    -0.5,
    0.5,
    -0,
    0.5,
    0.5,
    -0.3536,
    -0.5,
    0.3536,
    -0.3536,
    0.5,
    0.3536,
    -0.5,
    -0.5,
    -0,
    -0.5,
    0.5,
    -0,
    -0.3536,
    -0.5,
    -0.3536,
    -0.3536,
    0.5,
    -0.3536
  ]);
  var normal_arr3 = Float32Array.from([
    0,
    -0.6302,
    -0.7764,
    0,
    0.6302,
    -0.7764,
    0.549,
    -0.6302,
    -0.549,
    0.549,
    0.6302,
    -0.549,
    0.7764,
    -0.6302,
    0,
    0.7764,
    0.6302,
    0,
    0.549,
    -0.6302,
    0.549,
    0.549,
    0.6302,
    0.549,
    0,
    -0.6302,
    0.7764,
    0,
    0.6302,
    0.7764,
    -0.549,
    -0.6302,
    0.549,
    -0.549,
    0.6302,
    0.549,
    -0.7764,
    -0.6302,
    0,
    -0.7764,
    0.6302,
    0,
    -0.549,
    -0.6302,
    -0.549,
    -0.549,
    0.6302,
    -0.549
  ]);
  var texcoord_arr3 = Float32Array.from([]);
  var weights_arr3 = Float32Array.from([]);
  var index_arr3 = Uint16Array.from([
    14,
    10,
    6,
    6,
    2,
    14,
    14,
    12,
    10,
    10,
    8,
    6,
    6,
    4,
    2,
    2,
    0,
    14,
    0,
    1,
    14,
    1,
    15,
    14,
    14,
    15,
    12,
    15,
    13,
    12,
    5,
    9,
    13,
    13,
    1,
    5,
    5,
    7,
    9,
    9,
    11,
    13,
    13,
    15,
    1,
    1,
    3,
    5,
    12,
    13,
    10,
    13,
    11,
    10,
    10,
    11,
    8,
    11,
    9,
    8,
    8,
    9,
    6,
    9,
    7,
    6,
    6,
    7,
    4,
    7,
    5,
    4,
    4,
    5,
    2,
    5,
    3,
    2,
    2,
    3,
    0,
    3,
    1,
    0
  ]);

  // ../meshes/hand.ts
  function mesh_hand(gl) {
    let vao = gl.createVertexArray();
    gl.bindVertexArray(vao);
    let vertex_buf = gl.createBuffer();
    gl.bindBuffer(GL_ARRAY_BUFFER, vertex_buf);
    gl.bufferData(GL_ARRAY_BUFFER, vertex_arr4, GL_STATIC_DRAW);
    gl.enableVertexAttribArray(0 /* Position */);
    gl.vertexAttribPointer(0 /* Position */, 3, GL_FLOAT, false, 0, 0);
    let normal_buf = gl.createBuffer();
    gl.bindBuffer(GL_ARRAY_BUFFER, normal_buf);
    gl.bufferData(GL_ARRAY_BUFFER, normal_arr4, GL_STATIC_DRAW);
    gl.enableVertexAttribArray(1 /* Normal */);
    gl.vertexAttribPointer(1 /* Normal */, 3, GL_FLOAT, false, 0, 0);
    let texcoord_buf = gl.createBuffer();
    gl.bindBuffer(GL_ARRAY_BUFFER, texcoord_buf);
    gl.bufferData(GL_ARRAY_BUFFER, texcoord_arr4, GL_STATIC_DRAW);
    gl.enableVertexAttribArray(2 /* TexCoord */);
    gl.vertexAttribPointer(2 /* TexCoord */, 2, GL_FLOAT, false, 0, 0);
    let weights_buf = gl.createBuffer();
    gl.bindBuffer(GL_ARRAY_BUFFER, weights_buf);
    gl.bufferData(GL_ARRAY_BUFFER, weights_arr4, GL_STATIC_DRAW);
    gl.enableVertexAttribArray(5 /* Weights */);
    gl.vertexAttribPointer(5 /* Weights */, 4, GL_FLOAT, false, 0, 0);
    let index_buf = gl.createBuffer();
    gl.bindBuffer(GL_ELEMENT_ARRAY_BUFFER, index_buf);
    gl.bufferData(GL_ELEMENT_ARRAY_BUFFER, index_arr4, GL_STATIC_DRAW);
    gl.bindVertexArray(null);
    return {
      Vao: vao,
      VertexBuffer: vertex_buf,
      VertexArray: vertex_arr4,
      NormalBuffer: normal_buf,
      NormalArray: normal_arr4,
      TexCoordBuffer: texcoord_buf,
      TexCoordArray: texcoord_arr4,
      WeightsBuffer: weights_buf,
      WeightsArray: weights_arr4,
      IndexBuffer: index_buf,
      IndexArray: index_arr4,
      IndexCount: index_arr4.length
    };
  }
  var vertex_arr4 = Float32Array.from([
    -0.0347,
    -26e-4,
    -0.0493,
    -0.0347,
    -26e-4,
    -0.0493,
    -0.0347,
    -26e-4,
    -0.0493,
    -0.0347,
    -26e-4,
    -0.0493,
    -0.0329,
    8e-3,
    -0.045,
    -0.0329,
    8e-3,
    -0.045,
    -0.0329,
    8e-3,
    -0.045,
    -0.0329,
    8e-3,
    -0.045,
    -0.0329,
    8e-3,
    -0.045,
    -0.0329,
    8e-3,
    -0.045,
    -0.0329,
    8e-3,
    -0.045,
    -0.0423,
    59e-4,
    -0.0512,
    -0.0423,
    59e-4,
    -0.0512,
    -0.0423,
    59e-4,
    -0.0512,
    -0.0423,
    59e-4,
    -0.0512,
    -0.0336,
    18e-4,
    -0.0452,
    -0.0336,
    18e-4,
    -0.0452,
    -0.0336,
    18e-4,
    -0.0452,
    -0.0336,
    18e-4,
    -0.0452,
    -0.0336,
    18e-4,
    -0.0452,
    -0.0389,
    22e-4,
    -0.0465,
    -0.0389,
    22e-4,
    -0.0465,
    -0.0389,
    22e-4,
    -0.0465,
    -0.0389,
    22e-4,
    -0.0465,
    -0.0389,
    22e-4,
    -0.0465,
    -0.0389,
    22e-4,
    -0.0465,
    -0.0388,
    77e-4,
    -0.0465,
    -0.0388,
    77e-4,
    -0.0465,
    -0.0388,
    77e-4,
    -0.0465,
    -0.0388,
    77e-4,
    -0.0465,
    -0.0388,
    77e-4,
    -0.0465,
    -0.0388,
    77e-4,
    -0.0465,
    -0.0325,
    0.0147,
    -0.0479,
    -0.0325,
    0.0147,
    -0.0479,
    -0.0325,
    0.0147,
    -0.0479,
    -0.0325,
    0.0147,
    -0.0479,
    -0.0325,
    0.0147,
    -0.0479,
    -0.0325,
    0.0147,
    -0.0479,
    -0.0335,
    0.0192,
    -0.0584,
    -0.0335,
    0.0192,
    -0.0584,
    -0.0335,
    0.0192,
    -0.0584,
    -0.0335,
    0.0192,
    -0.0584,
    -0.0335,
    0.0192,
    -0.0584,
    -0.042,
    0.0127,
    -0.0541,
    -0.042,
    0.0127,
    -0.0541,
    -0.042,
    0.0127,
    -0.0541,
    -0.042,
    0.0127,
    -0.0541,
    -0.042,
    0.0127,
    -0.0541,
    -0.0327,
    0.019,
    -0.0523,
    -0.0327,
    0.019,
    -0.0523,
    -0.0327,
    0.019,
    -0.0523,
    -0.0327,
    0.019,
    -0.0523,
    -0.0327,
    0.019,
    -0.0523,
    -0.0378,
    0.0174,
    -0.0513,
    -0.0378,
    0.0174,
    -0.0513,
    -0.0378,
    0.0174,
    -0.0513,
    -0.0378,
    0.0174,
    -0.0513,
    -0.0378,
    0.0174,
    -0.0513,
    -0.0378,
    0.0174,
    -0.0513,
    -0.0392,
    0.0175,
    -0.0566,
    -0.0392,
    0.0175,
    -0.0566,
    -0.0392,
    0.0175,
    -0.0566,
    -0.0392,
    0.0175,
    -0.0566,
    -0.0422,
    -0.0179,
    -0.0869,
    -0.0422,
    -0.0179,
    -0.0869,
    -0.0422,
    -0.0179,
    -0.0869,
    -0.0422,
    -0.0179,
    -0.0869,
    -0.0422,
    -0.0179,
    -0.0869,
    -0.0498,
    -95e-4,
    -0.0889,
    -0.0498,
    -95e-4,
    -0.0889,
    -0.0498,
    -95e-4,
    -0.0889,
    -0.0498,
    -95e-4,
    -0.0889,
    -0.0498,
    -95e-4,
    -0.0889,
    -0.0433,
    -0.0135,
    -0.0975,
    -0.0433,
    -0.0135,
    -0.0975,
    -0.0433,
    -0.0135,
    -0.0975,
    -0.0433,
    -0.0135,
    -0.0975,
    -0.0433,
    -0.0135,
    -0.0975,
    -0.0476,
    -0.0149,
    -0.0871,
    -0.0476,
    -0.0149,
    -0.0871,
    -0.0476,
    -0.0149,
    -0.0871,
    -0.0476,
    -0.0149,
    -0.0871,
    -0.0478,
    -0.0149,
    -0.0928,
    -0.0478,
    -0.0149,
    -0.0928,
    -0.0478,
    -0.0149,
    -0.0928,
    -0.0478,
    -0.0149,
    -0.0928,
    -0.0478,
    -0.0149,
    -0.0928,
    -0.0478,
    -0.0149,
    -0.0928,
    -0.0478,
    -0.0149,
    -0.0928,
    -0.0431,
    -0.0177,
    -0.093,
    -0.0431,
    -0.0177,
    -0.093,
    -0.0431,
    -0.0177,
    -0.093,
    -0.0431,
    -0.0177,
    -0.093,
    -0.0431,
    -0.0177,
    -0.093,
    -0.0431,
    -0.0177,
    -0.093,
    -0.041,
    39e-4,
    -0.0961,
    -0.041,
    39e-4,
    -0.0961,
    -0.041,
    39e-4,
    -0.0961,
    -0.041,
    39e-4,
    -0.0961,
    -0.0429,
    -67e-4,
    -0.1004,
    -0.0429,
    -67e-4,
    -0.1004,
    -0.0429,
    -67e-4,
    -0.1004,
    -0.0429,
    -67e-4,
    -0.1004,
    -0.0429,
    -67e-4,
    -0.1004,
    -0.0429,
    -67e-4,
    -0.1004,
    -0.0494,
    -27e-4,
    -0.0917,
    -0.0494,
    -27e-4,
    -0.0917,
    -0.0494,
    -27e-4,
    -0.0917,
    -0.0494,
    -27e-4,
    -0.0917,
    -0.0494,
    -27e-4,
    -0.0917,
    -0.0454,
    -2e-4,
    -0.099,
    -0.0454,
    -2e-4,
    -0.099,
    -0.0454,
    -2e-4,
    -0.099,
    -0.0454,
    -2e-4,
    -0.099,
    -0.0454,
    -2e-4,
    -0.099,
    -0.0454,
    -2e-4,
    -0.099,
    -0.0454,
    -2e-4,
    -0.099,
    -0.048,
    -51e-4,
    -0.0972,
    -0.048,
    -51e-4,
    -0.0972,
    -0.048,
    -51e-4,
    -0.0972,
    -0.048,
    -51e-4,
    -0.0972,
    -0.048,
    -51e-4,
    -0.0972,
    -0.0467,
    22e-4,
    -0.0943,
    -0.0467,
    22e-4,
    -0.0943,
    -0.0467,
    22e-4,
    -0.0943,
    -0.0467,
    22e-4,
    -0.0943,
    -0.024,
    -39e-4,
    -0.0509,
    -0.024,
    -39e-4,
    -0.0509,
    -0.024,
    -39e-4,
    -0.0509,
    -0.024,
    -39e-4,
    -0.0509,
    -0.024,
    -39e-4,
    -0.0509,
    -0.0156,
    27e-4,
    -0.0553,
    -0.0156,
    27e-4,
    -0.0553,
    -0.0156,
    27e-4,
    -0.0553,
    -0.0156,
    27e-4,
    -0.0553,
    -0.0156,
    27e-4,
    -0.0553,
    -0.0221,
    67e-4,
    -0.0466,
    -0.0221,
    67e-4,
    -0.0466,
    -0.0221,
    67e-4,
    -0.0466,
    -0.0221,
    67e-4,
    -0.0466,
    -0.0221,
    67e-4,
    -0.0466,
    -0.0184,
    -22e-4,
    -0.0527,
    -0.0184,
    -22e-4,
    -0.0527,
    -0.0184,
    -22e-4,
    -0.0527,
    -0.0184,
    -22e-4,
    -0.0527,
    -0.0196,
    6e-4,
    -0.0478,
    -0.0196,
    6e-4,
    -0.0478,
    -0.0196,
    6e-4,
    -0.0478,
    -0.0196,
    6e-4,
    -0.0478,
    -0.0196,
    6e-4,
    -0.0478,
    -0.0196,
    6e-4,
    -0.0478,
    -0.0196,
    6e-4,
    -0.0478,
    -0.0171,
    51e-4,
    -0.0498,
    -0.0171,
    51e-4,
    -0.0498,
    -0.0171,
    51e-4,
    -0.0498,
    -0.0171,
    51e-4,
    -0.0498,
    -0.0171,
    51e-4,
    -0.0498,
    -0.0228,
    0.018,
    -0.0601,
    -0.0228,
    0.018,
    -0.0601,
    -0.0228,
    0.018,
    -0.0601,
    -0.0228,
    0.018,
    -0.0601,
    -0.0228,
    0.018,
    -0.0601,
    -0.0228,
    0.018,
    -0.0601,
    -0.0218,
    0.0135,
    -0.0495,
    -0.0218,
    0.0135,
    -0.0495,
    -0.0218,
    0.0135,
    -0.0495,
    -0.0218,
    0.0135,
    -0.0495,
    -0.0218,
    0.0135,
    -0.0495,
    -0.0152,
    95e-4,
    -0.0581,
    -0.0152,
    95e-4,
    -0.0581,
    -0.0152,
    95e-4,
    -0.0581,
    -0.0152,
    95e-4,
    -0.0581,
    -0.0152,
    95e-4,
    -0.0581,
    -0.0219,
    0.0177,
    -0.054,
    -0.0219,
    0.0177,
    -0.054,
    -0.0219,
    0.0177,
    -0.054,
    -0.0219,
    0.0177,
    -0.054,
    -0.0219,
    0.0177,
    -0.054,
    -0.0172,
    0.0149,
    -0.0541,
    -0.0172,
    0.0149,
    -0.0541,
    -0.0172,
    0.0149,
    -0.0541,
    -0.0172,
    0.0149,
    -0.0541,
    -0.0172,
    0.0149,
    -0.0541,
    -0.0172,
    0.0149,
    -0.0541,
    -0.0172,
    0.0149,
    -0.0541,
    -0.0174,
    0.015,
    -0.0599,
    -0.0174,
    0.015,
    -0.0599,
    -0.0174,
    0.015,
    -0.0599,
    -0.0174,
    0.015,
    -0.0599,
    -0.0315,
    -0.0192,
    -0.0885,
    -0.0315,
    -0.0192,
    -0.0885,
    -0.0315,
    -0.0192,
    -0.0885,
    -0.0315,
    -0.0192,
    -0.0885,
    -0.0315,
    -0.0192,
    -0.0885,
    -0.0325,
    -0.0147,
    -0.0991,
    -0.0325,
    -0.0147,
    -0.0991,
    -0.0325,
    -0.0147,
    -0.0991,
    -0.0325,
    -0.0147,
    -0.0991,
    -0.0325,
    -0.0147,
    -0.0991,
    -0.0231,
    -0.0126,
    -0.0929,
    -0.0231,
    -0.0126,
    -0.0929,
    -0.0231,
    -0.0126,
    -0.0929,
    -0.0231,
    -0.0126,
    -0.0929,
    -0.0231,
    -0.0126,
    -0.0929,
    -0.0288,
    -0.0186,
    -0.0948,
    -0.0288,
    -0.0186,
    -0.0948,
    -0.0288,
    -0.0186,
    -0.0948,
    -0.0288,
    -0.0186,
    -0.0948,
    -0.0288,
    -0.0186,
    -0.0948,
    -0.0288,
    -0.0186,
    -0.0948,
    -0.0266,
    -0.0144,
    -0.0976,
    -0.0266,
    -0.0144,
    -0.0976,
    -0.0266,
    -0.0144,
    -0.0976,
    -0.0266,
    -0.0144,
    -0.0976,
    -0.0266,
    -0.0144,
    -0.0976,
    -0.0266,
    -0.0144,
    -0.0976,
    -0.0258,
    -0.0175,
    -0.0904,
    -0.0258,
    -0.0175,
    -0.0904,
    -0.0258,
    -0.0175,
    -0.0904,
    -0.0258,
    -0.0175,
    -0.0904,
    -0.0303,
    26e-4,
    -0.0977,
    -0.0303,
    26e-4,
    -0.0977,
    -0.0303,
    26e-4,
    -0.0977,
    -0.0303,
    26e-4,
    -0.0977,
    -0.0303,
    26e-4,
    -0.0977,
    -0.0303,
    26e-4,
    -0.0977,
    -0.0227,
    -59e-4,
    -0.0957,
    -0.0227,
    -59e-4,
    -0.0957,
    -0.0227,
    -59e-4,
    -0.0957,
    -0.0227,
    -59e-4,
    -0.0957,
    -0.0227,
    -59e-4,
    -0.0957,
    -0.0322,
    -79e-4,
    -0.102,
    -0.0322,
    -79e-4,
    -0.102,
    -0.0322,
    -79e-4,
    -0.102,
    -0.0322,
    -79e-4,
    -0.102,
    -0.0322,
    -79e-4,
    -0.102,
    -0.0322,
    -79e-4,
    -0.102,
    -0.0249,
    -4e-4,
    -0.0975,
    -0.0249,
    -4e-4,
    -0.0975,
    -0.0249,
    -4e-4,
    -0.0975,
    -0.0249,
    -4e-4,
    -0.0975,
    -0.0265,
    -41e-4,
    -0.1012,
    -0.0265,
    -41e-4,
    -0.1012,
    -0.0265,
    -41e-4,
    -0.1012,
    -0.0265,
    -41e-4,
    -0.1012,
    -0.0265,
    -41e-4,
    -0.1012,
    -0.0265,
    -41e-4,
    -0.1012,
    -0.0314,
    -18e-4,
    -0.1018,
    -0.0314,
    -18e-4,
    -0.1018,
    -0.0314,
    -18e-4,
    -0.1018,
    -0.0314,
    -18e-4,
    -0.1018,
    -0.0314,
    -18e-4,
    -0.1018,
    -0.0203,
    -37e-4,
    0.0888,
    -0.0203,
    -37e-4,
    0.0888,
    -0.0203,
    -37e-4,
    0.0888,
    -0.0203,
    -37e-4,
    0.0888,
    -0.018,
    32e-4,
    0.0977,
    -0.018,
    32e-4,
    0.0977,
    -0.018,
    32e-4,
    0.0977,
    -0.018,
    32e-4,
    0.0977,
    -0.0227,
    -6e-4,
    0.0944,
    -0.0227,
    -6e-4,
    0.0944,
    -0.0227,
    -6e-4,
    0.0944,
    -0.0227,
    -6e-4,
    0.0944,
    -0.0227,
    -6e-4,
    0.0944,
    -0.0227,
    -6e-4,
    0.0944,
    -0.0253,
    -1e-4,
    0.0895,
    -0.0253,
    -1e-4,
    0.0895,
    -0.0253,
    -1e-4,
    0.0895,
    -0.0253,
    -1e-4,
    0.0895,
    -0.0169,
    0.0125,
    0.0907,
    -0.0169,
    0.0125,
    0.0907,
    -0.0169,
    0.0125,
    0.0907,
    -0.0169,
    0.0125,
    0.0907,
    -0.0267,
    6e-3,
    0.0903,
    -0.0267,
    6e-3,
    0.0903,
    -0.0267,
    6e-3,
    0.0903,
    -0.0267,
    6e-3,
    0.0903,
    -0.0267,
    6e-3,
    0.0903,
    -0.0267,
    6e-3,
    0.0903,
    -0.0204,
    92e-4,
    0.0958,
    -0.0204,
    92e-4,
    0.0958,
    -0.0204,
    92e-4,
    0.0958,
    -0.0204,
    92e-4,
    0.0958,
    -0.0204,
    92e-4,
    0.0958,
    -0.0204,
    92e-4,
    0.0958,
    -0.023,
    0.0111,
    0.0908,
    -0.023,
    0.0111,
    0.0908,
    -0.023,
    0.0111,
    0.0908,
    -0.023,
    0.0111,
    0.0908,
    -0.0236,
    47e-4,
    0.0957,
    -0.0236,
    47e-4,
    0.0957,
    -0.0236,
    47e-4,
    0.0957,
    -0.0236,
    47e-4,
    0.0957,
    -0.0295,
    75e-4,
    -22e-4,
    -0.0295,
    75e-4,
    -22e-4,
    -0.0295,
    75e-4,
    -22e-4,
    -0.0295,
    75e-4,
    -22e-4,
    -0.0359,
    0.019,
    -5e-4,
    -0.0359,
    0.019,
    -5e-4,
    -0.0359,
    0.019,
    -5e-4,
    -0.0359,
    0.019,
    -5e-4,
    -0.0344,
    0.012,
    -49e-4,
    -0.0344,
    0.012,
    -49e-4,
    -0.0344,
    0.012,
    -49e-4,
    -0.0344,
    0.012,
    -49e-4,
    -0.0344,
    0.012,
    -49e-4,
    -0.0344,
    0.012,
    -49e-4,
    -0.0339,
    0.0191,
    -65e-4,
    -0.0339,
    0.0191,
    -65e-4,
    -0.0339,
    0.0191,
    -65e-4,
    -0.0339,
    0.0191,
    -65e-4,
    -0.0296,
    0.0107,
    -75e-4,
    -0.0296,
    0.0107,
    -75e-4,
    -0.0296,
    0.0107,
    -75e-4,
    -0.0296,
    0.0107,
    -75e-4,
    -0.0257,
    0.027,
    -2e-4,
    -0.0257,
    0.027,
    -2e-4,
    -0.0257,
    0.027,
    -2e-4,
    -0.0257,
    0.027,
    -2e-4,
    -0.0282,
    0.0183,
    -97e-4,
    -0.0282,
    0.0183,
    -97e-4,
    -0.0282,
    0.0183,
    -97e-4,
    -0.0282,
    0.0183,
    -97e-4,
    -0.0282,
    0.0183,
    -97e-4,
    -0.0282,
    0.0183,
    -97e-4,
    -0.0267,
    0.0254,
    -59e-4,
    -0.0267,
    0.0254,
    -59e-4,
    -0.0267,
    0.0254,
    -59e-4,
    -0.0267,
    0.0254,
    -59e-4,
    -0.0316,
    0.0254,
    -37e-4,
    -0.0316,
    0.0254,
    -37e-4,
    -0.0316,
    0.0254,
    -37e-4,
    -0.0316,
    0.0254,
    -37e-4,
    -0.0316,
    0.0254,
    -37e-4,
    -0.0316,
    0.0254,
    -37e-4,
    0.0579,
    -0.0189,
    0.0832,
    0.0579,
    -0.0189,
    0.0832,
    0.0579,
    -0.0189,
    0.0832,
    0.0579,
    -0.0189,
    0.0832,
    0.0677,
    -0.0125,
    0.0836,
    0.0677,
    -0.0125,
    0.0836,
    0.0677,
    -0.0125,
    0.0836,
    0.0677,
    -0.0125,
    0.0836,
    0.0677,
    -0.0125,
    0.0836,
    0.0634,
    -0.0174,
    0.0865,
    0.0634,
    -0.0174,
    0.0865,
    0.0634,
    -0.0174,
    0.0865,
    0.0634,
    -0.0174,
    0.0865,
    0.0634,
    -0.0174,
    0.0865,
    0.0634,
    -0.0174,
    0.0865,
    0.065,
    -0.0127,
    0.0894,
    0.065,
    -0.0127,
    0.0894,
    0.065,
    -0.0127,
    0.0894,
    0.065,
    -0.0127,
    0.0894,
    0.0583,
    -0.017,
    0.0891,
    0.0583,
    -0.017,
    0.0891,
    0.0583,
    -0.017,
    0.0891,
    0.0583,
    -0.017,
    0.0891,
    0.0613,
    -28e-4,
    0.0852,
    0.0613,
    -28e-4,
    0.0852,
    0.0613,
    -28e-4,
    0.0852,
    0.0613,
    -28e-4,
    0.0852,
    0.0592,
    -0.0118,
    0.0924,
    0.0592,
    -0.0118,
    0.0924,
    0.0592,
    -0.0118,
    0.0924,
    0.0592,
    -0.0118,
    0.0924,
    0.0592,
    -0.0118,
    0.0924,
    0.0639,
    -69e-4,
    0.0895,
    0.0639,
    -69e-4,
    0.0895,
    0.0639,
    -69e-4,
    0.0895,
    0.0639,
    -69e-4,
    0.0895,
    0.0639,
    -69e-4,
    0.0895,
    0.0639,
    -69e-4,
    0.0895,
    0.0663,
    -63e-4,
    0.0845,
    0.0663,
    -63e-4,
    0.0845,
    0.0663,
    -63e-4,
    0.0845,
    0.0663,
    -63e-4,
    0.0845,
    0.0598,
    -91e-4,
    -87e-4,
    0.0598,
    -91e-4,
    -87e-4,
    0.0598,
    -91e-4,
    -87e-4,
    0.0598,
    -91e-4,
    -87e-4,
    0.062,
    17e-4,
    -0.0161,
    0.062,
    17e-4,
    -0.0161,
    0.062,
    17e-4,
    -0.0161,
    0.062,
    17e-4,
    -0.0161,
    0.062,
    17e-4,
    -0.0161,
    0.062,
    17e-4,
    -0.0161,
    0.0604,
    -61e-4,
    -0.014,
    0.0604,
    -61e-4,
    -0.014,
    0.0604,
    -61e-4,
    -0.014,
    0.0604,
    -61e-4,
    -0.014,
    0.0657,
    -66e-4,
    -0.0121,
    0.0657,
    -66e-4,
    -0.0121,
    0.0657,
    -66e-4,
    -0.0121,
    0.0657,
    -66e-4,
    -0.0121,
    0.0657,
    -66e-4,
    -0.0121,
    0.0657,
    -66e-4,
    -0.0121,
    0.0676,
    2e-4,
    -0.0139,
    0.0676,
    2e-4,
    -0.0139,
    0.0676,
    2e-4,
    -0.0139,
    0.0676,
    2e-4,
    -0.0139,
    0.0636,
    0.0103,
    -66e-4,
    0.0636,
    0.0103,
    -66e-4,
    0.0636,
    0.0103,
    -66e-4,
    0.0636,
    0.0103,
    -66e-4,
    0.0701,
    -9e-4,
    -82e-4,
    0.0701,
    -9e-4,
    -82e-4,
    0.0701,
    -9e-4,
    -82e-4,
    0.0701,
    -9e-4,
    -82e-4,
    0.068,
    68e-4,
    -0.0109,
    0.068,
    68e-4,
    -0.0109,
    0.068,
    68e-4,
    -0.0109,
    0.068,
    68e-4,
    -0.0109,
    0.068,
    68e-4,
    -0.0109,
    0.068,
    68e-4,
    -0.0109,
    0.0633,
    86e-4,
    -0.0125,
    0.0633,
    86e-4,
    -0.0125,
    0.0633,
    86e-4,
    -0.0125,
    0.0633,
    86e-4,
    -0.0125,
    -0.0274,
    29e-4,
    -4e-3,
    -0.0274,
    29e-4,
    -4e-3,
    -0.0274,
    29e-4,
    -4e-3,
    -0.0274,
    29e-4,
    -4e-3,
    -0.0274,
    29e-4,
    -4e-3,
    -0.0255,
    0.0117,
    32e-4,
    -0.0255,
    0.0117,
    32e-4,
    -0.0255,
    0.0117,
    32e-4,
    -0.0255,
    0.0117,
    32e-4,
    -0.0255,
    0.0117,
    32e-4,
    -0.0347,
    0.0118,
    -38e-4,
    -0.0347,
    0.0118,
    -38e-4,
    -0.0347,
    0.0118,
    -38e-4,
    -0.0347,
    0.0118,
    -38e-4,
    -0.0347,
    0.0118,
    -38e-4,
    -0.0263,
    59e-4,
    13e-4,
    -0.0263,
    59e-4,
    13e-4,
    -0.0263,
    59e-4,
    13e-4,
    -0.0263,
    59e-4,
    13e-4,
    -0.0263,
    59e-4,
    13e-4,
    -0.0263,
    59e-4,
    13e-4,
    -0.0311,
    86e-4,
    14e-4,
    -0.0311,
    86e-4,
    14e-4,
    -0.0311,
    86e-4,
    14e-4,
    -0.0311,
    86e-4,
    14e-4,
    -0.0311,
    86e-4,
    14e-4,
    -0.0311,
    86e-4,
    14e-4,
    -0.0311,
    86e-4,
    14e-4,
    -0.0327,
    6e-3,
    -35e-4,
    -0.0327,
    6e-3,
    -35e-4,
    -0.0327,
    6e-3,
    -35e-4,
    -0.0327,
    6e-3,
    -35e-4,
    -0.0249,
    0.018,
    25e-4,
    -0.0249,
    0.018,
    25e-4,
    -0.0249,
    0.018,
    25e-4,
    -0.0249,
    0.018,
    25e-4,
    -0.0249,
    0.018,
    25e-4,
    -0.0249,
    0.018,
    25e-4,
    -0.0253,
    0.0253,
    -64e-4,
    -0.0253,
    0.0253,
    -64e-4,
    -0.0253,
    0.0253,
    -64e-4,
    -0.0253,
    0.0253,
    -64e-4,
    -0.0253,
    0.0253,
    -64e-4,
    -0.0341,
    0.0181,
    -45e-4,
    -0.0341,
    0.0181,
    -45e-4,
    -0.0341,
    0.0181,
    -45e-4,
    -0.0341,
    0.0181,
    -45e-4,
    -0.0341,
    0.0181,
    -45e-4,
    -0.0284,
    0.023,
    -6e-4,
    -0.0284,
    0.023,
    -6e-4,
    -0.0284,
    0.023,
    -6e-4,
    -0.0284,
    0.023,
    -6e-4,
    -0.0284,
    0.023,
    -6e-4,
    -0.0284,
    0.023,
    -6e-4,
    -0.0311,
    0.0234,
    -54e-4,
    -0.0311,
    0.0234,
    -54e-4,
    -0.0311,
    0.0234,
    -54e-4,
    -0.0311,
    0.0234,
    -54e-4,
    -0.0308,
    0.0183,
    7e-4,
    -0.0308,
    0.0183,
    7e-4,
    -0.0308,
    0.0183,
    7e-4,
    -0.0308,
    0.0183,
    7e-4,
    -0.0308,
    0.0183,
    7e-4,
    -0.0339,
    -14e-4,
    -0.05,
    -0.0339,
    -14e-4,
    -0.05,
    -0.0339,
    -14e-4,
    -0.05,
    -0.0339,
    -14e-4,
    -0.05,
    -0.0412,
    75e-4,
    -0.0498,
    -0.0412,
    75e-4,
    -0.0498,
    -0.0412,
    75e-4,
    -0.0498,
    -0.0412,
    75e-4,
    -0.0498,
    -0.039,
    16e-4,
    -0.053,
    -0.039,
    16e-4,
    -0.053,
    -0.039,
    16e-4,
    -0.053,
    -0.039,
    16e-4,
    -0.053,
    -0.039,
    16e-4,
    -0.053,
    -0.039,
    16e-4,
    -0.053,
    -0.0396,
    99e-4,
    -0.0563,
    -0.0396,
    99e-4,
    -0.0563,
    -0.0396,
    99e-4,
    -0.0563,
    -0.0396,
    99e-4,
    -0.0563,
    -0.0396,
    99e-4,
    -0.0563,
    -0.0344,
    6e-4,
    -0.0558,
    -0.0344,
    6e-4,
    -0.0558,
    -0.0344,
    6e-4,
    -0.0558,
    -0.0344,
    6e-4,
    -0.0558,
    -0.0344,
    6e-4,
    -0.0558,
    -0.0344,
    6e-4,
    -0.0558,
    -0.0319,
    0.021,
    -0.0524,
    -0.0319,
    0.021,
    -0.0524,
    -0.0319,
    0.021,
    -0.0524,
    -0.0319,
    0.021,
    -0.0524,
    -0.0343,
    88e-4,
    -0.0598,
    -0.0343,
    88e-4,
    -0.0598,
    -0.0343,
    88e-4,
    -0.0598,
    -0.0343,
    88e-4,
    -0.0598,
    -0.0343,
    88e-4,
    -0.0598,
    -0.0343,
    88e-4,
    -0.0598,
    -0.0343,
    88e-4,
    -0.0598,
    -0.0406,
    0.0138,
    -0.0505,
    -0.0406,
    0.0138,
    -0.0505,
    -0.0406,
    0.0138,
    -0.0505,
    -0.0406,
    0.0138,
    -0.0505,
    -0.0329,
    0.018,
    -0.0577,
    -0.0329,
    0.018,
    -0.0577,
    -0.0329,
    0.018,
    -0.0577,
    -0.0329,
    0.018,
    -0.0577,
    -0.0329,
    0.018,
    -0.0577,
    -0.0329,
    0.018,
    -0.0577,
    -0.0378,
    0.0181,
    -0.0547,
    -0.0378,
    0.0181,
    -0.0547,
    -0.0378,
    0.0181,
    -0.0547,
    -0.0378,
    0.0181,
    -0.0547,
    -0.0378,
    0.0181,
    -0.0547,
    -0.0378,
    0.0181,
    -0.0547,
    -0.0178,
    19e-4,
    -53e-4,
    -0.0178,
    19e-4,
    -53e-4,
    -0.0178,
    19e-4,
    -53e-4,
    -0.0178,
    19e-4,
    -53e-4,
    -0.0178,
    19e-4,
    -53e-4,
    -9e-3,
    91e-4,
    -72e-4,
    -9e-3,
    91e-4,
    -72e-4,
    -9e-3,
    91e-4,
    -72e-4,
    -9e-3,
    91e-4,
    -72e-4,
    -9e-3,
    91e-4,
    -72e-4,
    -0.0159,
    0.0107,
    19e-4,
    -0.0159,
    0.0107,
    19e-4,
    -0.0159,
    0.0107,
    19e-4,
    -0.0159,
    0.0107,
    19e-4,
    -0.0159,
    0.0107,
    19e-4,
    -0.0159,
    0.0107,
    19e-4,
    -0.012,
    38e-4,
    -63e-4,
    -0.012,
    38e-4,
    -63e-4,
    -0.012,
    38e-4,
    -63e-4,
    -0.012,
    38e-4,
    -63e-4,
    -0.0133,
    51e-4,
    -11e-4,
    -0.0133,
    51e-4,
    -11e-4,
    -0.0133,
    51e-4,
    -11e-4,
    -0.0133,
    51e-4,
    -11e-4,
    -0.0133,
    51e-4,
    -11e-4,
    -0.0133,
    51e-4,
    -11e-4,
    -0.0107,
    99e-4,
    -13e-4,
    -0.0107,
    99e-4,
    -13e-4,
    -0.0107,
    99e-4,
    -13e-4,
    -0.0107,
    99e-4,
    -13e-4,
    -0.0107,
    99e-4,
    -13e-4,
    -0.0157,
    0.0243,
    -77e-4,
    -0.0157,
    0.0243,
    -77e-4,
    -0.0157,
    0.0243,
    -77e-4,
    -0.0157,
    0.0243,
    -77e-4,
    -0.0157,
    0.0243,
    -77e-4,
    -0.0153,
    0.017,
    13e-4,
    -0.0153,
    0.017,
    13e-4,
    -0.0153,
    0.017,
    13e-4,
    -0.0153,
    0.017,
    13e-4,
    -0.0153,
    0.017,
    13e-4,
    -84e-4,
    0.0154,
    -79e-4,
    -84e-4,
    0.0154,
    -79e-4,
    -84e-4,
    0.0154,
    -79e-4,
    -84e-4,
    0.0154,
    -79e-4,
    -84e-4,
    0.0154,
    -79e-4,
    -0.0152,
    0.0223,
    -19e-4,
    -0.0152,
    0.0223,
    -19e-4,
    -0.0152,
    0.0223,
    -19e-4,
    -0.0152,
    0.0223,
    -19e-4,
    -0.0152,
    0.0223,
    -19e-4,
    -0.0152,
    0.0223,
    -19e-4,
    -0.0105,
    0.0195,
    -26e-4,
    -0.0105,
    0.0195,
    -26e-4,
    -0.0105,
    0.0195,
    -26e-4,
    -0.0105,
    0.0195,
    -26e-4,
    -0.0105,
    0.0195,
    -26e-4,
    -0.0105,
    0.0195,
    -26e-4,
    -0.0105,
    0.0195,
    -26e-4,
    -0.0104,
    0.0212,
    -81e-4,
    -0.0104,
    0.0212,
    -81e-4,
    -0.0104,
    0.0212,
    -81e-4,
    -0.0104,
    0.0212,
    -81e-4,
    -0.0243,
    -24e-4,
    -0.0513,
    -0.0243,
    -24e-4,
    -0.0513,
    -0.0243,
    -24e-4,
    -0.0513,
    -0.0243,
    -24e-4,
    -0.0513,
    -0.0243,
    -24e-4,
    -0.0513,
    -0.0247,
    49e-4,
    -0.0602,
    -0.0247,
    49e-4,
    -0.0602,
    -0.0247,
    49e-4,
    -0.0602,
    -0.0247,
    49e-4,
    -0.0602,
    -0.0247,
    49e-4,
    -0.0602,
    -0.0155,
    48e-4,
    -0.0532,
    -0.0155,
    48e-4,
    -0.0532,
    -0.0155,
    48e-4,
    -0.0532,
    -0.0155,
    48e-4,
    -0.0532,
    -0.0155,
    48e-4,
    -0.0532,
    -0.0212,
    -2e-4,
    -0.057,
    -0.0212,
    -2e-4,
    -0.057,
    -0.0212,
    -2e-4,
    -0.057,
    -0.0212,
    -2e-4,
    -0.057,
    -0.0212,
    -2e-4,
    -0.057,
    -0.0212,
    -2e-4,
    -0.057,
    -0.0182,
    76e-4,
    -0.0591,
    -0.0182,
    76e-4,
    -0.0591,
    -0.0182,
    76e-4,
    -0.0591,
    -0.0182,
    76e-4,
    -0.0591,
    -0.0182,
    76e-4,
    -0.0591,
    -0.0182,
    76e-4,
    -0.0591,
    -0.0185,
    -5e-4,
    -0.0523,
    -0.0185,
    -5e-4,
    -0.0523,
    -0.0185,
    -5e-4,
    -0.0523,
    -0.0185,
    -5e-4,
    -0.0523,
    -0.0223,
    0.02,
    -0.0537,
    -0.0223,
    0.02,
    -0.0537,
    -0.0223,
    0.02,
    -0.0537,
    -0.0223,
    0.02,
    -0.0537,
    -0.0223,
    0.02,
    -0.0537,
    -0.0149,
    0.0111,
    -0.0539,
    -0.0149,
    0.0111,
    -0.0539,
    -0.0149,
    0.0111,
    -0.0539,
    -0.0149,
    0.0111,
    -0.0539,
    -0.0149,
    0.0111,
    -0.0539,
    -0.0241,
    0.0112,
    -0.0608,
    -0.0241,
    0.0112,
    -0.0608,
    -0.0241,
    0.0112,
    -0.0608,
    -0.0241,
    0.0112,
    -0.0608,
    -0.0241,
    0.0112,
    -0.0608,
    -0.0169,
    0.0169,
    -0.0541,
    -0.0169,
    0.0169,
    -0.0541,
    -0.0169,
    0.0169,
    -0.0541,
    -0.0169,
    0.0169,
    -0.0541,
    -0.0197,
    0.0161,
    -0.0588,
    -0.0197,
    0.0161,
    -0.0588,
    -0.0197,
    0.0161,
    -0.0588,
    -0.0197,
    0.0161,
    -0.0588,
    -0.0197,
    0.0161,
    -0.0588,
    -0.0197,
    0.0161,
    -0.0588,
    33e-4,
    1e-4,
    -59e-4,
    33e-4,
    1e-4,
    -59e-4,
    33e-4,
    1e-4,
    -59e-4,
    33e-4,
    1e-4,
    -59e-4,
    33e-4,
    1e-4,
    -59e-4,
    49e-4,
    91e-4,
    12e-4,
    49e-4,
    91e-4,
    12e-4,
    49e-4,
    91e-4,
    12e-4,
    49e-4,
    91e-4,
    12e-4,
    49e-4,
    91e-4,
    12e-4,
    -41e-4,
    9e-3,
    -6e-3,
    -41e-4,
    9e-3,
    -6e-3,
    -41e-4,
    9e-3,
    -6e-3,
    -41e-4,
    9e-3,
    -6e-3,
    -41e-4,
    9e-3,
    -6e-3,
    6e-4,
    41e-4,
    -9e-4,
    6e-4,
    41e-4,
    -9e-4,
    6e-4,
    41e-4,
    -9e-4,
    6e-4,
    41e-4,
    -9e-4,
    6e-4,
    41e-4,
    -9e-4,
    6e-4,
    41e-4,
    -9e-4,
    -2e-3,
    32e-4,
    -56e-4,
    -2e-3,
    32e-4,
    -56e-4,
    -2e-3,
    32e-4,
    -56e-4,
    -2e-3,
    32e-4,
    -56e-4,
    54e-4,
    0.0153,
    5e-4,
    54e-4,
    0.0153,
    5e-4,
    54e-4,
    0.0153,
    5e-4,
    54e-4,
    0.0153,
    5e-4,
    54e-4,
    0.0153,
    5e-4,
    54e-4,
    0.0153,
    5e-4,
    52e-4,
    0.0225,
    -85e-4,
    52e-4,
    0.0225,
    -85e-4,
    52e-4,
    0.0225,
    -85e-4,
    52e-4,
    0.0225,
    -85e-4,
    52e-4,
    0.0225,
    -85e-4,
    -35e-4,
    0.0152,
    -68e-4,
    -35e-4,
    0.0152,
    -68e-4,
    -35e-4,
    0.0152,
    -68e-4,
    -35e-4,
    0.0152,
    -68e-4,
    56e-4,
    0.0206,
    -27e-4,
    56e-4,
    0.0206,
    -27e-4,
    56e-4,
    0.0206,
    -27e-4,
    56e-4,
    0.0206,
    -27e-4,
    56e-4,
    0.0206,
    -27e-4,
    4e-4,
    0.0203,
    -41e-4,
    4e-4,
    0.0203,
    -41e-4,
    4e-4,
    0.0203,
    -41e-4,
    4e-4,
    0.0203,
    -41e-4,
    4e-4,
    0.0203,
    -41e-4,
    4e-4,
    0.0203,
    -41e-4,
    -1e-3,
    0.0125,
    -7e-4,
    -1e-3,
    0.0125,
    -7e-4,
    -1e-3,
    0.0125,
    -7e-4,
    -1e-3,
    0.0125,
    -7e-4,
    -1e-3,
    0.0125,
    -7e-4,
    -1e-3,
    0.0125,
    -7e-4,
    -28e-4,
    -59e-4,
    -0.0615,
    -28e-4,
    -59e-4,
    -0.0615,
    -28e-4,
    -59e-4,
    -0.0615,
    -28e-4,
    -59e-4,
    -0.0615,
    -28e-4,
    -59e-4,
    -0.0615,
    -0.0104,
    63e-4,
    -0.0621,
    -0.0104,
    63e-4,
    -0.0621,
    -0.0104,
    63e-4,
    -0.0621,
    -0.0104,
    63e-4,
    -0.0621,
    -0.0104,
    63e-4,
    -0.0621,
    -0.0104,
    63e-4,
    -0.0621,
    -0.0104,
    63e-4,
    -0.0621,
    -3e-3,
    13e-4,
    -0.0705,
    -3e-3,
    13e-4,
    -0.0705,
    -3e-3,
    13e-4,
    -0.0705,
    -3e-3,
    13e-4,
    -0.0705,
    -3e-3,
    13e-4,
    -0.0705,
    -3e-3,
    13e-4,
    -0.0705,
    -81e-4,
    -28e-4,
    -0.0612,
    -81e-4,
    -28e-4,
    -0.0612,
    -81e-4,
    -28e-4,
    -0.0612,
    -81e-4,
    -28e-4,
    -0.0612,
    -79e-4,
    -14e-4,
    -0.0665,
    -79e-4,
    -14e-4,
    -0.0665,
    -79e-4,
    -14e-4,
    -0.0665,
    -79e-4,
    -14e-4,
    -0.0665,
    -79e-4,
    -14e-4,
    -0.0665,
    -79e-4,
    -14e-4,
    -0.0665,
    -32e-4,
    -4e-3,
    -0.0673,
    -32e-4,
    -4e-3,
    -0.0673,
    -32e-4,
    -4e-3,
    -0.0673,
    -32e-4,
    -4e-3,
    -0.0673,
    -32e-4,
    -4e-3,
    -0.0673,
    -32e-4,
    -4e-3,
    -0.0673,
    -8e-4,
    0.0165,
    -0.0641,
    -8e-4,
    0.0165,
    -0.0641,
    -8e-4,
    0.0165,
    -0.0641,
    -8e-4,
    0.0165,
    -0.0641,
    -8e-4,
    0.0165,
    -0.0641,
    -24e-4,
    76e-4,
    -0.0712,
    -24e-4,
    76e-4,
    -0.0712,
    -24e-4,
    76e-4,
    -0.0712,
    -24e-4,
    76e-4,
    -0.0712,
    -24e-4,
    76e-4,
    -0.0712,
    -52e-4,
    0.0132,
    -0.0683,
    -52e-4,
    0.0132,
    -0.0683,
    -52e-4,
    0.0132,
    -0.0683,
    -52e-4,
    0.0132,
    -0.0683,
    -52e-4,
    0.0132,
    -0.0683,
    -52e-4,
    0.0132,
    -0.0683,
    -77e-4,
    84e-4,
    -0.0681,
    -77e-4,
    84e-4,
    -0.0681,
    -77e-4,
    84e-4,
    -0.0681,
    -77e-4,
    84e-4,
    -0.0681,
    -77e-4,
    84e-4,
    -0.0681,
    -66e-4,
    0.0145,
    -0.0632,
    -66e-4,
    0.0145,
    -0.0632,
    -66e-4,
    0.0145,
    -0.0632,
    -66e-4,
    0.0145,
    -0.0632,
    0.013,
    -8e-4,
    -68e-4,
    0.013,
    -8e-4,
    -68e-4,
    0.013,
    -8e-4,
    -68e-4,
    0.013,
    -8e-4,
    -68e-4,
    0.0217,
    64e-4,
    -86e-4,
    0.0217,
    64e-4,
    -86e-4,
    0.0217,
    64e-4,
    -86e-4,
    0.0217,
    64e-4,
    -86e-4,
    0.0145,
    81e-4,
    3e-4,
    0.0145,
    81e-4,
    3e-4,
    0.0145,
    81e-4,
    3e-4,
    0.0145,
    81e-4,
    3e-4,
    0.0145,
    81e-4,
    3e-4,
    0.0145,
    81e-4,
    3e-4,
    0.0186,
    21e-4,
    -42e-4,
    0.0186,
    21e-4,
    -42e-4,
    0.0186,
    21e-4,
    -42e-4,
    0.0186,
    21e-4,
    -42e-4,
    0.0186,
    21e-4,
    -42e-4,
    0.0186,
    21e-4,
    -42e-4,
    0.0198,
    73e-4,
    -28e-4,
    0.0198,
    73e-4,
    -28e-4,
    0.0198,
    73e-4,
    -28e-4,
    0.0198,
    73e-4,
    -28e-4,
    0.0198,
    73e-4,
    -28e-4,
    0.0198,
    73e-4,
    -28e-4,
    0.0138,
    23e-4,
    -16e-4,
    0.0138,
    23e-4,
    -16e-4,
    0.0138,
    23e-4,
    -16e-4,
    0.0138,
    23e-4,
    -16e-4,
    0.0138,
    23e-4,
    -16e-4,
    0.0138,
    23e-4,
    -16e-4,
    0.0149,
    0.0216,
    -95e-4,
    0.0149,
    0.0216,
    -95e-4,
    0.0149,
    0.0216,
    -95e-4,
    0.0149,
    0.0216,
    -95e-4,
    0.0149,
    0.0216,
    -95e-4,
    0.0151,
    0.0144,
    -4e-4,
    0.0151,
    0.0144,
    -4e-4,
    0.0151,
    0.0144,
    -4e-4,
    0.0151,
    0.0144,
    -4e-4,
    0.0151,
    0.0144,
    -4e-4,
    0.0151,
    0.0144,
    -4e-4,
    0.0223,
    0.0127,
    -93e-4,
    0.0223,
    0.0127,
    -93e-4,
    0.0223,
    0.0127,
    -93e-4,
    0.0223,
    0.0127,
    -93e-4,
    0.0223,
    0.0127,
    -93e-4,
    0.0153,
    0.0197,
    -36e-4,
    0.0153,
    0.0197,
    -36e-4,
    0.0153,
    0.0197,
    -36e-4,
    0.0153,
    0.0197,
    -36e-4,
    0.0153,
    0.0197,
    -36e-4,
    0.02,
    0.0171,
    -44e-4,
    0.02,
    0.0171,
    -44e-4,
    0.02,
    0.0171,
    -44e-4,
    0.02,
    0.0171,
    -44e-4,
    0.02,
    0.0171,
    -44e-4,
    0.02,
    0.0171,
    -44e-4,
    0.0202,
    0.0185,
    -97e-4,
    0.0202,
    0.0185,
    -97e-4,
    0.0202,
    0.0185,
    -97e-4,
    0.0202,
    0.0185,
    -97e-4,
    69e-4,
    -69e-4,
    -0.0624,
    69e-4,
    -69e-4,
    -0.0624,
    69e-4,
    -69e-4,
    -0.0624,
    69e-4,
    -69e-4,
    -0.0624,
    69e-4,
    -69e-4,
    -0.0624,
    67e-4,
    3e-4,
    -0.0714,
    67e-4,
    3e-4,
    -0.0714,
    67e-4,
    3e-4,
    -0.0714,
    67e-4,
    3e-4,
    -0.0714,
    67e-4,
    3e-4,
    -0.0714,
    0.0101,
    -47e-4,
    -0.0681,
    0.0101,
    -47e-4,
    -0.0681,
    0.0101,
    -47e-4,
    -0.0681,
    0.0101,
    -47e-4,
    -0.0681,
    0.0101,
    -47e-4,
    -0.0681,
    0.0101,
    -47e-4,
    -0.0681,
    0.0125,
    1e-4,
    -0.0695,
    0.0125,
    1e-4,
    -0.0695,
    0.0125,
    1e-4,
    -0.0695,
    0.0125,
    1e-4,
    -0.0695,
    0.0125,
    1e-4,
    -0.0695,
    0.0127,
    -49e-4,
    -0.0633,
    0.0127,
    -49e-4,
    -0.0633,
    0.0127,
    -49e-4,
    -0.0633,
    0.0127,
    -49e-4,
    -0.0633,
    88e-4,
    0.0156,
    -0.065,
    88e-4,
    0.0156,
    -0.065,
    88e-4,
    0.0156,
    -0.065,
    88e-4,
    0.0156,
    -0.065,
    88e-4,
    0.0156,
    -0.065,
    0.0164,
    33e-4,
    -0.0647,
    0.0164,
    33e-4,
    -0.0647,
    0.0164,
    33e-4,
    -0.0647,
    0.0164,
    33e-4,
    -0.0647,
    0.0164,
    33e-4,
    -0.0647,
    0.0164,
    33e-4,
    -0.0647,
    0.0164,
    33e-4,
    -0.0647,
    72e-4,
    66e-4,
    -0.0722,
    72e-4,
    66e-4,
    -0.0722,
    72e-4,
    66e-4,
    -0.0722,
    72e-4,
    66e-4,
    -0.0722,
    72e-4,
    66e-4,
    -0.0722,
    72e-4,
    66e-4,
    -0.0722,
    0.0142,
    0.0125,
    -0.0653,
    0.0142,
    0.0125,
    -0.0653,
    0.0142,
    0.0125,
    -0.0653,
    0.0142,
    0.0125,
    -0.0653,
    0.0131,
    98e-4,
    -0.0699,
    0.0131,
    98e-4,
    -0.0699,
    0.0131,
    98e-4,
    -0.0699,
    0.0131,
    98e-4,
    -0.0699,
    0.0131,
    98e-4,
    -0.0699,
    0.0131,
    98e-4,
    -0.0699,
    8e-3,
    0.0124,
    -0.0703,
    8e-3,
    0.0124,
    -0.0703,
    8e-3,
    0.0124,
    -0.0703,
    8e-3,
    0.0124,
    -0.0703,
    8e-3,
    0.0124,
    -0.0703,
    8e-3,
    0.0124,
    -0.0703,
    0.0315,
    -48e-4,
    -0.0109,
    0.0315,
    -48e-4,
    -0.0109,
    0.0315,
    -48e-4,
    -0.0109,
    0.0315,
    -48e-4,
    -0.0109,
    0.0314,
    79e-4,
    -32e-4,
    0.0314,
    79e-4,
    -32e-4,
    0.0314,
    79e-4,
    -32e-4,
    0.0314,
    79e-4,
    -32e-4,
    0.0314,
    79e-4,
    -32e-4,
    0.0314,
    79e-4,
    -32e-4,
    0.0247,
    6e-4,
    -72e-4,
    0.0247,
    6e-4,
    -72e-4,
    0.0247,
    6e-4,
    -72e-4,
    0.0247,
    6e-4,
    -72e-4,
    0.0247,
    6e-4,
    -72e-4,
    0.0247,
    6e-4,
    -72e-4,
    0.0219,
    82e-4,
    -0.0115,
    0.0219,
    82e-4,
    -0.0115,
    0.0219,
    82e-4,
    -0.0115,
    0.0219,
    82e-4,
    -0.0115,
    0.0354,
    0.0151,
    -69e-4,
    0.0354,
    0.0151,
    -69e-4,
    0.0354,
    0.0151,
    -69e-4,
    0.0354,
    0.0151,
    -69e-4,
    0.0354,
    0.0151,
    -69e-4,
    0.0272,
    0.0154,
    -87e-4,
    0.0272,
    0.0154,
    -87e-4,
    0.0272,
    0.0154,
    -87e-4,
    0.0272,
    0.0154,
    -87e-4,
    0.0272,
    0.0154,
    -87e-4,
    0.0272,
    0.0154,
    -87e-4,
    0.0253,
    83e-4,
    -56e-4,
    0.0253,
    83e-4,
    -56e-4,
    0.0253,
    83e-4,
    -56e-4,
    0.0253,
    83e-4,
    -56e-4,
    0.0192,
    51e-4,
    -0.0493,
    0.0192,
    51e-4,
    -0.0493,
    0.0192,
    51e-4,
    -0.0493,
    0.0192,
    51e-4,
    -0.0493,
    0.0192,
    51e-4,
    -0.0493,
    0.0192,
    51e-4,
    -0.0493,
    0.0208,
    -36e-4,
    -0.0485,
    0.0208,
    -36e-4,
    -0.0485,
    0.0208,
    -36e-4,
    -0.0485,
    0.0208,
    -36e-4,
    -0.0485,
    0.0227,
    -38e-4,
    -0.0539,
    0.0227,
    -38e-4,
    -0.0539,
    0.0227,
    -38e-4,
    -0.0539,
    0.0227,
    -38e-4,
    -0.0539,
    0.0227,
    -38e-4,
    -0.0539,
    0.0227,
    -38e-4,
    -0.0539,
    0.0227,
    -38e-4,
    -0.0539,
    0.0214,
    4e-3,
    -0.0551,
    0.0214,
    4e-3,
    -0.0551,
    0.0214,
    4e-3,
    -0.0551,
    0.0214,
    4e-3,
    -0.0551,
    0.0328,
    0.014,
    -0.0509,
    0.0328,
    0.014,
    -0.0509,
    0.0328,
    0.014,
    -0.0509,
    0.0328,
    0.014,
    -0.0509,
    0.0328,
    0.014,
    -0.0509,
    0.0271,
    28e-4,
    -0.0583,
    0.0271,
    28e-4,
    -0.0583,
    0.0271,
    28e-4,
    -0.0583,
    0.0271,
    28e-4,
    -0.0583,
    0.0271,
    28e-4,
    -0.0583,
    0.0252,
    0.0113,
    -0.0552,
    0.0252,
    0.0113,
    -0.0552,
    0.0252,
    0.0113,
    -0.0552,
    0.0252,
    0.0113,
    -0.0552,
    0.0252,
    0.0113,
    -0.0552,
    0.0252,
    0.0113,
    -0.0552,
    0.0235,
    0.0124,
    -0.0501,
    0.0235,
    0.0124,
    -0.0501,
    0.0235,
    0.0124,
    -0.0501,
    0.0235,
    0.0124,
    -0.0501,
    0.045,
    42e-4,
    -0.0127,
    0.045,
    42e-4,
    -0.0127,
    0.045,
    42e-4,
    -0.0127,
    0.045,
    42e-4,
    -0.0127,
    0.0404,
    -24e-4,
    -83e-4,
    0.0404,
    -24e-4,
    -83e-4,
    0.0404,
    -24e-4,
    -83e-4,
    0.0404,
    -24e-4,
    -83e-4,
    0.0404,
    -24e-4,
    -83e-4,
    0.0404,
    -24e-4,
    -83e-4,
    0.0427,
    53e-4,
    -66e-4,
    0.0427,
    53e-4,
    -66e-4,
    0.0427,
    53e-4,
    -66e-4,
    0.0427,
    53e-4,
    -66e-4,
    0.0326,
    -15e-4,
    -52e-4,
    0.0326,
    -15e-4,
    -52e-4,
    0.0326,
    -15e-4,
    -52e-4,
    0.0326,
    -15e-4,
    -52e-4,
    0.0326,
    -15e-4,
    -52e-4,
    0.035,
    0.0175,
    -0.0131,
    0.035,
    0.0175,
    -0.0131,
    0.035,
    0.0175,
    -0.0131,
    0.035,
    0.0175,
    -0.0131,
    0.037,
    62e-4,
    -35e-4,
    0.037,
    62e-4,
    -35e-4,
    0.037,
    62e-4,
    -35e-4,
    0.037,
    62e-4,
    -35e-4,
    0.037,
    62e-4,
    -35e-4,
    0.037,
    62e-4,
    -35e-4,
    0.0431,
    0.0128,
    -0.01,
    0.0431,
    0.0128,
    -0.01,
    0.0431,
    0.0128,
    -0.01,
    0.0431,
    0.0128,
    -0.01,
    0.0431,
    0.0128,
    -0.01,
    0.0431,
    0.0128,
    -0.01,
    0.0289,
    -82e-4,
    -0.0486,
    0.0289,
    -82e-4,
    -0.0486,
    0.0289,
    -82e-4,
    -0.0486,
    0.0289,
    -82e-4,
    -0.0486,
    0.0289,
    -82e-4,
    -0.0486,
    0.0327,
    16e-4,
    -0.0586,
    0.0327,
    16e-4,
    -0.0586,
    0.0327,
    16e-4,
    -0.0586,
    0.0327,
    16e-4,
    -0.0586,
    0.0327,
    16e-4,
    -0.0586,
    0.0327,
    16e-4,
    -0.0586,
    0.0352,
    -62e-4,
    -0.0544,
    0.0352,
    -62e-4,
    -0.0544,
    0.0352,
    -62e-4,
    -0.0544,
    0.0352,
    -62e-4,
    -0.0544,
    0.0352,
    -62e-4,
    -0.0544,
    0.0352,
    -62e-4,
    -0.0544,
    0.0388,
    9e-4,
    -0.0562,
    0.0388,
    9e-4,
    -0.0562,
    0.0388,
    9e-4,
    -0.0562,
    0.0388,
    9e-4,
    -0.0562,
    0.0377,
    -65e-4,
    -0.0495,
    0.0377,
    -65e-4,
    -0.0495,
    0.0377,
    -65e-4,
    -0.0495,
    0.0377,
    -65e-4,
    -0.0495,
    0.0421,
    11e-4,
    -0.0505,
    0.0421,
    11e-4,
    -0.0505,
    0.0421,
    11e-4,
    -0.0505,
    0.0421,
    11e-4,
    -0.0505,
    0.0421,
    11e-4,
    -0.0505,
    0.0394,
    87e-4,
    -0.0546,
    0.0394,
    87e-4,
    -0.0546,
    0.0394,
    87e-4,
    -0.0546,
    0.0394,
    87e-4,
    -0.0546,
    0.0394,
    87e-4,
    -0.0546,
    0.0394,
    87e-4,
    -0.0546,
    0.0344,
    99e-4,
    -0.0564,
    0.0344,
    99e-4,
    -0.0564,
    0.0344,
    99e-4,
    -0.0564,
    0.0344,
    99e-4,
    -0.0564,
    0.0344,
    99e-4,
    -0.0564,
    -31e-4,
    -72e-4,
    -0.0622,
    -31e-4,
    -72e-4,
    -0.0622,
    -31e-4,
    -72e-4,
    -0.0622,
    -31e-4,
    -72e-4,
    -0.0622,
    -31e-4,
    -72e-4,
    -0.0622,
    -8e-4,
    6e-3,
    -0.0581,
    -8e-4,
    6e-3,
    -0.0581,
    -8e-4,
    6e-3,
    -0.0581,
    -8e-4,
    6e-3,
    -0.0581,
    -8e-4,
    6e-3,
    -0.0581,
    -8e-4,
    6e-3,
    -0.0581,
    -8e-4,
    6e-3,
    -0.0581,
    -21e-4,
    -28e-4,
    -0.0579,
    -21e-4,
    -28e-4,
    -0.0579,
    -21e-4,
    -28e-4,
    -0.0579,
    -21e-4,
    -28e-4,
    -0.0579,
    -73e-4,
    -24e-4,
    -0.0595,
    -73e-4,
    -24e-4,
    -0.0595,
    -73e-4,
    -24e-4,
    -0.0595,
    -73e-4,
    -24e-4,
    -0.0595,
    -73e-4,
    -24e-4,
    -0.0595,
    -73e-4,
    -24e-4,
    -0.0595,
    -18e-4,
    0.0128,
    -0.0701,
    -18e-4,
    0.0128,
    -0.0701,
    -18e-4,
    0.0128,
    -0.0701,
    -18e-4,
    0.0128,
    -0.0701,
    -18e-4,
    0.0128,
    -0.0701,
    -0.0112,
    36e-4,
    -0.0654,
    -0.0112,
    36e-4,
    -0.0654,
    -0.0112,
    36e-4,
    -0.0654,
    -0.0112,
    36e-4,
    -0.0654,
    -0.0112,
    36e-4,
    -0.0654,
    -47e-4,
    0.012,
    -0.0639,
    -47e-4,
    0.012,
    -0.0639,
    -47e-4,
    0.012,
    -0.0639,
    -47e-4,
    0.012,
    -0.0639,
    -47e-4,
    0.012,
    -0.0639,
    -47e-4,
    0.012,
    -0.0639,
    -75e-4,
    0.011,
    -0.0685,
    -75e-4,
    0.011,
    -0.0685,
    -75e-4,
    0.011,
    -0.0685,
    -75e-4,
    0.011,
    -0.0685,
    -74e-4,
    55e-4,
    -0.06,
    -74e-4,
    55e-4,
    -0.06,
    -74e-4,
    55e-4,
    -0.06,
    -74e-4,
    55e-4,
    -0.06,
    -86e-4,
    -0.0208,
    -0.0971,
    -86e-4,
    -0.0208,
    -0.0971,
    -86e-4,
    -0.0208,
    -0.0971,
    -86e-4,
    -0.0208,
    -0.0971,
    -0.0165,
    -98e-4,
    -0.1003,
    -0.0165,
    -98e-4,
    -0.1003,
    -0.0165,
    -98e-4,
    -0.1003,
    -0.0165,
    -98e-4,
    -0.1003,
    -0.0165,
    -98e-4,
    -0.1003,
    -0.0165,
    -98e-4,
    -0.1003,
    -0.014,
    -0.0178,
    -0.0974,
    -0.014,
    -0.0178,
    -0.0974,
    -0.014,
    -0.0178,
    -0.0974,
    -0.014,
    -0.0178,
    -0.0974,
    -0.0125,
    -0.0195,
    -0.1024,
    -0.0125,
    -0.0195,
    -0.1024,
    -0.0125,
    -0.0195,
    -0.1024,
    -0.0125,
    -0.0195,
    -0.1024,
    -0.0125,
    -0.0195,
    -0.1024,
    -0.0125,
    -0.0195,
    -0.1024,
    -0.0125,
    -0.0195,
    -0.1024,
    -0.0146,
    -0.0123,
    -0.1059,
    -0.0146,
    -0.0123,
    -0.1059,
    -0.0146,
    -0.0123,
    -0.1059,
    -0.0146,
    -0.0123,
    -0.1059,
    -73e-4,
    -9e-4,
    -0.1051,
    -73e-4,
    -9e-4,
    -0.1051,
    -73e-4,
    -9e-4,
    -0.1051,
    -73e-4,
    -9e-4,
    -0.1051,
    -89e-4,
    -0.0141,
    -0.1092,
    -89e-4,
    -0.0141,
    -0.1092,
    -89e-4,
    -0.0141,
    -0.1092,
    -89e-4,
    -0.0141,
    -0.1092,
    -89e-4,
    -0.0141,
    -0.1092,
    -89e-4,
    -0.0141,
    -0.1092,
    -0.0115,
    -5e-3,
    -0.1082,
    -0.0115,
    -5e-3,
    -0.1082,
    -0.0115,
    -5e-3,
    -0.1082,
    -0.0115,
    -5e-3,
    -0.1082,
    -0.0115,
    -5e-3,
    -0.1082,
    -0.0115,
    -5e-3,
    -0.1082,
    -0.0115,
    -5e-3,
    -0.1082,
    -0.013,
    -26e-4,
    -0.1035,
    -0.013,
    -26e-4,
    -0.1035,
    -0.013,
    -26e-4,
    -0.1035,
    -0.013,
    -26e-4,
    -0.1035,
    52e-4,
    -81e-4,
    -0.0631,
    52e-4,
    -81e-4,
    -0.0631,
    52e-4,
    -81e-4,
    -0.0631,
    52e-4,
    -81e-4,
    -0.0631,
    0.0145,
    9e-4,
    -0.0684,
    0.0145,
    9e-4,
    -0.0684,
    0.0145,
    9e-4,
    -0.0684,
    0.0145,
    9e-4,
    -0.0684,
    0.0108,
    -47e-4,
    -0.0616,
    0.0108,
    -47e-4,
    -0.0616,
    0.0108,
    -47e-4,
    -0.0616,
    0.0108,
    -47e-4,
    -0.0616,
    0.0108,
    -47e-4,
    -0.0616,
    0.0108,
    -47e-4,
    -0.0616,
    0.0125,
    34e-4,
    -0.0623,
    0.0125,
    34e-4,
    -0.0623,
    0.0125,
    34e-4,
    -0.0623,
    0.0125,
    34e-4,
    -0.0623,
    62e-4,
    -37e-4,
    -0.0589,
    62e-4,
    -37e-4,
    -0.0589,
    62e-4,
    -37e-4,
    -0.0589,
    62e-4,
    -37e-4,
    -0.0589,
    62e-4,
    -37e-4,
    -0.0589,
    62e-4,
    -37e-4,
    -0.0589,
    65e-4,
    0.0118,
    -0.0711,
    65e-4,
    0.0118,
    -0.0711,
    65e-4,
    0.0118,
    -0.0711,
    65e-4,
    0.0118,
    -0.0711,
    73e-4,
    48e-4,
    -0.0591,
    73e-4,
    48e-4,
    -0.0591,
    73e-4,
    48e-4,
    -0.0591,
    73e-4,
    48e-4,
    -0.0591,
    73e-4,
    48e-4,
    -0.0591,
    73e-4,
    48e-4,
    -0.0591,
    72e-4,
    0.0115,
    -0.065,
    72e-4,
    0.0115,
    -0.065,
    72e-4,
    0.0115,
    -0.065,
    72e-4,
    0.0115,
    -0.065,
    72e-4,
    0.0115,
    -0.065,
    72e-4,
    0.0115,
    -0.065,
    0.0118,
    98e-4,
    -0.0675,
    0.0118,
    98e-4,
    -0.0675,
    0.0118,
    98e-4,
    -0.0675,
    0.0118,
    98e-4,
    -0.0675,
    0.0118,
    98e-4,
    -0.0675,
    0.0118,
    98e-4,
    -0.0675,
    -3e-4,
    -0.0217,
    -0.0981,
    -3e-4,
    -0.0217,
    -0.0981,
    -3e-4,
    -0.0217,
    -0.0981,
    -3e-4,
    -0.0217,
    -0.0981,
    -3e-4,
    -0.0217,
    -0.0981,
    -8e-4,
    -0.0147,
    -0.1101,
    -8e-4,
    -0.0147,
    -0.1101,
    -8e-4,
    -0.0147,
    -0.1101,
    -8e-4,
    -0.0147,
    -0.1101,
    -8e-4,
    -0.0147,
    -0.1101,
    -1e-3,
    -0.0213,
    -0.1042,
    -1e-3,
    -0.0213,
    -0.1042,
    -1e-3,
    -0.0213,
    -0.1042,
    -1e-3,
    -0.0213,
    -0.1042,
    -1e-3,
    -0.0213,
    -0.1042,
    46e-4,
    -0.0205,
    -0.103,
    46e-4,
    -0.0205,
    -0.103,
    46e-4,
    -0.0205,
    -0.103,
    46e-4,
    -0.0205,
    -0.103,
    46e-4,
    -0.0205,
    -0.103,
    46e-4,
    -0.0205,
    -0.103,
    53e-4,
    -0.0145,
    -0.1082,
    53e-4,
    -0.0145,
    -0.1082,
    53e-4,
    -0.0145,
    -0.1082,
    53e-4,
    -0.0145,
    -0.1082,
    1e-3,
    -18e-4,
    -0.106,
    1e-3,
    -18e-4,
    -0.106,
    1e-3,
    -18e-4,
    -0.106,
    1e-3,
    -18e-4,
    -0.106,
    1e-3,
    -18e-4,
    -0.106,
    88e-4,
    -0.0128,
    -0.1031,
    88e-4,
    -0.0128,
    -0.1031,
    88e-4,
    -0.0128,
    -0.1031,
    88e-4,
    -0.0128,
    -0.1031,
    88e-4,
    -0.0128,
    -0.1031,
    64e-4,
    -47e-4,
    -0.1057,
    64e-4,
    -47e-4,
    -0.1057,
    64e-4,
    -47e-4,
    -0.1057,
    64e-4,
    -47e-4,
    -0.1057,
    34e-4,
    -7e-3,
    -0.1101,
    34e-4,
    -7e-3,
    -0.1101,
    34e-4,
    -7e-3,
    -0.1101,
    34e-4,
    -7e-3,
    -0.1101,
    34e-4,
    -7e-3,
    -0.1101,
    34e-4,
    -7e-3,
    -0.1101,
    34e-4,
    -7e-3,
    -0.1101,
    0.025,
    -87e-4,
    -0.0527,
    0.025,
    -87e-4,
    -0.0527,
    0.025,
    -87e-4,
    -0.0527,
    0.025,
    -87e-4,
    -0.0527,
    0.025,
    -87e-4,
    -0.0527,
    0.0276,
    48e-4,
    -0.0485,
    0.0276,
    48e-4,
    -0.0485,
    0.0276,
    48e-4,
    -0.0485,
    0.0276,
    48e-4,
    -0.0485,
    0.0276,
    48e-4,
    -0.0485,
    0.0276,
    48e-4,
    -0.0485,
    0.0276,
    48e-4,
    -0.0485,
    0.026,
    -44e-4,
    -0.0483,
    0.026,
    -44e-4,
    -0.0483,
    0.026,
    -44e-4,
    -0.0483,
    0.026,
    -44e-4,
    -0.0483,
    0.026,
    -44e-4,
    -0.0483,
    0.0208,
    -37e-4,
    -0.0502,
    0.0208,
    -37e-4,
    -0.0502,
    0.0208,
    -37e-4,
    -0.0502,
    0.0208,
    -37e-4,
    -0.0502,
    0.0208,
    -37e-4,
    -0.0502,
    0.0208,
    -37e-4,
    -0.0502,
    0.0212,
    17e-4,
    -0.05,
    0.0212,
    17e-4,
    -0.05,
    0.0212,
    17e-4,
    -0.05,
    0.0212,
    17e-4,
    -0.05,
    0.028,
    0.0116,
    -0.0604,
    0.028,
    0.0116,
    -0.0604,
    0.028,
    0.0116,
    -0.0604,
    0.028,
    0.0116,
    -0.0604,
    0.028,
    0.0116,
    -0.0604,
    0.0178,
    26e-4,
    -0.0559,
    0.0178,
    26e-4,
    -0.0559,
    0.0178,
    26e-4,
    -0.0559,
    0.0178,
    26e-4,
    -0.0559,
    0.0178,
    26e-4,
    -0.0559,
    0.0283,
    0.0112,
    -0.0543,
    0.0283,
    0.0112,
    -0.0543,
    0.0283,
    0.0112,
    -0.0543,
    0.0283,
    0.0112,
    -0.0543,
    0.0283,
    0.0112,
    -0.0543,
    0.023,
    99e-4,
    -0.0538,
    0.023,
    99e-4,
    -0.0538,
    0.023,
    99e-4,
    -0.0538,
    0.023,
    99e-4,
    -0.0538,
    0.023,
    99e-4,
    -0.0538,
    0.023,
    99e-4,
    -0.0538,
    0.0221,
    0.0102,
    -0.0592,
    0.0221,
    0.0102,
    -0.0592,
    0.0221,
    0.0102,
    -0.0592,
    0.0221,
    0.0102,
    -0.0592,
    0.0209,
    -0.0204,
    -0.085,
    0.0209,
    -0.0204,
    -0.085,
    0.0209,
    -0.0204,
    -0.085,
    0.0209,
    -0.0204,
    -0.085,
    0.0209,
    -0.0204,
    -0.085,
    0.0139,
    -84e-4,
    -0.0885,
    0.0139,
    -84e-4,
    -0.0885,
    0.0139,
    -84e-4,
    -0.0885,
    0.0139,
    -84e-4,
    -0.0885,
    0.0139,
    -84e-4,
    -0.0885,
    0.0139,
    -84e-4,
    -0.0885,
    0.0157,
    -0.0171,
    -0.0856,
    0.0157,
    -0.0171,
    -0.0856,
    0.0157,
    -0.0171,
    -0.0856,
    0.0157,
    -0.0171,
    -0.0856,
    0.016,
    -0.017,
    -0.091,
    0.016,
    -0.017,
    -0.091,
    0.016,
    -0.017,
    -0.091,
    0.016,
    -0.017,
    -0.091,
    0.016,
    -0.017,
    -0.091,
    0.016,
    -0.017,
    -0.091,
    0.0238,
    -0.021,
    -0.0916,
    0.0238,
    -0.021,
    -0.0916,
    0.0238,
    -0.021,
    -0.0916,
    0.0238,
    -0.021,
    -0.0916,
    0.0238,
    -0.021,
    -0.0916,
    0.0238,
    -0.021,
    -0.0916,
    0.0239,
    -1e-4,
    -0.0928,
    0.0239,
    -1e-4,
    -0.0928,
    0.0239,
    -1e-4,
    -0.0928,
    0.0239,
    -1e-4,
    -0.0928,
    0.0217,
    -0.0134,
    -0.0972,
    0.0217,
    -0.0134,
    -0.0972,
    0.0217,
    -0.0134,
    -0.0972,
    0.0217,
    -0.0134,
    -0.0972,
    0.0217,
    -0.0134,
    -0.0972,
    0.0217,
    -0.0134,
    -0.0972,
    0.0196,
    -39e-4,
    -0.0962,
    0.0196,
    -39e-4,
    -0.0962,
    0.0196,
    -39e-4,
    -0.0962,
    0.0196,
    -39e-4,
    -0.0962,
    0.0196,
    -39e-4,
    -0.0962,
    0.0196,
    -39e-4,
    -0.0962,
    0.0196,
    -39e-4,
    -0.0962,
    0.0166,
    -86e-4,
    -0.0948,
    0.0166,
    -86e-4,
    -0.0948,
    0.0166,
    -86e-4,
    -0.0948,
    0.0166,
    -86e-4,
    -0.0948,
    0.0181,
    -15e-4,
    -0.0915,
    0.0181,
    -15e-4,
    -0.0915,
    0.0181,
    -15e-4,
    -0.0915,
    0.0181,
    -15e-4,
    -0.0915,
    0.0316,
    -99e-4,
    -0.0531,
    0.0316,
    -99e-4,
    -0.0531,
    0.0316,
    -99e-4,
    -0.0531,
    0.0316,
    -99e-4,
    -0.0531,
    0.0417,
    -1e-3,
    -0.0574,
    0.0417,
    -1e-3,
    -0.0574,
    0.0417,
    -1e-3,
    -0.0574,
    0.0417,
    -1e-3,
    -0.0574,
    0.0417,
    -1e-3,
    -0.0574,
    0.0417,
    -1e-3,
    -0.0574,
    0.0375,
    -85e-4,
    -0.0543,
    0.0375,
    -85e-4,
    -0.0543,
    0.0375,
    -85e-4,
    -0.0543,
    0.0375,
    -85e-4,
    -0.0543,
    0.0359,
    -61e-4,
    -0.0496,
    0.0359,
    -61e-4,
    -0.0496,
    0.0359,
    -61e-4,
    -0.0496,
    0.0359,
    -61e-4,
    -0.0496,
    0.0359,
    -61e-4,
    -0.0496,
    0.0359,
    -61e-4,
    -0.0496,
    0.0359,
    -61e-4,
    -0.0496,
    0.0396,
    13e-4,
    -0.0518,
    0.0396,
    13e-4,
    -0.0518,
    0.0396,
    13e-4,
    -0.0518,
    0.0396,
    13e-4,
    -0.0518,
    0.0347,
    0.0105,
    -0.0608,
    0.0347,
    0.0105,
    -0.0608,
    0.0347,
    0.0105,
    -0.0608,
    0.0347,
    0.0105,
    -0.0608,
    0.0347,
    0.0105,
    -0.0608,
    0.0341,
    29e-4,
    -0.0487,
    0.0341,
    29e-4,
    -0.0487,
    0.0341,
    29e-4,
    -0.0487,
    0.0341,
    29e-4,
    -0.0487,
    0.0341,
    29e-4,
    -0.0487,
    0.0382,
    88e-4,
    -0.055,
    0.0382,
    88e-4,
    -0.055,
    0.0382,
    88e-4,
    -0.055,
    0.0382,
    88e-4,
    -0.055,
    0.0382,
    88e-4,
    -0.055,
    0.0382,
    88e-4,
    -0.055,
    0.0382,
    88e-4,
    -0.055,
    0.0398,
    72e-4,
    -0.0603,
    0.0398,
    72e-4,
    -0.0603,
    0.0398,
    72e-4,
    -0.0603,
    0.0398,
    72e-4,
    -0.0603,
    0.0275,
    -0.0216,
    -0.0854,
    0.0275,
    -0.0216,
    -0.0854,
    0.0275,
    -0.0216,
    -0.0854,
    0.0275,
    -0.0216,
    -0.0854,
    0.0282,
    -0.0143,
    -0.0975,
    0.0282,
    -0.0143,
    -0.0975,
    0.0282,
    -0.0143,
    -0.0975,
    0.0282,
    -0.0143,
    -0.0975,
    0.0282,
    -0.0143,
    -0.0975,
    0.0282,
    -0.0143,
    -0.0975,
    0.0325,
    -0.0208,
    -0.0902,
    0.0325,
    -0.0208,
    -0.0902,
    0.0325,
    -0.0208,
    -0.0902,
    0.0325,
    -0.0208,
    -0.0902,
    0.0325,
    -0.0208,
    -0.0902,
    0.0325,
    -0.0208,
    -0.0902,
    0.0342,
    -0.0145,
    -0.0952,
    0.0342,
    -0.0145,
    -0.0952,
    0.0342,
    -0.0145,
    -0.0952,
    0.0342,
    -0.0145,
    -0.0952,
    0.0306,
    -13e-4,
    -0.0932,
    0.0306,
    -13e-4,
    -0.0932,
    0.0306,
    -13e-4,
    -0.0932,
    0.0306,
    -13e-4,
    -0.0932,
    0.0306,
    -13e-4,
    -0.0932,
    0.0378,
    -0.0129,
    -0.0895,
    0.0378,
    -0.0129,
    -0.0895,
    0.0378,
    -0.0129,
    -0.0895,
    0.0378,
    -0.0129,
    -0.0895,
    0.0347,
    -62e-4,
    -0.0957,
    0.0347,
    -62e-4,
    -0.0957,
    0.0347,
    -62e-4,
    -0.0957,
    0.0347,
    -62e-4,
    -0.0957,
    0.0347,
    -62e-4,
    -0.0957,
    0.0347,
    -62e-4,
    -0.0957,
    0.0296,
    -55e-4,
    -0.0975,
    0.0296,
    -55e-4,
    -0.0975,
    0.0296,
    -55e-4,
    -0.0975,
    0.0296,
    -55e-4,
    -0.0975,
    0.0296,
    -55e-4,
    -0.0975,
    -0.0395,
    1e-4,
    0.0622,
    -0.0395,
    1e-4,
    0.0622,
    -0.0395,
    1e-4,
    0.0622,
    -0.0395,
    1e-4,
    0.0622,
    -0.0441,
    85e-4,
    0.071,
    -0.0441,
    85e-4,
    0.071,
    -0.0441,
    85e-4,
    0.071,
    -0.0441,
    85e-4,
    0.071,
    -0.0441,
    85e-4,
    0.071,
    -0.0441,
    85e-4,
    0.071,
    -0.0441,
    85e-4,
    0.071,
    -0.0441,
    85e-4,
    0.071,
    -0.0399,
    27e-4,
    0.0678,
    -0.0399,
    27e-4,
    0.0678,
    -0.0399,
    27e-4,
    0.0678,
    -0.0399,
    27e-4,
    0.0678,
    -0.0399,
    27e-4,
    0.0678,
    -0.0443,
    -6e-4,
    0.0672,
    -0.0443,
    -6e-4,
    0.0672,
    -0.0443,
    -6e-4,
    0.0672,
    -0.0443,
    -6e-4,
    0.0672,
    -0.0443,
    -6e-4,
    0.0672,
    -0.0443,
    -6e-4,
    0.0672,
    -0.0529,
    0.0141,
    0.0634,
    -0.0529,
    0.0141,
    0.0634,
    -0.0529,
    0.0141,
    0.0634,
    -0.0529,
    0.0141,
    0.0634,
    -0.0521,
    12e-4,
    0.0649,
    -0.0521,
    12e-4,
    0.0649,
    -0.0521,
    12e-4,
    0.0649,
    -0.0521,
    12e-4,
    0.0649,
    -0.0498,
    0.0131,
    0.0686,
    -0.0498,
    0.0131,
    0.0686,
    -0.0498,
    0.0131,
    0.0686,
    -0.0498,
    0.0131,
    0.0686,
    -0.0498,
    0.0131,
    0.0686,
    -0.0534,
    9e-3,
    0.068,
    -0.0534,
    9e-3,
    0.068,
    -0.0534,
    9e-3,
    0.068,
    -0.0534,
    9e-3,
    0.068,
    -0.0534,
    9e-3,
    0.068,
    -0.0534,
    9e-3,
    0.068,
    -0.0488,
    4e-3,
    0.0699,
    -0.0488,
    4e-3,
    0.0699,
    -0.0488,
    4e-3,
    0.0699,
    -0.0488,
    4e-3,
    0.0699,
    -0.0471,
    -47e-4,
    0.0313,
    -0.0471,
    -47e-4,
    0.0313,
    -0.0471,
    -47e-4,
    0.0313,
    -0.0471,
    -47e-4,
    0.0313,
    -0.0471,
    -47e-4,
    0.0313,
    -0.0597,
    -34e-4,
    0.0341,
    -0.0597,
    -34e-4,
    0.0341,
    -0.0597,
    -34e-4,
    0.0341,
    -0.0597,
    -34e-4,
    0.0341,
    -0.0597,
    -34e-4,
    0.0341,
    -0.0597,
    -34e-4,
    0.0341,
    -0.0527,
    -67e-4,
    0.033,
    -0.0527,
    -67e-4,
    0.033,
    -0.0527,
    -67e-4,
    0.033,
    -0.0527,
    -67e-4,
    0.033,
    -0.0528,
    -55e-4,
    0.0273,
    -0.0528,
    -55e-4,
    0.0273,
    -0.0528,
    -55e-4,
    0.0273,
    -0.0528,
    -55e-4,
    0.0273,
    -0.0528,
    -55e-4,
    0.0273,
    -0.0528,
    -55e-4,
    0.0273,
    -0.0528,
    -55e-4,
    0.0273,
    -0.0591,
    -25e-4,
    0.0279,
    -0.0591,
    -25e-4,
    0.0279,
    -0.0591,
    -25e-4,
    0.0279,
    -0.0591,
    -25e-4,
    0.0279,
    -0.0605,
    93e-4,
    0.0324,
    -0.0605,
    93e-4,
    0.0324,
    -0.0605,
    93e-4,
    0.0324,
    -0.0605,
    93e-4,
    0.0324,
    -0.0605,
    93e-4,
    0.0324,
    -0.0558,
    11e-4,
    0.0237,
    -0.0558,
    11e-4,
    0.0237,
    -0.0558,
    11e-4,
    0.0237,
    -0.0558,
    11e-4,
    0.0237,
    -0.0558,
    11e-4,
    0.0237,
    -0.062,
    39e-4,
    0.0284,
    -0.062,
    39e-4,
    0.0284,
    -0.062,
    39e-4,
    0.0284,
    -0.062,
    39e-4,
    0.0284,
    -0.062,
    39e-4,
    0.0284,
    -0.062,
    39e-4,
    0.0284,
    -0.0626,
    37e-4,
    0.0338,
    -0.0626,
    37e-4,
    0.0338,
    -0.0626,
    37e-4,
    0.0338,
    -0.0626,
    37e-4,
    0.0338,
    -0.0334,
    61e-4,
    0.0598,
    -0.0334,
    61e-4,
    0.0598,
    -0.0334,
    61e-4,
    0.0598,
    -0.0334,
    61e-4,
    0.0598,
    -0.0334,
    61e-4,
    0.0598,
    -0.0343,
    0.0189,
    0.0581,
    -0.0343,
    0.0189,
    0.0581,
    -0.0343,
    0.0189,
    0.0581,
    -0.0343,
    0.0189,
    0.0581,
    -0.0343,
    0.0189,
    0.0581,
    -0.0313,
    0.0118,
    0.0584,
    -0.0313,
    0.0118,
    0.0584,
    -0.0313,
    0.0118,
    0.0584,
    -0.0313,
    0.0118,
    0.0584,
    -0.032,
    0.0115,
    0.0641,
    -0.032,
    0.0115,
    0.0641,
    -0.032,
    0.0115,
    0.0641,
    -0.032,
    0.0115,
    0.0641,
    -0.032,
    0.0115,
    0.0641,
    -0.032,
    0.0115,
    0.0641,
    -0.032,
    0.0115,
    0.0641,
    -0.0347,
    0.0179,
    0.0643,
    -0.0347,
    0.0179,
    0.0643,
    -0.0347,
    0.0179,
    0.0643,
    -0.0347,
    0.0179,
    0.0643,
    -0.0468,
    0.0202,
    0.0609,
    -0.0468,
    0.0202,
    0.0609,
    -0.0468,
    0.0202,
    0.0609,
    -0.0468,
    0.0202,
    0.0609,
    -0.0468,
    0.0202,
    0.0609,
    -0.038,
    0.0144,
    0.0684,
    -0.038,
    0.0144,
    0.0684,
    -0.038,
    0.0144,
    0.0684,
    -0.038,
    0.0144,
    0.0684,
    -0.038,
    0.0144,
    0.0684,
    -0.0437,
    0.0192,
    0.0662,
    -0.0437,
    0.0192,
    0.0662,
    -0.0437,
    0.0192,
    0.0662,
    -0.0437,
    0.0192,
    0.0662,
    -0.0437,
    0.0192,
    0.0662,
    -0.0402,
    0.022,
    0.0625,
    -0.0402,
    0.022,
    0.0625,
    -0.0402,
    0.022,
    0.0625,
    -0.0402,
    0.022,
    0.0625,
    -0.0402,
    0.022,
    0.0625,
    -0.0402,
    0.022,
    0.0625,
    -0.041,
    14e-4,
    0.0289,
    -0.041,
    14e-4,
    0.0289,
    -0.041,
    14e-4,
    0.0289,
    -0.041,
    14e-4,
    0.0289,
    -0.0497,
    7e-3,
    0.0213,
    -0.0497,
    7e-3,
    0.0213,
    -0.0497,
    7e-3,
    0.0213,
    -0.0497,
    7e-3,
    0.0213,
    -0.0497,
    7e-3,
    0.0213,
    -0.0497,
    7e-3,
    0.0213,
    -0.0418,
    5e-3,
    0.0233,
    -0.0418,
    5e-3,
    0.0233,
    -0.0418,
    5e-3,
    0.0233,
    -0.0418,
    5e-3,
    0.0233,
    -0.0418,
    5e-3,
    0.0233,
    -0.0418,
    5e-3,
    0.0233,
    -0.0418,
    5e-3,
    0.0233,
    -0.0451,
    0.0114,
    0.0223,
    -0.0451,
    0.0114,
    0.0223,
    -0.0451,
    0.0114,
    0.0223,
    -0.0451,
    0.0114,
    0.0223,
    -0.0389,
    7e-3,
    0.0275,
    -0.0389,
    7e-3,
    0.0275,
    -0.0389,
    7e-3,
    0.0275,
    -0.0389,
    7e-3,
    0.0275,
    -0.0544,
    0.0154,
    0.03,
    -0.0544,
    0.0154,
    0.03,
    -0.0544,
    0.0154,
    0.03,
    -0.0544,
    0.0154,
    0.03,
    -0.0417,
    0.0142,
    0.0273,
    -0.0417,
    0.0142,
    0.0273,
    -0.0417,
    0.0142,
    0.0273,
    -0.0417,
    0.0142,
    0.0273,
    -0.0417,
    0.0142,
    0.0273,
    -0.0498,
    0.0162,
    0.0252,
    -0.0498,
    0.0162,
    0.0252,
    -0.0498,
    0.0162,
    0.0252,
    -0.0498,
    0.0162,
    0.0252,
    -0.0498,
    0.0162,
    0.0252,
    -0.0498,
    0.0162,
    0.0252,
    -0.054,
    0.0127,
    0.0245,
    -0.054,
    0.0127,
    0.0245,
    -0.054,
    0.0127,
    0.0245,
    -0.054,
    0.0127,
    0.0245,
    -0.054,
    0.0127,
    0.0245,
    -0.054,
    0.0127,
    0.0245,
    0.0553,
    -0.0101,
    -0.0118,
    0.0553,
    -0.0101,
    -0.0118,
    0.0553,
    -0.0101,
    -0.0118,
    0.0553,
    -0.0101,
    -0.0118,
    0.0553,
    -0.0101,
    -0.0118,
    0.0553,
    -0.0101,
    -0.0118,
    0.0494,
    -3e-3,
    -69e-4,
    0.0494,
    -3e-3,
    -69e-4,
    0.0494,
    -3e-3,
    -69e-4,
    0.0494,
    -3e-3,
    -69e-4,
    0.0494,
    -3e-3,
    -69e-4,
    0.0494,
    -3e-3,
    -69e-4,
    0.0494,
    -3e-3,
    -69e-4,
    0.0481,
    -57e-4,
    -0.0119,
    0.0481,
    -57e-4,
    -0.0119,
    0.0481,
    -57e-4,
    -0.0119,
    0.0481,
    -57e-4,
    -0.0119,
    0.0583,
    51e-4,
    -49e-4,
    0.0583,
    51e-4,
    -49e-4,
    0.0583,
    51e-4,
    -49e-4,
    0.0583,
    51e-4,
    -49e-4,
    0.0583,
    51e-4,
    -49e-4,
    0.0583,
    51e-4,
    -49e-4,
    0.0583,
    51e-4,
    -49e-4,
    0.0465,
    34e-4,
    -0.0129,
    0.0465,
    34e-4,
    -0.0129,
    0.0465,
    34e-4,
    -0.0129,
    0.0465,
    34e-4,
    -0.0129,
    0.0465,
    34e-4,
    -0.0129,
    0.0593,
    0.0106,
    -84e-4,
    0.0593,
    0.0106,
    -84e-4,
    0.0593,
    0.0106,
    -84e-4,
    0.0593,
    0.0106,
    -84e-4,
    0.0519,
    0.011,
    -0.0106,
    0.0519,
    0.011,
    -0.0106,
    0.0519,
    0.011,
    -0.0106,
    0.0519,
    0.011,
    -0.0106,
    0.0519,
    0.011,
    -0.0106,
    0.0519,
    0.011,
    -0.0106,
    0.0505,
    62e-4,
    -77e-4,
    0.0505,
    62e-4,
    -77e-4,
    0.0505,
    62e-4,
    -77e-4,
    0.0505,
    62e-4,
    -77e-4,
    0.0449,
    -6e-4,
    -0.0457,
    0.0449,
    -6e-4,
    -0.0457,
    0.0449,
    -6e-4,
    -0.0457,
    0.0449,
    -6e-4,
    -0.0457,
    0.0449,
    -6e-4,
    -0.0457,
    0.055,
    -61e-4,
    -0.0545,
    0.055,
    -61e-4,
    -0.0545,
    0.055,
    -61e-4,
    -0.0545,
    0.055,
    -61e-4,
    -0.0545,
    0.055,
    -61e-4,
    -0.0545,
    0.055,
    -61e-4,
    -0.0545,
    0.055,
    -61e-4,
    -0.0545,
    0.047,
    -96e-4,
    -0.0483,
    0.047,
    -96e-4,
    -0.0483,
    0.047,
    -96e-4,
    -0.0483,
    0.047,
    -96e-4,
    -0.0483,
    0.047,
    -96e-4,
    -0.0483,
    0.047,
    -96e-4,
    -0.0483,
    0.0473,
    -46e-4,
    -0.0511,
    0.0473,
    -46e-4,
    -0.0511,
    0.0473,
    -46e-4,
    -0.0511,
    0.0473,
    -46e-4,
    -0.0511,
    0.054,
    -0.0118,
    -0.0509,
    0.054,
    -0.0118,
    -0.0509,
    0.054,
    -0.0118,
    -0.0509,
    0.054,
    -0.0118,
    -0.0509,
    0.0578,
    9e-3,
    -0.0474,
    0.0578,
    9e-3,
    -0.0474,
    0.0578,
    9e-3,
    -0.0474,
    0.0578,
    9e-3,
    -0.0474,
    0.0578,
    9e-3,
    -0.0474,
    0.0495,
    45e-4,
    -0.0519,
    0.0495,
    45e-4,
    -0.0519,
    0.0495,
    45e-4,
    -0.0519,
    0.0495,
    45e-4,
    -0.0519,
    0.0495,
    45e-4,
    -0.0519,
    0.0495,
    45e-4,
    -0.0519,
    0.0495,
    45e-4,
    -0.0519,
    0.0496,
    74e-4,
    -0.0469,
    0.0496,
    74e-4,
    -0.0469,
    0.0496,
    74e-4,
    -0.0469,
    0.0496,
    74e-4,
    -0.0469,
    0.0685,
    -7e-4,
    -0.0138,
    0.0685,
    -7e-4,
    -0.0138,
    0.0685,
    -7e-4,
    -0.0138,
    0.0685,
    -7e-4,
    -0.0138,
    0.0685,
    -7e-4,
    -0.0138,
    0.0575,
    -6e-4,
    -42e-4,
    0.0575,
    -6e-4,
    -42e-4,
    0.0575,
    -6e-4,
    -42e-4,
    0.0575,
    -6e-4,
    -42e-4,
    0.0575,
    -6e-4,
    -42e-4,
    0.0637,
    -86e-4,
    -0.0123,
    0.0637,
    -86e-4,
    -0.0123,
    0.0637,
    -86e-4,
    -0.0123,
    0.0637,
    -86e-4,
    -0.0123,
    0.0638,
    -59e-4,
    -76e-4,
    0.0638,
    -59e-4,
    -76e-4,
    0.0638,
    -59e-4,
    -76e-4,
    0.0638,
    -59e-4,
    -76e-4,
    0.0638,
    -59e-4,
    -76e-4,
    0.0638,
    -59e-4,
    -76e-4,
    0.0562,
    -67e-4,
    -63e-4,
    0.0562,
    -67e-4,
    -63e-4,
    0.0562,
    -67e-4,
    -63e-4,
    0.0562,
    -67e-4,
    -63e-4,
    0.0596,
    0.0126,
    -0.0146,
    0.0596,
    0.0126,
    -0.0146,
    0.0596,
    0.0126,
    -0.0146,
    0.0596,
    0.0126,
    -0.0146,
    0.0663,
    82e-4,
    -0.0108,
    0.0663,
    82e-4,
    -0.0108,
    0.0663,
    82e-4,
    -0.0108,
    0.0663,
    82e-4,
    -0.0108,
    0.0663,
    82e-4,
    -0.0108,
    0.0663,
    82e-4,
    -0.0108,
    0.0661,
    34e-4,
    -81e-4,
    0.0661,
    34e-4,
    -81e-4,
    0.0661,
    34e-4,
    -81e-4,
    0.0661,
    34e-4,
    -81e-4,
    0.0661,
    34e-4,
    -81e-4,
    0.0539,
    -0.0138,
    -0.0446,
    0.0539,
    -0.0138,
    -0.0446,
    0.0539,
    -0.0138,
    -0.0446,
    0.0539,
    -0.0138,
    -0.0446,
    0.0539,
    -0.0138,
    -0.0446,
    0.0617,
    -0.0107,
    -0.0505,
    0.0617,
    -0.0107,
    -0.0505,
    0.0617,
    -0.0107,
    -0.0505,
    0.0617,
    -0.0107,
    -0.0505,
    0.0617,
    -0.0107,
    -0.0505,
    0.0617,
    -0.0107,
    -0.0505,
    0.0621,
    -0.0123,
    -0.0453,
    0.0621,
    -0.0123,
    -0.0453,
    0.0621,
    -0.0123,
    -0.0453,
    0.0621,
    -0.0123,
    -0.0453,
    0.0666,
    -46e-4,
    -0.0466,
    0.0666,
    -46e-4,
    -0.0466,
    0.0666,
    -46e-4,
    -0.0466,
    0.0666,
    -46e-4,
    -0.0466,
    0.0666,
    -46e-4,
    -0.0466,
    0.0559,
    -4e-4,
    -0.055,
    0.0559,
    -4e-4,
    -0.055,
    0.0559,
    -4e-4,
    -0.055,
    0.0559,
    -4e-4,
    -0.055,
    0.0559,
    -4e-4,
    -0.055,
    0.0646,
    39e-4,
    -0.0505,
    0.0646,
    39e-4,
    -0.0505,
    0.0646,
    39e-4,
    -0.0505,
    0.0646,
    39e-4,
    -0.0505,
    0.0646,
    39e-4,
    -0.0505,
    0.0646,
    39e-4,
    -0.0505,
    0.0639,
    -16e-4,
    -0.0522,
    0.0639,
    -16e-4,
    -0.0522,
    0.0639,
    -16e-4,
    -0.0522,
    0.0639,
    -16e-4,
    -0.0522,
    0.0639,
    -16e-4,
    -0.0522,
    0.0571,
    55e-4,
    -0.053,
    0.0571,
    55e-4,
    -0.053,
    0.0571,
    55e-4,
    -0.053,
    0.0571,
    55e-4,
    -0.053,
    0.0535,
    -0.014,
    -0.0541,
    0.0535,
    -0.014,
    -0.0541,
    0.0535,
    -0.014,
    -0.0541,
    0.0535,
    -0.014,
    -0.0541,
    0.0535,
    -0.014,
    -0.0541,
    0.0484,
    -89e-4,
    -0.0518,
    0.0484,
    -89e-4,
    -0.0518,
    0.0484,
    -89e-4,
    -0.0518,
    0.0484,
    -89e-4,
    -0.0518,
    0.0484,
    -89e-4,
    -0.0518,
    0.0484,
    -89e-4,
    -0.0518,
    0.0484,
    -89e-4,
    -0.0518,
    0.0484,
    -89e-4,
    -0.0518,
    0.056,
    -24e-4,
    -0.0491,
    0.056,
    -24e-4,
    -0.0491,
    0.056,
    -24e-4,
    -0.0491,
    0.056,
    -24e-4,
    -0.0491,
    0.056,
    -24e-4,
    -0.0491,
    0.056,
    -24e-4,
    -0.0491,
    0.056,
    -24e-4,
    -0.0491,
    0.056,
    -24e-4,
    -0.0491,
    0.046,
    -33e-4,
    -0.0567,
    0.046,
    -33e-4,
    -0.0567,
    0.046,
    -33e-4,
    -0.0567,
    0.046,
    -33e-4,
    -0.0567,
    0.0569,
    33e-4,
    -0.0541,
    0.0569,
    33e-4,
    -0.0541,
    0.0569,
    33e-4,
    -0.0541,
    0.0569,
    33e-4,
    -0.0541,
    0.0506,
    32e-4,
    -0.056,
    0.0506,
    32e-4,
    -0.056,
    0.0506,
    32e-4,
    -0.056,
    0.0506,
    32e-4,
    -0.056,
    0.0506,
    32e-4,
    -0.056,
    0.0506,
    32e-4,
    -0.056,
    0.0506,
    32e-4,
    -0.056,
    0.0506,
    32e-4,
    -0.056,
    0.0492,
    -2e-3,
    -0.0515,
    0.0492,
    -2e-3,
    -0.0515,
    0.0492,
    -2e-3,
    -0.0515,
    0.0492,
    -2e-3,
    -0.0515,
    0.0438,
    -94e-4,
    -0.0756,
    0.0438,
    -94e-4,
    -0.0756,
    0.0438,
    -94e-4,
    -0.0756,
    0.0438,
    -94e-4,
    -0.0756,
    0.0438,
    -94e-4,
    -0.0756,
    0.0438,
    -94e-4,
    -0.0756,
    0.0457,
    -0.0171,
    -0.0772,
    0.0457,
    -0.0171,
    -0.0772,
    0.0457,
    -0.0171,
    -0.0772,
    0.0457,
    -0.0171,
    -0.0772,
    0.0457,
    -0.0171,
    -0.0772,
    0.0457,
    -0.0171,
    -0.0772,
    0.0458,
    -0.0118,
    -0.0813,
    0.0458,
    -0.0118,
    -0.0813,
    0.0458,
    -0.0118,
    -0.0813,
    0.0458,
    -0.0118,
    -0.0813,
    0.0511,
    -0.0196,
    -0.0793,
    0.0511,
    -0.0196,
    -0.0793,
    0.0511,
    -0.0196,
    -0.0793,
    0.0511,
    -0.0196,
    -0.0793,
    0.0546,
    -23e-4,
    -0.0792,
    0.0546,
    -23e-4,
    -0.0792,
    0.0546,
    -23e-4,
    -0.0792,
    0.0546,
    -23e-4,
    -0.0792,
    0.0546,
    -23e-4,
    -0.0792,
    0.0546,
    -23e-4,
    -0.0792,
    0.0478,
    -54e-4,
    -0.0813,
    0.0478,
    -54e-4,
    -0.0813,
    0.0478,
    -54e-4,
    -0.0813,
    0.0478,
    -54e-4,
    -0.0813,
    0.0478,
    -54e-4,
    -0.0813,
    0.0478,
    -54e-4,
    -0.0813,
    0.0642,
    -69e-4,
    -0.0577,
    0.0642,
    -69e-4,
    -0.0577,
    0.0642,
    -69e-4,
    -0.0577,
    0.0642,
    -69e-4,
    -0.0577,
    0.0642,
    -69e-4,
    -0.0577,
    0.0601,
    -0.011,
    -0.0521,
    0.0601,
    -0.011,
    -0.0521,
    0.0601,
    -0.011,
    -0.0521,
    0.0601,
    -0.011,
    -0.0521,
    0.0601,
    -0.011,
    -0.0521,
    0.0601,
    -0.011,
    -0.0521,
    0.0622,
    -45e-4,
    -0.0521,
    0.0622,
    -45e-4,
    -0.0521,
    0.0622,
    -45e-4,
    -0.0521,
    0.0622,
    -45e-4,
    -0.0521,
    0.0545,
    -98e-4,
    -0.0495,
    0.0545,
    -98e-4,
    -0.0495,
    0.0545,
    -98e-4,
    -0.0495,
    0.0545,
    -98e-4,
    -0.0495,
    0.0567,
    39e-4,
    -0.0603,
    0.0567,
    39e-4,
    -0.0603,
    0.0567,
    39e-4,
    -0.0603,
    0.0567,
    39e-4,
    -0.0603,
    0.0625,
    8e-4,
    -0.0566,
    0.0625,
    8e-4,
    -0.0566,
    0.0625,
    8e-4,
    -0.0566,
    0.0625,
    8e-4,
    -0.0566,
    0.0625,
    8e-4,
    -0.0566,
    0.0625,
    8e-4,
    -0.0566,
    0.0625,
    8e-4,
    -0.0566,
    0.0625,
    8e-4,
    -0.0566,
    0.0512,
    -0.0202,
    -0.073,
    0.0512,
    -0.0202,
    -0.073,
    0.0512,
    -0.0202,
    -0.073,
    0.0512,
    -0.0202,
    -0.073,
    0.0512,
    -0.0202,
    -0.073,
    0.0574,
    -0.0195,
    -0.0774,
    0.0574,
    -0.0195,
    -0.0774,
    0.0574,
    -0.0195,
    -0.0774,
    0.0574,
    -0.0195,
    -0.0774,
    0.0574,
    -0.0195,
    -0.0774,
    0.0574,
    -0.0195,
    -0.0774,
    0.0574,
    -0.0195,
    -0.0774,
    0.0574,
    -0.0195,
    -0.0774,
    0.0588,
    -0.0144,
    -0.0819,
    0.0588,
    -0.0144,
    -0.0819,
    0.0588,
    -0.0144,
    -0.0819,
    0.0588,
    -0.0144,
    -0.0819,
    0.062,
    -0.013,
    -0.0766,
    0.062,
    -0.013,
    -0.0766,
    0.062,
    -0.013,
    -0.0766,
    0.062,
    -0.013,
    -0.0766,
    0.062,
    -0.013,
    -0.0766,
    0.052,
    -0.014,
    -0.0843,
    0.052,
    -0.014,
    -0.0843,
    0.052,
    -0.014,
    -0.0843,
    0.052,
    -0.014,
    -0.0843,
    0.052,
    -0.014,
    -0.0843,
    0.052,
    -0.014,
    -0.0843,
    0.052,
    -0.014,
    -0.0843,
    0.052,
    -0.014,
    -0.0843,
    0.0594,
    -77e-4,
    -0.0819,
    0.0594,
    -77e-4,
    -0.0819,
    0.0594,
    -77e-4,
    -0.0819,
    0.0594,
    -77e-4,
    -0.0819,
    0.0594,
    -77e-4,
    -0.0819,
    0.0594,
    -77e-4,
    -0.0819,
    0.0535,
    -66e-4,
    -0.0839,
    0.0535,
    -66e-4,
    -0.0839,
    0.0535,
    -66e-4,
    -0.0839,
    0.0535,
    -66e-4,
    -0.0839,
    -0.05,
    -74e-4,
    0.0193,
    -0.05,
    -74e-4,
    0.0193,
    -0.05,
    -74e-4,
    0.0193,
    -0.05,
    -74e-4,
    0.0193,
    -0.0568,
    19e-4,
    0.0259,
    -0.0568,
    19e-4,
    0.0259,
    -0.0568,
    19e-4,
    0.0259,
    -0.0568,
    19e-4,
    0.0259,
    -0.0568,
    19e-4,
    0.0259,
    -0.0568,
    19e-4,
    0.0259,
    -0.0513,
    -39e-4,
    0.0243,
    -0.0513,
    -39e-4,
    0.0243,
    -0.0513,
    -39e-4,
    0.0243,
    -0.0513,
    -39e-4,
    0.0243,
    -0.0513,
    -39e-4,
    0.0243,
    -0.0513,
    -39e-4,
    0.0243,
    -0.0555,
    -79e-4,
    0.0237,
    -0.0555,
    -79e-4,
    0.0237,
    -0.0555,
    -79e-4,
    0.0237,
    -0.0555,
    -79e-4,
    0.0237,
    -0.0555,
    -79e-4,
    0.0237,
    -0.0555,
    -79e-4,
    0.0237,
    -0.0651,
    57e-4,
    0.0165,
    -0.0651,
    57e-4,
    0.0165,
    -0.0651,
    57e-4,
    0.0165,
    -0.0651,
    57e-4,
    0.0165,
    -0.0632,
    -67e-4,
    0.0205,
    -0.0632,
    -67e-4,
    0.0205,
    -0.0632,
    -67e-4,
    0.0205,
    -0.0632,
    -67e-4,
    0.0205,
    -0.0626,
    59e-4,
    0.0221,
    -0.0626,
    59e-4,
    0.0221,
    -0.0626,
    59e-4,
    0.0221,
    -0.0626,
    59e-4,
    0.0221,
    -0.0626,
    59e-4,
    0.0221,
    -0.0626,
    59e-4,
    0.0221,
    -0.0659,
    15e-4,
    0.0216,
    -0.0659,
    15e-4,
    0.0216,
    -0.0659,
    15e-4,
    0.0216,
    -0.0659,
    15e-4,
    0.0216,
    -0.0659,
    15e-4,
    0.0216,
    -0.0659,
    15e-4,
    0.0216,
    -0.0608,
    -3e-3,
    0.0252,
    -0.0608,
    -3e-3,
    0.0252,
    -0.0608,
    -3e-3,
    0.0252,
    -0.0608,
    -3e-3,
    0.0252,
    -0.0528,
    -0.0165,
    -71e-4,
    -0.0528,
    -0.0165,
    -71e-4,
    -0.0528,
    -0.0165,
    -71e-4,
    -0.0528,
    -0.0165,
    -71e-4,
    -0.0528,
    -0.0165,
    -71e-4,
    -0.0659,
    -0.0159,
    -58e-4,
    -0.0659,
    -0.0159,
    -58e-4,
    -0.0659,
    -0.0159,
    -58e-4,
    -0.0659,
    -0.0159,
    -58e-4,
    -0.0659,
    -0.0159,
    -58e-4,
    -0.0586,
    -0.0191,
    -91e-4,
    -0.0586,
    -0.0191,
    -91e-4,
    -0.0586,
    -0.0191,
    -91e-4,
    -0.0586,
    -0.0191,
    -91e-4,
    -0.0586,
    -0.0191,
    -91e-4,
    -0.0586,
    -0.0191,
    -91e-4,
    -0.0648,
    -0.0158,
    -0.0122,
    -0.0648,
    -0.0158,
    -0.0122,
    -0.0648,
    -0.0158,
    -0.0122,
    -0.0648,
    -0.0158,
    -0.0122,
    -0.0553,
    -0.0166,
    -0.0127,
    -0.0553,
    -0.0166,
    -0.0127,
    -0.0553,
    -0.0166,
    -0.0127,
    -0.0553,
    -0.0166,
    -0.0127,
    -0.0553,
    -0.0166,
    -0.0127,
    -0.0679,
    -34e-4,
    -0.01,
    -0.0679,
    -34e-4,
    -0.01,
    -0.0679,
    -34e-4,
    -0.01,
    -0.0679,
    -34e-4,
    -0.01,
    -0.0612,
    -0.0126,
    -0.0166,
    -0.0612,
    -0.0126,
    -0.0166,
    -0.0612,
    -0.0126,
    -0.0166,
    -0.0612,
    -0.0126,
    -0.0166,
    -0.0612,
    -0.0126,
    -0.0166,
    -0.0612,
    -0.0126,
    -0.0166,
    -0.0685,
    -92e-4,
    -0.0132,
    -0.0685,
    -92e-4,
    -0.0132,
    -0.0685,
    -92e-4,
    -0.0132,
    -0.0685,
    -92e-4,
    -0.0132,
    -0.0685,
    -92e-4,
    -0.0132,
    -0.0685,
    -92e-4,
    -0.0132,
    -0.0685,
    -92e-4,
    -0.0132,
    -0.0697,
    -89e-4,
    -79e-4,
    -0.0697,
    -89e-4,
    -79e-4,
    -0.0697,
    -89e-4,
    -79e-4,
    -0.0697,
    -89e-4,
    -79e-4,
    -0.0435,
    -5e-4,
    0.0163,
    -0.0435,
    -5e-4,
    0.0163,
    -0.0435,
    -5e-4,
    0.0163,
    -0.0435,
    -5e-4,
    0.0163,
    -0.0435,
    -5e-4,
    0.0163,
    -0.0456,
    0.0121,
    0.0121,
    -0.0456,
    0.0121,
    0.0121,
    -0.0456,
    0.0121,
    0.0121,
    -0.0456,
    0.0121,
    0.0121,
    -0.0456,
    0.0121,
    0.0121,
    -0.0417,
    5e-3,
    0.0142,
    -0.0417,
    5e-3,
    0.0142,
    -0.0417,
    5e-3,
    0.0142,
    -0.0417,
    5e-3,
    0.0142,
    -0.043,
    56e-4,
    0.0195,
    -0.043,
    56e-4,
    0.0195,
    -0.043,
    56e-4,
    0.0195,
    -0.043,
    56e-4,
    0.0195,
    -0.043,
    56e-4,
    0.0195,
    -0.043,
    56e-4,
    0.0195,
    -0.0466,
    0.0119,
    0.0185,
    -0.0466,
    0.0119,
    0.0185,
    -0.0466,
    0.0119,
    0.0185,
    -0.0466,
    0.0119,
    0.0185,
    -0.0586,
    0.0125,
    0.0134,
    -0.0586,
    0.0125,
    0.0134,
    -0.0586,
    0.0125,
    0.0134,
    -0.0586,
    0.0125,
    0.0134,
    -0.0586,
    0.0125,
    0.0134,
    -0.0503,
    86e-4,
    0.0231,
    -0.0503,
    86e-4,
    0.0231,
    -0.0503,
    86e-4,
    0.0231,
    -0.0503,
    86e-4,
    0.0231,
    -0.0503,
    86e-4,
    0.0231,
    -0.0503,
    86e-4,
    0.0231,
    -0.0503,
    86e-4,
    0.0231,
    -0.0561,
    0.0127,
    0.0191,
    -0.0561,
    0.0127,
    0.0191,
    -0.0561,
    0.0127,
    0.0191,
    -0.0561,
    0.0127,
    0.0191,
    -0.0526,
    0.0151,
    0.0156,
    -0.0526,
    0.0151,
    0.0156,
    -0.0526,
    0.0151,
    0.0156,
    -0.0526,
    0.0151,
    0.0156,
    -0.0526,
    0.0151,
    0.0156,
    -0.0526,
    0.0151,
    0.0156,
    -0.0463,
    -96e-4,
    -0.0101,
    -0.0463,
    -96e-4,
    -0.0101,
    -0.0463,
    -96e-4,
    -0.0101,
    -0.0463,
    -96e-4,
    -0.0101,
    -0.0547,
    -6e-3,
    -0.0196,
    -0.0547,
    -6e-3,
    -0.0196,
    -0.0547,
    -6e-3,
    -0.0196,
    -0.0547,
    -6e-3,
    -0.0196,
    -0.0547,
    -6e-3,
    -0.0196,
    -0.0468,
    -7e-3,
    -0.0163,
    -0.0468,
    -7e-3,
    -0.0163,
    -0.0468,
    -7e-3,
    -0.0163,
    -0.0468,
    -7e-3,
    -0.0163,
    -0.0468,
    -7e-3,
    -0.0163,
    -0.0468,
    -7e-3,
    -0.0163,
    -0.0468,
    -7e-3,
    -0.0163,
    -0.0507,
    -9e-4,
    -0.0189,
    -0.0507,
    -9e-4,
    -0.0189,
    -0.0507,
    -9e-4,
    -0.0189,
    -0.0507,
    -9e-4,
    -0.0189,
    -0.0446,
    -41e-4,
    -0.0122,
    -0.0446,
    -41e-4,
    -0.0122,
    -0.0446,
    -41e-4,
    -0.0122,
    -0.0446,
    -41e-4,
    -0.0122,
    -0.0614,
    34e-4,
    -0.013,
    -0.0614,
    34e-4,
    -0.013,
    -0.0614,
    34e-4,
    -0.013,
    -0.0614,
    34e-4,
    -0.013,
    -0.0614,
    34e-4,
    -0.013,
    -0.0481,
    27e-4,
    -0.0141,
    -0.0481,
    27e-4,
    -0.0141,
    -0.0481,
    27e-4,
    -0.0141,
    -0.0481,
    27e-4,
    -0.0141,
    -0.0481,
    27e-4,
    -0.0141,
    -0.0481,
    27e-4,
    -0.0141,
    -0.0559,
    57e-4,
    -0.0144,
    -0.0559,
    57e-4,
    -0.0144,
    -0.0559,
    57e-4,
    -0.0144,
    -0.0559,
    57e-4,
    -0.0144,
    -0.0574,
    2e-3,
    -0.0186,
    -0.0574,
    2e-3,
    -0.0186,
    -0.0574,
    2e-3,
    -0.0186,
    -0.0574,
    2e-3,
    -0.0186,
    -0.0574,
    2e-3,
    -0.0186,
    -0.0574,
    2e-3,
    -0.0186,
    -0.0574,
    2e-3,
    -0.0186
  ]);
  var normal_arr4 = Float32Array.from([
    -0.5035,
    -0.7559,
    0.4184,
    -0.2333,
    -0.6293,
    0.7414,
    -0.0505,
    -0.9212,
    0.3859,
    0.0289,
    -0.6847,
    0.7283,
    -0.2485,
    51e-4,
    0.9686,
    -0.2427,
    -13e-4,
    0.9701,
    -0.2421,
    0.3861,
    0.8901,
    0.1313,
    -0.1389,
    0.9816,
    0.1808,
    0.3716,
    0.9106,
    0.1808,
    0.3716,
    0.9106,
    0.1818,
    -0.0476,
    0.9822,
    -0.9822,
    0.1158,
    0.1478,
    -0.8899,
    -0.3257,
    0.3194,
    -0.8192,
    0.2592,
    0.5115,
    -0.8037,
    77e-4,
    0.595,
    -0.2485,
    51e-4,
    0.9686,
    -0.2333,
    -0.6293,
    0.7414,
    0.0289,
    -0.6847,
    0.7283,
    0.0931,
    -0.6243,
    0.7756,
    0.1818,
    -0.0476,
    0.9822,
    -0.8899,
    -0.3257,
    0.3194,
    -0.8037,
    77e-4,
    0.595,
    -0.5035,
    -0.7559,
    0.4184,
    -0.2485,
    51e-4,
    0.9686,
    -0.2427,
    -13e-4,
    0.9701,
    -0.2333,
    -0.6293,
    0.7414,
    -0.8192,
    0.2592,
    0.5115,
    -0.8037,
    77e-4,
    0.595,
    -0.7617,
    0.3483,
    0.5464,
    -0.3206,
    0.4462,
    0.8355,
    -0.2427,
    -13e-4,
    0.9701,
    -0.2421,
    0.3861,
    0.8901,
    -0.3206,
    0.4462,
    0.8355,
    -0.2421,
    0.3861,
    0.8901,
    -0.0823,
    0.7245,
    0.6844,
    0.1808,
    0.3716,
    0.9106,
    0.1855,
    0.7196,
    0.6692,
    0.1855,
    0.7196,
    0.6692,
    -0.3607,
    0.8864,
    -0.2901,
    -0.2695,
    0.9596,
    0.081,
    -0.2623,
    0.9612,
    0.0858,
    0.0505,
    0.9212,
    -0.3859,
    0.1208,
    0.9923,
    0.0257,
    -0.9822,
    0.1158,
    0.1478,
    -0.8732,
    0.4867,
    -0.0252,
    -0.8192,
    0.2592,
    0.5115,
    -0.7949,
    0.5673,
    0.2152,
    -0.7617,
    0.3483,
    0.5464,
    -0.2695,
    0.9596,
    0.081,
    -0.0823,
    0.7245,
    0.6844,
    0.1208,
    0.9923,
    0.0257,
    0.1208,
    0.9923,
    0.0257,
    0.1855,
    0.7196,
    0.6692,
    -0.7949,
    0.5673,
    0.2152,
    -0.7617,
    0.3483,
    0.5464,
    -0.3206,
    0.4462,
    0.8355,
    -0.2695,
    0.9596,
    0.081,
    -0.2623,
    0.9612,
    0.0858,
    -0.0823,
    0.7245,
    0.6844,
    -0.8732,
    0.4867,
    -0.0252,
    -0.7949,
    0.5673,
    0.2152,
    -0.3607,
    0.8864,
    -0.2901,
    -0.2623,
    0.9612,
    0.0858,
    -0.5035,
    -0.7559,
    0.4184,
    -0.5033,
    -0.8634,
    0.0355,
    -0.4872,
    -0.8732,
    0.0151,
    -0.1208,
    -0.9923,
    -0.0257,
    -0.0505,
    -0.9212,
    0.3859,
    -0.9822,
    0.1158,
    0.1478,
    -0.9689,
    -0.0485,
    -0.2425,
    -0.9487,
    -0.1372,
    -0.2849,
    -0.9299,
    -0.366,
    0.0379,
    -0.8899,
    -0.3257,
    0.3194,
    -0.6484,
    -0.2637,
    -0.7142,
    -0.4167,
    -0.6705,
    -0.6138,
    -0.1855,
    -0.7196,
    -0.6692,
    -0.1808,
    -0.3716,
    -0.9106,
    -0.1808,
    -0.3716,
    -0.9106,
    -0.9299,
    -0.366,
    0.0379,
    -0.8899,
    -0.3257,
    0.3194,
    -0.5035,
    -0.7559,
    0.4184,
    -0.4872,
    -0.8732,
    0.0151,
    -0.9487,
    -0.1372,
    -0.2849,
    -0.9299,
    -0.366,
    0.0379,
    -0.6484,
    -0.2637,
    -0.7142,
    -0.5731,
    -0.3383,
    -0.7464,
    -0.5033,
    -0.8634,
    0.0355,
    -0.4872,
    -0.8732,
    0.0151,
    -0.4167,
    -0.6705,
    -0.6138,
    -0.5033,
    -0.8634,
    0.0355,
    -0.4167,
    -0.6705,
    -0.6138,
    -0.1855,
    -0.7196,
    -0.6692,
    -0.1277,
    -0.7879,
    -0.6024,
    -0.1208,
    -0.9923,
    -0.0257,
    -0.0807,
    -0.9884,
    -0.1285,
    -0.3934,
    0.7723,
    -0.4989,
    -0.3607,
    0.8864,
    -0.2901,
    -0.0467,
    0.6118,
    -0.7896,
    0.0505,
    0.9212,
    -0.3859,
    -0.6484,
    -0.2637,
    -0.7142,
    -0.5731,
    -0.3383,
    -0.7464,
    -0.536,
    -0.0292,
    -0.8437,
    -0.1808,
    -0.3716,
    -0.9106,
    -0.1807,
    0.135,
    -0.9742,
    -0.1437,
    0.0431,
    -0.9887,
    -0.9822,
    0.1158,
    0.1478,
    -0.9689,
    -0.0485,
    -0.2425,
    -0.8732,
    0.4867,
    -0.0252,
    -0.8728,
    0.2982,
    -0.3863,
    -0.8688,
    0.3221,
    -0.376,
    -0.8728,
    0.2982,
    -0.3863,
    -0.8688,
    0.3221,
    -0.376,
    -0.536,
    -0.0292,
    -0.8437,
    -0.3934,
    0.7723,
    -0.4989,
    -0.1807,
    0.135,
    -0.9742,
    -0.0671,
    0.6887,
    -0.722,
    -0.0467,
    0.6118,
    -0.7896,
    -0.9689,
    -0.0485,
    -0.2425,
    -0.9487,
    -0.1372,
    -0.2849,
    -0.8688,
    0.3221,
    -0.376,
    -0.5731,
    -0.3383,
    -0.7464,
    -0.536,
    -0.0292,
    -0.8437,
    -0.8732,
    0.4867,
    -0.0252,
    -0.8728,
    0.2982,
    -0.3863,
    -0.3934,
    0.7723,
    -0.4989,
    -0.3607,
    0.8864,
    -0.2901,
    -0.0505,
    -0.9212,
    0.3859,
    0.0289,
    -0.6847,
    0.7283,
    0.0931,
    -0.6243,
    0.7756,
    0.3607,
    -0.8864,
    0.2901,
    0.3962,
    -0.7522,
    0.5265,
    0.8684,
    -0.3229,
    0.3763,
    0.873,
    -0.2987,
    0.3855,
    0.8732,
    -0.4867,
    0.0252,
    0.9689,
    0.0485,
    0.2425,
    0.9822,
    -0.1158,
    -0.1478,
    0.1313,
    -0.1389,
    0.9816,
    0.1808,
    0.3716,
    0.9106,
    0.5427,
    0.0623,
    0.8376,
    0.5731,
    0.3377,
    0.7467,
    0.6478,
    0.2639,
    0.7146,
    0.3607,
    -0.8864,
    0.2901,
    0.3962,
    -0.7522,
    0.5265,
    0.873,
    -0.2987,
    0.3855,
    0.8732,
    -0.4867,
    0.0252,
    0.0931,
    -0.6243,
    0.7756,
    0.1313,
    -0.1389,
    0.9816,
    0.1818,
    -0.0476,
    0.9822,
    0.3962,
    -0.7522,
    0.5265,
    0.5427,
    0.0623,
    0.8376,
    0.8684,
    -0.3229,
    0.3763,
    0.873,
    -0.2987,
    0.3855,
    0.5427,
    0.0623,
    0.8376,
    0.5731,
    0.3377,
    0.7467,
    0.8684,
    -0.3229,
    0.3763,
    0.9483,
    0.1385,
    0.2855,
    0.9689,
    0.0485,
    0.2425,
    0.0505,
    0.9212,
    -0.3859,
    0.1208,
    0.9923,
    0.0257,
    0.1208,
    0.9923,
    0.0257,
    0.4526,
    0.7906,
    -0.4125,
    0.4872,
    0.8732,
    -0.016,
    0.5025,
    0.8638,
    -0.0353,
    0.1808,
    0.3716,
    0.9106,
    0.1808,
    0.3716,
    0.9106,
    0.1855,
    0.7196,
    0.6692,
    0.4144,
    0.6712,
    0.6146,
    0.6478,
    0.2639,
    0.7146,
    0.915,
    0.276,
    -0.2943,
    0.9297,
    0.3665,
    -0.0359,
    0.9483,
    0.1385,
    0.2855,
    0.9689,
    0.0485,
    0.2425,
    0.9822,
    -0.1158,
    -0.1478,
    0.1208,
    0.9923,
    0.0257,
    0.1855,
    0.7196,
    0.6692,
    0.1855,
    0.7196,
    0.6692,
    0.4144,
    0.6712,
    0.6146,
    0.5025,
    0.8638,
    -0.0353,
    0.4144,
    0.6712,
    0.6146,
    0.4872,
    0.8732,
    -0.016,
    0.5025,
    0.8638,
    -0.0353,
    0.5731,
    0.3377,
    0.7467,
    0.6478,
    0.2639,
    0.7146,
    0.9297,
    0.3665,
    -0.0359,
    0.9483,
    0.1385,
    0.2855,
    0.4526,
    0.7906,
    -0.4125,
    0.4872,
    0.8732,
    -0.016,
    0.915,
    0.276,
    -0.2943,
    0.9297,
    0.3665,
    -0.0359,
    -0.1208,
    -0.9923,
    -0.0257,
    -0.0807,
    -0.9884,
    -0.1285,
    -0.0505,
    -0.9212,
    0.3859,
    0.3004,
    -0.953,
    0.0403,
    0.3607,
    -0.8864,
    0.2901,
    -0.1855,
    -0.7196,
    -0.6692,
    -0.1808,
    -0.3716,
    -0.9106,
    -0.1277,
    -0.7879,
    -0.6024,
    0.2199,
    -0.6171,
    -0.7555,
    0.2421,
    -0.3861,
    -0.8901,
    0.7347,
    -0.5927,
    -0.3299,
    0.7356,
    -0.5961,
    -0.3219,
    0.8192,
    -0.2592,
    -0.5115,
    0.8732,
    -0.4867,
    0.0252,
    0.9822,
    -0.1158,
    -0.1478,
    -0.1277,
    -0.7879,
    -0.6024,
    -0.0807,
    -0.9884,
    -0.1285,
    0.2199,
    -0.6171,
    -0.7555,
    0.3004,
    -0.953,
    0.0403,
    0.7347,
    -0.5927,
    -0.3299,
    0.7356,
    -0.5961,
    -0.3219,
    0.2199,
    -0.6171,
    -0.7555,
    0.2421,
    -0.3861,
    -0.8901,
    0.328,
    -0.3128,
    -0.8914,
    0.7356,
    -0.5961,
    -0.3219,
    0.7689,
    -0.2165,
    -0.6015,
    0.8192,
    -0.2592,
    -0.5115,
    0.3004,
    -0.953,
    0.0403,
    0.3607,
    -0.8864,
    0.2901,
    0.7347,
    -0.5927,
    -0.3299,
    0.8732,
    -0.4867,
    0.0252,
    -0.0671,
    0.6887,
    -0.722,
    -0.0467,
    0.6118,
    -0.7896,
    0.0505,
    0.9212,
    -0.3859,
    0.3471,
    0.5846,
    -0.7333,
    0.3543,
    0.5862,
    -0.7286,
    0.4526,
    0.7906,
    -0.4125,
    0.7689,
    -0.2165,
    -0.6015,
    0.8192,
    -0.2592,
    -0.5115,
    0.8352,
    0.1685,
    -0.5235,
    0.915,
    0.276,
    -0.2943,
    0.9822,
    -0.1158,
    -0.1478,
    -0.1808,
    -0.3716,
    -0.9106,
    -0.1808,
    -0.3716,
    -0.9106,
    -0.1437,
    0.0431,
    -0.9887,
    0.1226,
    0.0108,
    -0.9924,
    0.2421,
    -0.3861,
    -0.8901,
    0.328,
    -0.3128,
    -0.8914,
    0.3471,
    0.5846,
    -0.7333,
    0.4526,
    0.7906,
    -0.4125,
    0.8352,
    0.1685,
    -0.5235,
    0.915,
    0.276,
    -0.2943,
    0.1226,
    0.0108,
    -0.9924,
    0.328,
    -0.3128,
    -0.8914,
    0.3471,
    0.5846,
    -0.7333,
    0.3543,
    0.5862,
    -0.7286,
    0.7689,
    -0.2165,
    -0.6015,
    0.8352,
    0.1685,
    -0.5235,
    -0.1807,
    0.135,
    -0.9742,
    -0.1437,
    0.0431,
    -0.9887,
    -0.0671,
    0.6887,
    -0.722,
    0.1226,
    0.0108,
    -0.9924,
    0.3543,
    0.5862,
    -0.7286,
    -0.6257,
    -0.7792,
    -0.0366,
    -0.5471,
    -0.8078,
    0.2192,
    -0.1933,
    -0.9756,
    -0.1043,
    -0.157,
    -0.9153,
    0.3709,
    -0.387,
    -0.2935,
    0.8741,
    -0.2837,
    0.1902,
    0.9399,
    -0.0582,
    -0.5676,
    0.8213,
    0.1382,
    0.376,
    0.9163,
    -0.8652,
    -0.2636,
    0.4265,
    -0.8611,
    -0.2517,
    0.4417,
    -0.5471,
    -0.8078,
    0.2192,
    -0.387,
    -0.2935,
    0.8741,
    -0.157,
    -0.9153,
    0.3709,
    -0.0582,
    -0.5676,
    0.8213,
    -0.9689,
    -0.239,
    0.0634,
    -0.8611,
    -0.2517,
    0.4417,
    -0.6257,
    -0.7792,
    -0.0366,
    -0.5471,
    -0.8078,
    0.2192,
    -0.2875,
    0.942,
    0.1733,
    -0.1982,
    0.8804,
    0.4309,
    0.1921,
    0.7639,
    0.6161,
    0.1949,
    0.9708,
    0.1396,
    -0.9689,
    -0.239,
    0.0634,
    -0.8652,
    -0.2636,
    0.4265,
    -0.8611,
    -0.2517,
    0.4417,
    -0.7885,
    0.5928,
    0.1636,
    -0.7082,
    0.4585,
    0.5369,
    -0.7031,
    0.4973,
    0.5082,
    -0.7082,
    0.4585,
    0.5369,
    -0.7031,
    0.4973,
    0.5082,
    -0.2837,
    0.1902,
    0.9399,
    -0.1982,
    0.8804,
    0.4309,
    0.1382,
    0.376,
    0.9163,
    0.1921,
    0.7639,
    0.6161,
    -0.7885,
    0.5928,
    0.1636,
    -0.7082,
    0.4585,
    0.5369,
    -0.2875,
    0.942,
    0.1733,
    -0.1982,
    0.8804,
    0.4309,
    -0.8652,
    -0.2636,
    0.4265,
    -0.7031,
    0.4973,
    0.5082,
    -0.387,
    -0.2935,
    0.8741,
    -0.2837,
    0.1902,
    0.9399,
    -0.6257,
    -0.7792,
    -0.0366,
    -0.4536,
    -0.7671,
    -0.4537,
    -0.1934,
    -0.8407,
    -0.5059,
    -0.1933,
    -0.9756,
    -0.1043,
    -0.9689,
    -0.239,
    0.0634,
    -0.9471,
    -67e-4,
    -0.3209,
    -0.8508,
    0.443,
    -0.2826,
    -0.7885,
    0.5928,
    0.1636,
    -0.9689,
    -0.239,
    0.0634,
    -0.9471,
    -67e-4,
    -0.3209,
    -0.6257,
    -0.7792,
    -0.0366,
    -0.5052,
    -0.16,
    -0.848,
    -0.5049,
    -0.1604,
    -0.8481,
    -0.4536,
    -0.7671,
    -0.4537,
    -0.9471,
    -67e-4,
    -0.3209,
    -0.8508,
    0.443,
    -0.2826,
    -0.5049,
    -0.1604,
    -0.8481,
    -0.3781,
    0.4974,
    -0.7808,
    -0.5052,
    -0.16,
    -0.848,
    -0.4536,
    -0.7671,
    -0.4537,
    -0.1934,
    -0.8407,
    -0.5059,
    -0.1148,
    -0.2487,
    -0.9618,
    -0.2875,
    0.942,
    0.1733,
    -0.115,
    0.9619,
    -0.2479,
    0.1554,
    0.9451,
    -0.2874,
    0.1949,
    0.9708,
    0.1396,
    -0.5052,
    -0.16,
    -0.848,
    -0.5049,
    -0.1604,
    -0.8481,
    -0.3781,
    0.4974,
    -0.7808,
    -0.3683,
    0.503,
    -0.7819,
    -0.1148,
    -0.2487,
    -0.9618,
    0.0239,
    0.4694,
    -0.8826,
    -0.3683,
    0.503,
    -0.7819,
    -0.115,
    0.9619,
    -0.2479,
    0.0239,
    0.4694,
    -0.8826,
    0.1554,
    0.9451,
    -0.2874,
    -0.8508,
    0.443,
    -0.2826,
    -0.7885,
    0.5928,
    0.1636,
    -0.3781,
    0.4974,
    -0.7808,
    -0.3683,
    0.503,
    -0.7819,
    -0.2875,
    0.942,
    0.1733,
    -0.115,
    0.9619,
    -0.2479,
    -0.1933,
    -0.9756,
    -0.1043,
    -0.157,
    -0.9153,
    0.3709,
    0.0772,
    -0.9513,
    0.2984,
    0.3305,
    -0.9391,
    -0.0941,
    0.7762,
    -0.6281,
    -0.0542,
    0.8047,
    -0.4842,
    0.3434,
    0.8905,
    0.1346,
    0.4346,
    0.8967,
    0.1637,
    0.4113,
    0.9673,
    0.2477,
    0.0545,
    0.0772,
    -0.9513,
    0.2984,
    0.309,
    -0.5658,
    0.7644,
    0.3305,
    -0.9391,
    -0.0941,
    0.3463,
    -0.5405,
    0.7667,
    0.7762,
    -0.6281,
    -0.0542,
    0.8047,
    -0.4842,
    0.3434,
    0.309,
    -0.5658,
    0.7644,
    0.4653,
    0.0691,
    0.8825,
    0.8047,
    -0.4842,
    0.3434,
    0.8967,
    0.1637,
    0.4113,
    -0.157,
    -0.9153,
    0.3709,
    -0.0582,
    -0.5676,
    0.8213,
    0.0772,
    -0.9513,
    0.2984,
    0.3463,
    -0.5405,
    0.7667,
    0.1921,
    0.7639,
    0.6161,
    0.1949,
    0.9708,
    0.1396,
    0.5752,
    0.7361,
    0.3568,
    0.6346,
    0.7634,
    0.1206,
    -0.0582,
    -0.5676,
    0.8213,
    0.1382,
    0.376,
    0.9163,
    0.309,
    -0.5658,
    0.7644,
    0.3463,
    -0.5405,
    0.7667,
    0.4653,
    0.0691,
    0.8825,
    0.1382,
    0.376,
    0.9163,
    0.1921,
    0.7639,
    0.6161,
    0.4653,
    0.0691,
    0.8825,
    0.5752,
    0.7361,
    0.3568,
    0.8905,
    0.1346,
    0.4346,
    0.8967,
    0.1637,
    0.4113,
    0.5752,
    0.7361,
    0.3568,
    0.6346,
    0.7634,
    0.1206,
    0.8905,
    0.1346,
    0.4346,
    0.9673,
    0.2477,
    0.0545,
    -0.1934,
    -0.8407,
    -0.5059,
    -0.1933,
    -0.9756,
    -0.1043,
    0.08,
    -0.8661,
    -0.4934,
    0.3305,
    -0.9391,
    -0.0941,
    -0.1148,
    -0.2487,
    -0.9618,
    0.0239,
    0.4694,
    -0.8826,
    0.2862,
    -0.3077,
    -0.9074,
    0.2915,
    -0.305,
    -0.9066,
    0.4157,
    0.3678,
    -0.8318,
    0.4306,
    0.3503,
    -0.8318,
    -0.1934,
    -0.8407,
    -0.5059,
    -0.1148,
    -0.2487,
    -0.9618,
    0.08,
    -0.8661,
    -0.4934,
    0.2915,
    -0.305,
    -0.9066,
    0.08,
    -0.8661,
    -0.4934,
    0.2862,
    -0.3077,
    -0.9074,
    0.2915,
    -0.305,
    -0.9066,
    0.3305,
    -0.9391,
    -0.0941,
    0.7762,
    -0.6281,
    -0.0542,
    0.8291,
    -0.3428,
    -0.4418,
    0.2862,
    -0.3077,
    -0.9074,
    0.4306,
    0.3503,
    -0.8318,
    0.8291,
    -0.3428,
    -0.4418,
    0.9155,
    0.1134,
    -0.3861,
    0.1554,
    0.9451,
    -0.2874,
    0.1949,
    0.9708,
    0.1396,
    0.4171,
    0.866,
    -0.2759,
    0.6346,
    0.7634,
    0.1206,
    0.7762,
    -0.6281,
    -0.0542,
    0.8291,
    -0.3428,
    -0.4418,
    0.9155,
    0.1134,
    -0.3861,
    0.9673,
    0.2477,
    0.0545,
    0.4157,
    0.3678,
    -0.8318,
    0.4171,
    0.866,
    -0.2759,
    0.4306,
    0.3503,
    -0.8318,
    0.6346,
    0.7634,
    0.1206,
    0.9155,
    0.1134,
    -0.3861,
    0.9673,
    0.2477,
    0.0545,
    0.0239,
    0.4694,
    -0.8826,
    0.1554,
    0.9451,
    -0.2874,
    0.4157,
    0.3678,
    -0.8318,
    0.4171,
    0.866,
    -0.2759,
    -0.5292,
    -0.8356,
    0.1474,
    -0.4151,
    -0.7504,
    0.5144,
    -0.3938,
    -0.751,
    0.53,
    -0.0898,
    -0.9903,
    0.1055,
    -0.0238,
    -0.8632,
    0.5042,
    -0.3719,
    0.1317,
    0.9189,
    -0.1475,
    -0.2919,
    0.945,
    0.0903,
    -0.3259,
    0.9411,
    0.1401,
    0.0924,
    0.9858,
    0.1401,
    0.0924,
    0.9858,
    -0.9861,
    0.1034,
    0.1304,
    -0.9164,
    -0.3681,
    0.1573,
    -0.8616,
    -0.279,
    0.424,
    -0.8396,
    0.1323,
    0.5268,
    -0.8018,
    0.0632,
    0.5942,
    -0.4151,
    -0.7504,
    0.5144,
    -0.1475,
    -0.2919,
    0.945,
    -0.0238,
    -0.8632,
    0.5042,
    0.0506,
    -0.8175,
    0.5737,
    0.0903,
    -0.3259,
    0.9411,
    0.1348,
    -0.4175,
    0.8986,
    -0.8616,
    -0.279,
    0.424,
    -0.8018,
    0.0632,
    0.5942,
    -0.4151,
    -0.7504,
    0.5144,
    -0.3938,
    -0.751,
    0.53,
    -0.3719,
    0.1317,
    0.9189,
    -0.2854,
    0.0699,
    0.9558,
    -0.1475,
    -0.2919,
    0.945,
    -0.9164,
    -0.3681,
    0.1573,
    -0.8616,
    -0.279,
    0.424,
    -0.5292,
    -0.8356,
    0.1474,
    -0.3938,
    -0.751,
    0.53,
    -0.3719,
    0.1317,
    0.9189,
    -0.2854,
    0.0699,
    0.9558,
    -0.2472,
    0.383,
    0.8901,
    0.1078,
    0.5775,
    0.8092,
    0.1401,
    0.0924,
    0.9858,
    0.1647,
    0.4941,
    0.8537,
    -0.3784,
    0.9248,
    -0.0402,
    -0.2775,
    0.9349,
    0.2215,
    0.0886,
    0.9093,
    0.4065,
    0.0898,
    0.9903,
    -0.1055,
    0.1398,
    0.9397,
    0.3121,
    -0.9861,
    0.1034,
    0.1304,
    -0.8396,
    0.1323,
    0.5268,
    -0.8382,
    0.5418,
    0.0623,
    -0.739,
    0.506,
    0.4447,
    -0.7387,
    0.5005,
    0.4514,
    -0.739,
    0.506,
    0.4447,
    -0.7387,
    0.5005,
    0.4514,
    -0.2775,
    0.9349,
    0.2215,
    -0.2472,
    0.383,
    0.8901,
    0.0886,
    0.9093,
    0.4065,
    0.1078,
    0.5775,
    0.8092,
    -0.8382,
    0.5418,
    0.0623,
    -0.7387,
    0.5005,
    0.4514,
    -0.3784,
    0.9248,
    -0.0402,
    -0.2775,
    0.9349,
    0.2215,
    -0.8396,
    0.1323,
    0.5268,
    -0.8018,
    0.0632,
    0.5942,
    -0.739,
    0.506,
    0.4447,
    -0.2854,
    0.0699,
    0.9558,
    -0.2472,
    0.383,
    0.8901,
    -0.5292,
    -0.8356,
    0.1474,
    -0.3709,
    -0.888,
    -0.272,
    -0.1398,
    -0.9397,
    -0.3121,
    -0.0898,
    -0.9903,
    0.1055,
    -0.9861,
    0.1034,
    0.1304,
    -0.9728,
    0.0646,
    -0.2223,
    -0.9352,
    -0.1831,
    -0.303,
    -0.9164,
    -0.3681,
    0.1573,
    -0.9352,
    -0.1831,
    -0.303,
    -0.9164,
    -0.3681,
    0.1573,
    -0.5621,
    -0.3394,
    -0.7542,
    -0.5478,
    -0.3528,
    -0.7585,
    -0.5292,
    -0.8356,
    0.1474,
    -0.3709,
    -0.888,
    -0.272,
    -0.9728,
    0.0646,
    -0.2223,
    -0.9352,
    -0.1831,
    -0.303,
    -0.9049,
    0.2569,
    -0.3394,
    -0.5621,
    -0.3394,
    -0.7542,
    -0.4937,
    0.2638,
    -0.8287,
    -0.5478,
    -0.3528,
    -0.7585,
    -0.3709,
    -0.888,
    -0.272,
    -0.2113,
    -0.4187,
    -0.8832,
    -0.1398,
    -0.9397,
    -0.3121,
    -0.1071,
    -0.5785,
    -0.8086,
    -0.0892,
    -0.9097,
    -0.4055,
    -0.3784,
    0.9248,
    -0.0402,
    -0.2449,
    0.8589,
    -0.4498,
    0.0238,
    0.8632,
    -0.5042,
    0.0898,
    0.9903,
    -0.1055,
    -0.5621,
    -0.3394,
    -0.7542,
    -0.5478,
    -0.3528,
    -0.7585,
    -0.4937,
    0.2638,
    -0.8287,
    -0.4887,
    0.2667,
    -0.8307,
    -0.2113,
    -0.4187,
    -0.8832,
    -0.1594,
    0.2443,
    -0.9565,
    -0.0845,
    -0.098,
    -0.9916,
    -0.9861,
    0.1034,
    0.1304,
    -0.9728,
    0.0646,
    -0.2223,
    -0.9049,
    0.2569,
    -0.3394,
    -0.8382,
    0.5418,
    0.0623,
    -0.4887,
    0.2667,
    -0.8307,
    -0.2449,
    0.8589,
    -0.4498,
    -0.1594,
    0.2443,
    -0.9565,
    -0.0186,
    0.4053,
    -0.914,
    0.0238,
    0.8632,
    -0.5042,
    0.0669,
    0.8052,
    -0.5892,
    -0.9049,
    0.2569,
    -0.3394,
    -0.8382,
    0.5418,
    0.0623,
    -0.4937,
    0.2638,
    -0.8287,
    -0.4887,
    0.2667,
    -0.8307,
    -0.3784,
    0.9248,
    -0.0402,
    -0.2449,
    0.8589,
    -0.4498,
    -0.0898,
    -0.9903,
    0.1055,
    -0.0238,
    -0.8632,
    0.5042,
    0.0506,
    -0.8175,
    0.5737,
    0.3265,
    -0.9443,
    0.0421,
    0.3519,
    -0.8857,
    0.3026,
    0.8459,
    -0.4355,
    0.3077,
    0.8474,
    -0.4288,
    0.3131,
    0.8604,
    -0.5041,
    -0.075,
    0.9556,
    -0.0558,
    0.2894,
    0.9861,
    -0.1034,
    -0.1304,
    0.0903,
    -0.3259,
    0.9411,
    0.1348,
    -0.4175,
    0.8986,
    0.1401,
    0.0924,
    0.9858,
    0.4932,
    -0.2207,
    0.8414,
    0.54,
    0.0979,
    0.8359,
    0.6144,
    0.0283,
    0.7885,
    0.3265,
    -0.9443,
    0.0421,
    0.3519,
    -0.8857,
    0.3026,
    0.8474,
    -0.4288,
    0.3131,
    0.8604,
    -0.5041,
    -0.075,
    0.0506,
    -0.8175,
    0.5737,
    0.1348,
    -0.4175,
    0.8986,
    0.3519,
    -0.8857,
    0.3026,
    0.4932,
    -0.2207,
    0.8414,
    0.8459,
    -0.4355,
    0.3077,
    0.8474,
    -0.4288,
    0.3131,
    0.4932,
    -0.2207,
    0.8414,
    0.54,
    0.0979,
    0.8359,
    0.8459,
    -0.4355,
    0.3077,
    0.9361,
    0.0254,
    0.3509,
    0.9556,
    -0.0558,
    0.2894,
    0.0898,
    0.9903,
    -0.1055,
    0.1398,
    0.9397,
    0.3121,
    0.49,
    0.8587,
    -0.1501,
    0.5053,
    0.8245,
    0.2546,
    0.5214,
    0.8205,
    0.2342,
    0.1401,
    0.0924,
    0.9858,
    0.1401,
    0.0924,
    0.9858,
    0.1647,
    0.4941,
    0.8537,
    0.3951,
    0.4552,
    0.7979,
    0.6144,
    0.0283,
    0.7885,
    0.9348,
    0.3159,
    -0.1624,
    0.9361,
    0.0254,
    0.3509,
    0.9377,
    0.3291,
    0.1114,
    0.9556,
    -0.0558,
    0.2894,
    0.9861,
    -0.1034,
    -0.1304,
    0.0886,
    0.9093,
    0.4065,
    0.1078,
    0.5775,
    0.8092,
    0.1398,
    0.9397,
    0.3121,
    0.1647,
    0.4941,
    0.8537,
    0.3951,
    0.4552,
    0.7979,
    0.5214,
    0.8205,
    0.2342,
    0.3951,
    0.4552,
    0.7979,
    0.5053,
    0.8245,
    0.2546,
    0.5214,
    0.8205,
    0.2342,
    0.54,
    0.0979,
    0.8359,
    0.6144,
    0.0283,
    0.7885,
    0.9361,
    0.0254,
    0.3509,
    0.9377,
    0.3291,
    0.1114,
    0.49,
    0.8587,
    -0.1501,
    0.5053,
    0.8245,
    0.2546,
    0.9348,
    0.3159,
    -0.1624,
    0.9377,
    0.3291,
    0.1114,
    -0.1398,
    -0.9397,
    -0.3121,
    -0.0898,
    -0.9903,
    0.1055,
    -0.0892,
    -0.9097,
    -0.4055,
    0.2781,
    -0.9353,
    -0.2188,
    0.3265,
    -0.9443,
    0.0421,
    -0.2113,
    -0.4187,
    -0.8832,
    -0.1071,
    -0.5785,
    -0.8086,
    -0.0845,
    -0.098,
    -0.9916,
    0.2134,
    -0.1227,
    -0.9692,
    0.2964,
    -0.351,
    -0.8882,
    0.7289,
    -0.4222,
    -0.539,
    0.7387,
    -0.5005,
    -0.4514,
    0.8604,
    -0.5041,
    -0.075,
    0.8749,
    -0.1291,
    -0.4667,
    0.9861,
    -0.1034,
    -0.1304,
    -0.1071,
    -0.5785,
    -0.8086,
    -0.0892,
    -0.9097,
    -0.4055,
    0.2781,
    -0.9353,
    -0.2188,
    0.2964,
    -0.351,
    -0.8882,
    0.7289,
    -0.4222,
    -0.539,
    0.7387,
    -0.5005,
    -0.4514,
    0.2134,
    -0.1227,
    -0.9692,
    0.2964,
    -0.351,
    -0.8882,
    0.3362,
    0.0971,
    -0.9368,
    0.7289,
    -0.4222,
    -0.539,
    0.7823,
    0.1631,
    -0.6012,
    0.8749,
    -0.1291,
    -0.4667,
    0.2781,
    -0.9353,
    -0.2188,
    0.3265,
    -0.9443,
    0.0421,
    0.7387,
    -0.5005,
    -0.4514,
    0.8604,
    -0.5041,
    -0.075,
    0.0238,
    0.8632,
    -0.5042,
    0.0669,
    0.8052,
    -0.5892,
    0.0898,
    0.9903,
    -0.1055,
    0.4352,
    0.8032,
    -0.4067,
    0.49,
    0.8587,
    -0.1501,
    0.7823,
    0.1631,
    -0.6012,
    0.8073,
    0.2554,
    -0.532,
    0.8749,
    -0.1291,
    -0.4667,
    0.9348,
    0.3159,
    -0.1624,
    0.9861,
    -0.1034,
    -0.1304,
    -0.1594,
    0.2443,
    -0.9565,
    -0.0845,
    -0.098,
    -0.9916,
    -0.0186,
    0.4053,
    -0.914,
    0.2134,
    -0.1227,
    -0.9692,
    0.3362,
    0.0971,
    -0.9368,
    0.4352,
    0.8032,
    -0.4067,
    0.49,
    0.8587,
    -0.1501,
    0.8073,
    0.2554,
    -0.532,
    0.9348,
    0.3159,
    -0.1624,
    -0.0186,
    0.4053,
    -0.914,
    0.0669,
    0.8052,
    -0.5892,
    0.3362,
    0.0971,
    -0.9368,
    0.4352,
    0.8032,
    -0.4067,
    0.7823,
    0.1631,
    -0.6012,
    0.8073,
    0.2554,
    -0.532,
    -0.4877,
    -0.8606,
    0.1464,
    -0.4421,
    -0.8022,
    0.4013,
    -0.0853,
    -0.9895,
    0.1164,
    -0.0786,
    -0.7983,
    0.5971,
    -0.0329,
    -0.8565,
    0.5152,
    -0.366,
    -0.0891,
    0.9264,
    -0.245,
    0.1341,
    0.9602,
    -8e-3,
    -0.3936,
    0.9193,
    0.063,
    -0.3123,
    0.9479,
    0.1079,
    0.107,
    0.9884,
    -0.9894,
    0.0979,
    0.1075,
    -0.9547,
    -0.2689,
    0.1272,
    -0.8903,
    0.1281,
    0.4369,
    -0.8217,
    -0.2549,
    0.5097,
    -0.7994,
    -0.1619,
    0.5786,
    -0.8217,
    -0.2549,
    0.5097,
    -0.7994,
    -0.1619,
    0.5786,
    -0.4421,
    -0.8022,
    0.4013,
    -0.366,
    -0.0891,
    0.9264,
    -0.0786,
    -0.7983,
    0.5971,
    -8e-3,
    -0.3936,
    0.9193,
    -0.9547,
    -0.2689,
    0.1272,
    -0.8217,
    -0.2549,
    0.5097,
    -0.4877,
    -0.8606,
    0.1464,
    -0.4421,
    -0.8022,
    0.4013,
    -0.3487,
    0.427,
    0.8343,
    -0.261,
    0.5049,
    0.8228,
    -0.245,
    0.1341,
    0.9602,
    0.1079,
    0.107,
    0.9884,
    0.1079,
    0.107,
    0.9884,
    0.1336,
    0.5071,
    0.8515,
    -0.3883,
    0.9202,
    -0.0504,
    -0.1426,
    0.9372,
    0.3183,
    0.0853,
    0.9895,
    -0.1164,
    0.1223,
    0.945,
    0.3032,
    0.1223,
    0.945,
    0.3032,
    -0.9894,
    0.0979,
    0.1075,
    -0.8903,
    0.1281,
    0.4369,
    -0.865,
    0.5001,
    0.0406,
    -0.791,
    0.3563,
    0.4974,
    -0.261,
    0.5049,
    0.8228,
    -0.1426,
    0.9372,
    0.3183,
    0.1223,
    0.945,
    0.3032,
    0.1336,
    0.5071,
    0.8515,
    0.1336,
    0.5071,
    0.8515,
    -0.865,
    0.5001,
    0.0406,
    -0.791,
    0.3563,
    0.4974,
    -0.3883,
    0.9202,
    -0.0504,
    -0.3487,
    0.427,
    0.8343,
    -0.261,
    0.5049,
    0.8228,
    -0.1426,
    0.9372,
    0.3183,
    -0.8903,
    0.1281,
    0.4369,
    -0.7994,
    -0.1619,
    0.5786,
    -0.791,
    0.3563,
    0.4974,
    -0.366,
    -0.0891,
    0.9264,
    -0.3487,
    0.427,
    0.8343,
    -0.245,
    0.1341,
    0.9602,
    -0.4968,
    -0.8335,
    -0.2416,
    -0.4914,
    -0.8348,
    -0.2483,
    -0.4877,
    -0.8606,
    0.1464,
    -0.1223,
    -0.945,
    -0.3032,
    -0.0853,
    -0.9895,
    0.1164,
    -0.9894,
    0.0979,
    0.1075,
    -0.9608,
    -0.2562,
    -0.1062,
    -0.9547,
    -0.2689,
    0.1272,
    -0.9009,
    -0.0538,
    -0.4307,
    -0.8696,
    0.3588,
    -0.3392,
    -0.865,
    0.5001,
    0.0406,
    -0.864,
    0.4413,
    -0.2424,
    -0.5821,
    -0.1249,
    -0.8035,
    -0.5083,
    -0.0573,
    -0.8592,
    -0.3921,
    -0.4631,
    -0.7949,
    -0.1336,
    -0.5071,
    -0.8515,
    -0.1079,
    -0.107,
    -0.9884,
    -0.1079,
    -0.107,
    -0.9884,
    -0.9608,
    -0.2562,
    -0.1062,
    -0.9547,
    -0.2689,
    0.1272,
    -0.4914,
    -0.8348,
    -0.2483,
    -0.4877,
    -0.8606,
    0.1464,
    -0.9608,
    -0.2562,
    -0.1062,
    -0.9009,
    -0.0538,
    -0.4307,
    -0.5821,
    -0.1249,
    -0.8035,
    -0.4968,
    -0.8335,
    -0.2416,
    -0.4914,
    -0.8348,
    -0.2483,
    -0.3921,
    -0.4631,
    -0.7949,
    -0.4968,
    -0.8335,
    -0.2416,
    -0.3921,
    -0.4631,
    -0.7949,
    -0.1336,
    -0.5071,
    -0.8515,
    -0.1223,
    -0.945,
    -0.3032,
    -0.0768,
    -0.5903,
    -0.8035,
    -0.0691,
    -0.9159,
    -0.3954,
    -0.3883,
    0.9202,
    -0.0504,
    -0.3491,
    0.8795,
    -0.3233,
    -0.038,
    0.8097,
    -0.5856,
    0.0329,
    0.8565,
    -0.5152,
    0.0853,
    0.9895,
    -0.1164,
    -0.5083,
    -0.0573,
    -0.8592,
    -0.4674,
    0.2078,
    -0.8593,
    -0.1101,
    0.4051,
    -0.9076,
    -0.1079,
    -0.107,
    -0.9884,
    -0.063,
    0.3123,
    -0.9479,
    -0.8696,
    0.3588,
    -0.3392,
    -0.864,
    0.4413,
    -0.2424,
    -0.4674,
    0.2078,
    -0.8593,
    -0.3491,
    0.8795,
    -0.3233,
    -0.1101,
    0.4051,
    -0.9076,
    -0.038,
    0.8097,
    -0.5856,
    -0.9009,
    -0.0538,
    -0.4307,
    -0.864,
    0.4413,
    -0.2424,
    -0.5821,
    -0.1249,
    -0.8035,
    -0.5083,
    -0.0573,
    -0.8592,
    -0.4674,
    0.2078,
    -0.8593,
    -0.8696,
    0.3588,
    -0.3392,
    -0.865,
    0.5001,
    0.0406,
    -0.3883,
    0.9202,
    -0.0504,
    -0.3491,
    0.8795,
    -0.3233,
    -0.0853,
    -0.9895,
    0.1164,
    -0.0329,
    -0.8565,
    0.5152,
    0.2288,
    -0.8518,
    0.4713,
    0.3897,
    -0.9187,
    0.0636,
    0.8651,
    -0.5,
    -0.0401,
    0.8896,
    -0.3053,
    0.3397,
    0.9463,
    -0.0439,
    0.3203,
    0.9915,
    -0.0958,
    -0.0879,
    0.063,
    -0.3123,
    0.9479,
    0.1079,
    0.107,
    0.9884,
    0.1079,
    0.107,
    0.9884,
    0.4355,
    -0.3309,
    0.8372,
    0.4422,
    -0.3254,
    0.8358,
    0.5083,
    0.0573,
    0.8593,
    0.2288,
    -0.8518,
    0.4713,
    0.3897,
    -0.9187,
    0.0636,
    0.4355,
    -0.3309,
    0.8372,
    0.4422,
    -0.3254,
    0.8358,
    0.8651,
    -0.5,
    -0.0401,
    0.8896,
    -0.3053,
    0.3397,
    0.4355,
    -0.3309,
    0.8372,
    0.5083,
    0.0573,
    0.8593,
    0.5812,
    0.1241,
    0.8042,
    0.8896,
    -0.3053,
    0.3397,
    0.9213,
    0.0466,
    0.386,
    0.9463,
    -0.0439,
    0.3203,
    -0.0786,
    -0.7983,
    0.5971,
    -0.0329,
    -0.8565,
    0.5152,
    -8e-3,
    -0.3936,
    0.9193,
    0.063,
    -0.3123,
    0.9479,
    0.2288,
    -0.8518,
    0.4713,
    0.4422,
    -0.3254,
    0.8358,
    0.0853,
    0.9895,
    -0.1164,
    0.1223,
    0.945,
    0.3032,
    0.4877,
    0.8606,
    -0.1464,
    0.4914,
    0.8348,
    0.2483,
    0.4969,
    0.8335,
    0.2416,
    0.1079,
    0.107,
    0.9884,
    0.1336,
    0.5071,
    0.8515,
    0.1336,
    0.5071,
    0.8515,
    0.3895,
    0.4637,
    0.7958,
    0.5083,
    0.0573,
    0.8593,
    0.5812,
    0.1241,
    0.8042,
    0.9213,
    0.0466,
    0.386,
    0.9319,
    0.3384,
    0.1305,
    0.9463,
    -0.0439,
    0.3203,
    0.9534,
    0.2676,
    -0.1393,
    0.9915,
    -0.0958,
    -0.0879,
    0.1223,
    0.945,
    0.3032,
    0.1223,
    0.945,
    0.3032,
    0.1336,
    0.5071,
    0.8515,
    0.3895,
    0.4637,
    0.7958,
    0.4969,
    0.8335,
    0.2416,
    0.3895,
    0.4637,
    0.7958,
    0.4914,
    0.8348,
    0.2483,
    0.4969,
    0.8335,
    0.2416,
    0.5812,
    0.1241,
    0.8042,
    0.9213,
    0.0466,
    0.386,
    0.9319,
    0.3384,
    0.1305,
    0.4877,
    0.8606,
    -0.1464,
    0.4914,
    0.8348,
    0.2483,
    0.9319,
    0.3384,
    0.1305,
    0.9534,
    0.2676,
    -0.1393,
    -0.1223,
    -0.945,
    -0.3032,
    -0.0853,
    -0.9895,
    0.1164,
    -0.0691,
    -0.9159,
    -0.3954,
    0.2923,
    -0.9358,
    -0.1968,
    0.3897,
    -0.9187,
    0.0636,
    -0.1336,
    -0.5071,
    -0.8515,
    -0.1079,
    -0.107,
    -0.9884,
    -0.0768,
    -0.5903,
    -0.8035,
    0.2779,
    -0.3956,
    -0.8754,
    0.3118,
    -0.1375,
    -0.9401,
    -0.0768,
    -0.5903,
    -0.8035,
    -0.0691,
    -0.9159,
    -0.3954,
    0.2779,
    -0.3956,
    -0.8754,
    0.2923,
    -0.9358,
    -0.1968,
    0.7853,
    -0.4424,
    -0.4332,
    0.8023,
    -0.5024,
    -0.3223,
    0.2779,
    -0.3956,
    -0.8754,
    0.3118,
    -0.1375,
    -0.9401,
    0.3866,
    -0.0686,
    -0.9197,
    0.7915,
    -0.0766,
    -0.6064,
    0.8023,
    -0.5024,
    -0.3223,
    0.2923,
    -0.9358,
    -0.1968,
    0.3897,
    -0.9187,
    0.0636,
    0.7853,
    -0.4424,
    -0.4332,
    0.8651,
    -0.5,
    -0.0401,
    0.0329,
    0.8565,
    -0.5152,
    0.0853,
    0.9895,
    -0.1164,
    0.4042,
    0.7466,
    -0.5285,
    0.4244,
    0.7472,
    -0.5115,
    0.4877,
    0.8606,
    -0.1464,
    0.7853,
    -0.4424,
    -0.4332,
    0.7915,
    -0.0766,
    -0.6064,
    0.8023,
    -0.5024,
    -0.3223,
    0.8651,
    -0.5,
    -0.0401,
    0.9196,
    0.2099,
    -0.332,
    0.9534,
    0.2676,
    -0.1393,
    0.9915,
    -0.0958,
    -0.0879,
    -0.1079,
    -0.107,
    -0.9884,
    -0.1079,
    -0.107,
    -0.9884,
    -0.063,
    0.3123,
    -0.9479,
    0.2084,
    0.2743,
    -0.9388,
    0.3118,
    -0.1375,
    -0.9401,
    0.3866,
    -0.0686,
    -0.9197,
    0.4042,
    0.7466,
    -0.5285,
    0.4877,
    0.8606,
    -0.1464,
    0.9196,
    0.2099,
    -0.332,
    0.9534,
    0.2676,
    -0.1393,
    0.2084,
    0.2743,
    -0.9388,
    0.3866,
    -0.0686,
    -0.9197,
    0.4042,
    0.7466,
    -0.5285,
    0.4244,
    0.7472,
    -0.5115,
    0.7915,
    -0.0766,
    -0.6064,
    0.9196,
    0.2099,
    -0.332,
    -0.1101,
    0.4051,
    -0.9076,
    -0.063,
    0.3123,
    -0.9479,
    -0.038,
    0.8097,
    -0.5856,
    0.0329,
    0.8565,
    -0.5152,
    0.2084,
    0.2743,
    -0.9388,
    0.4244,
    0.7472,
    -0.5115,
    -0.5305,
    -0.8386,
    0.124,
    -0.3324,
    -0.7852,
    0.5225,
    0.0888,
    -0.8668,
    0.4907,
    0.2165,
    -0.9732,
    0.0774,
    -0.3692,
    -0.1621,
    0.9151,
    -0.2971,
    0.4517,
    0.8412,
    -0.291,
    -0.2398,
    0.9262,
    -0.1631,
    0.5231,
    0.8365,
    -0.0132,
    -0.2145,
    0.9766,
    0.1604,
    0.3816,
    0.9103,
    -0.9685,
    -0.2271,
    0.1019,
    -0.8699,
    -0.0353,
    0.4919,
    -0.5305,
    -0.8386,
    0.124,
    -0.3692,
    -0.1621,
    0.9151,
    -0.3324,
    -0.7852,
    0.5225,
    -0.291,
    -0.2398,
    0.9262,
    -0.9685,
    -0.2271,
    0.1019,
    -0.8699,
    -0.0353,
    0.4919,
    -0.8378,
    0.5453,
    0.0257,
    -0.798,
    0.4104,
    0.4414,
    -0.1631,
    0.5231,
    0.8365,
    -0.0439,
    0.9333,
    0.3564,
    0.1604,
    0.3816,
    0.9103,
    0.3858,
    0.8706,
    0.3054,
    0.4428,
    0.3936,
    0.8056,
    -0.8378,
    0.5453,
    0.0257,
    -0.798,
    0.4104,
    0.4414,
    -0.2971,
    0.4517,
    0.8412,
    -0.2245,
    0.9724,
    -0.0631,
    -0.1631,
    0.5231,
    0.8365,
    -0.0439,
    0.9333,
    0.3564,
    -0.8699,
    -0.0353,
    0.4919,
    -0.798,
    0.4104,
    0.4414,
    -0.3692,
    -0.1621,
    0.9151,
    -0.2971,
    0.4517,
    0.8412,
    -0.9685,
    -0.2271,
    0.1019,
    -0.9285,
    -0.2005,
    -0.3126,
    -0.9283,
    -0.1999,
    -0.3135,
    -0.8378,
    0.5453,
    0.0257,
    -0.8177,
    0.4242,
    -0.3891,
    -0.8175,
    0.4315,
    -0.3814,
    -0.9685,
    -0.2271,
    0.1019,
    -0.9283,
    -0.1999,
    -0.3135,
    -0.5305,
    -0.8386,
    0.124,
    -0.4941,
    -0.859,
    -0.1341,
    -0.9285,
    -0.2005,
    -0.3126,
    -0.9283,
    -0.1999,
    -0.3135,
    -0.5108,
    -0.212,
    -0.8332,
    -0.4941,
    -0.859,
    -0.1341,
    -0.1847,
    -0.8532,
    -0.4878,
    -0.1531,
    -0.4736,
    -0.8674,
    -0.1302,
    -0.5043,
    -0.8537,
    -0.9285,
    -0.2005,
    -0.3126,
    -0.8177,
    0.4242,
    -0.3891,
    -0.5108,
    -0.212,
    -0.8332,
    -0.4415,
    0.2249,
    -0.8686,
    -0.2245,
    0.9724,
    -0.0631,
    -0.183,
    0.9433,
    -0.2769,
    0.0385,
    0.8078,
    -0.5882,
    0.369,
    0.7942,
    -0.4828,
    0.5539,
    0.8246,
    -0.1151,
    -0.5108,
    -0.212,
    -0.8332,
    -0.4415,
    0.2249,
    -0.8686,
    -0.1531,
    -0.4736,
    -0.8674,
    -0.0773,
    0.3314,
    -0.9403,
    -9e-4,
    0.2598,
    -0.9657,
    -0.8177,
    0.4242,
    -0.3891,
    -0.8175,
    0.4315,
    -0.3814,
    -0.4415,
    0.2249,
    -0.8686,
    -0.183,
    0.9433,
    -0.2769,
    -0.0773,
    0.3314,
    -0.9403,
    0.0385,
    0.8078,
    -0.5882,
    -0.8378,
    0.5453,
    0.0257,
    -0.8175,
    0.4315,
    -0.3814,
    -0.2245,
    0.9724,
    -0.0631,
    -0.183,
    0.9433,
    -0.2769,
    0.8409,
    -0.541,
    -99e-4,
    0.8563,
    -0.3435,
    0.3858,
    0.9372,
    0.0974,
    0.3351,
    0.9603,
    0.2606,
    -0.1,
    0.0888,
    -0.8668,
    0.4907,
    0.2165,
    -0.9732,
    0.0774,
    0.3032,
    -0.3739,
    0.8765,
    0.4264,
    -0.3115,
    0.8492,
    0.8409,
    -0.541,
    -99e-4,
    0.8563,
    -0.3435,
    0.3858,
    0.4264,
    -0.3115,
    0.8492,
    0.5026,
    0.331,
    0.7986,
    0.8563,
    -0.3435,
    0.3858,
    0.9372,
    0.0974,
    0.3351,
    -0.3324,
    -0.7852,
    0.5225,
    -0.291,
    -0.2398,
    0.9262,
    -0.0132,
    -0.2145,
    0.9766,
    0.0888,
    -0.8668,
    0.4907,
    0.3032,
    -0.3739,
    0.8765,
    -0.2245,
    0.9724,
    -0.0631,
    -0.0439,
    0.9333,
    0.3564,
    0.3858,
    0.8706,
    0.3054,
    0.5539,
    0.8246,
    -0.1151,
    -0.0132,
    -0.2145,
    0.9766,
    0.1604,
    0.3816,
    0.9103,
    0.3032,
    -0.3739,
    0.8765,
    0.4264,
    -0.3115,
    0.8492,
    0.4428,
    0.3936,
    0.8056,
    0.5026,
    0.331,
    0.7986,
    0.3858,
    0.8706,
    0.3054,
    0.4428,
    0.3936,
    0.8056,
    0.5026,
    0.331,
    0.7986,
    0.5539,
    0.8246,
    -0.1151,
    0.9372,
    0.0974,
    0.3351,
    0.9603,
    0.2606,
    -0.1,
    -0.5305,
    -0.8386,
    0.124,
    -0.4941,
    -0.859,
    -0.1341,
    -0.1847,
    -0.8532,
    -0.4878,
    0.1703,
    -0.975,
    -0.1425,
    0.2165,
    -0.9732,
    0.0774,
    -0.1531,
    -0.4736,
    -0.8674,
    -0.1302,
    -0.5043,
    -0.8537,
    -9e-4,
    0.2598,
    -0.9657,
    0.3057,
    -0.3792,
    -0.8734,
    0.3699,
    0.1706,
    -0.9133,
    0.3791,
    0.1609,
    -0.9113,
    -0.1847,
    -0.8532,
    -0.4878,
    -0.1302,
    -0.5043,
    -0.8537,
    0.1703,
    -0.975,
    -0.1425,
    0.3057,
    -0.3792,
    -0.8734,
    0.7598,
    -0.4935,
    -0.4233,
    0.7605,
    -0.4971,
    -0.4178,
    0.3057,
    -0.3792,
    -0.8734,
    0.3791,
    0.1609,
    -0.9113,
    0.7605,
    -0.4971,
    -0.4178,
    0.8688,
    0.0377,
    -0.4937,
    0.1703,
    -0.975,
    -0.1425,
    0.2165,
    -0.9732,
    0.0774,
    0.7598,
    -0.4935,
    -0.4233,
    0.8409,
    -0.541,
    -99e-4,
    0.7598,
    -0.4935,
    -0.4233,
    0.7605,
    -0.4971,
    -0.4178,
    0.8409,
    -0.541,
    -99e-4,
    0.8688,
    0.0377,
    -0.4937,
    0.9603,
    0.2606,
    -0.1,
    0.369,
    0.7942,
    -0.4828,
    0.3699,
    0.1706,
    -0.9133,
    0.3791,
    0.1609,
    -0.9113,
    0.5539,
    0.8246,
    -0.1151,
    0.8688,
    0.0377,
    -0.4937,
    0.9603,
    0.2606,
    -0.1,
    -0.0773,
    0.3314,
    -0.9403,
    -9e-4,
    0.2598,
    -0.9657,
    0.0385,
    0.8078,
    -0.5882,
    0.369,
    0.7942,
    -0.4828,
    0.3699,
    0.1706,
    -0.9133,
    -0.5137,
    -0.7645,
    0.3894,
    -0.2564,
    -0.6415,
    0.723,
    -0.0592,
    -0.9271,
    0.3701,
    64e-4,
    -0.6954,
    0.7186,
    64e-4,
    -0.6954,
    0.7186,
    -0.29,
    0.0656,
    0.9548,
    -0.2788,
    0.0563,
    0.9587,
    -0.2717,
    0.5708,
    0.7748,
    0.0938,
    0.7214,
    0.6861,
    0.1146,
    11e-4,
    0.9934,
    0.127,
    0.0103,
    0.9918,
    0.1878,
    0.6487,
    0.7375,
    -0.2788,
    0.0563,
    0.9587,
    -0.2564,
    -0.6415,
    0.723,
    64e-4,
    -0.6954,
    0.7186,
    0.1146,
    11e-4,
    0.9934,
    -0.9311,
    -0.2608,
    0.2552,
    -0.8211,
    0.0358,
    0.5696,
    -0.5137,
    -0.7645,
    0.3894,
    -0.29,
    0.0656,
    0.9548,
    -0.2788,
    0.0563,
    0.9587,
    -0.2564,
    -0.6415,
    0.723,
    -0.3549,
    0.8888,
    -0.2898,
    -0.3035,
    0.9522,
    -0.0343,
    0.0578,
    0.9882,
    0.1415,
    0.0592,
    0.9271,
    -0.3701,
    0.1142,
    0.9924,
    0.0448,
    -0.9311,
    -0.2608,
    0.2552,
    -0.9024,
    0.4301,
    -0.0262,
    -0.8211,
    0.0358,
    0.5696,
    -0.777,
    0.5297,
    0.3401,
    -0.774,
    0.5249,
    0.3541,
    -0.777,
    0.5297,
    0.3401,
    -0.774,
    0.5249,
    0.3541,
    -0.3035,
    0.9522,
    -0.0343,
    -0.2717,
    0.5708,
    0.7748,
    0.0578,
    0.9882,
    0.1415,
    0.0938,
    0.7214,
    0.6861,
    -0.9024,
    0.4301,
    -0.0262,
    -0.777,
    0.5297,
    0.3401,
    -0.3549,
    0.8888,
    -0.2898,
    -0.3035,
    0.9522,
    -0.0343,
    -0.8211,
    0.0358,
    0.5696,
    -0.774,
    0.5249,
    0.3541,
    -0.29,
    0.0656,
    0.9548,
    -0.2717,
    0.5708,
    0.7748,
    -0.5137,
    -0.7645,
    0.3894,
    -0.4842,
    -0.8619,
    0.1505,
    -0.1242,
    -0.9821,
    -0.1413,
    -0.0592,
    -0.9271,
    0.3701,
    -0.9311,
    -0.2608,
    0.2552,
    -0.9253,
    -0.3473,
    -0.1525,
    -0.9248,
    -0.3456,
    -0.1593,
    -0.9024,
    0.4301,
    -0.0262,
    -0.8834,
    0.2405,
    -0.4021,
    -0.8834,
    0.2502,
    -0.3962,
    -0.9311,
    -0.2608,
    0.2552,
    -0.9248,
    -0.3456,
    -0.1593,
    -0.5137,
    -0.7645,
    0.3894,
    -0.4842,
    -0.8619,
    0.1505,
    -0.9253,
    -0.3473,
    -0.1525,
    -0.9248,
    -0.3456,
    -0.1593,
    -0.5544,
    -0.4851,
    -0.6763,
    -0.4842,
    -0.8619,
    0.1505,
    -0.2146,
    -0.7051,
    -0.6759,
    -0.1614,
    -0.9861,
    -0.0393,
    -0.1242,
    -0.9821,
    -0.1413,
    -0.9253,
    -0.3473,
    -0.1525,
    -0.8834,
    0.2405,
    -0.4021,
    -0.5544,
    -0.4851,
    -0.6763,
    -0.5218,
    -0.056,
    -0.8512,
    -0.3794,
    0.7776,
    -0.5013,
    -0.3549,
    0.8888,
    -0.2898,
    -0.0215,
    0.6234,
    -0.7816,
    0.0592,
    0.9271,
    -0.3701,
    -0.5544,
    -0.4851,
    -0.6763,
    -0.5218,
    -0.056,
    -0.8512,
    -0.2146,
    -0.7051,
    -0.6759,
    -0.1263,
    -0.6554,
    -0.7446,
    -0.1151,
    0.0748,
    -0.9905,
    -0.0997,
    0.0478,
    -0.9939,
    -0.8834,
    0.2405,
    -0.4021,
    -0.8834,
    0.2502,
    -0.3962,
    -0.5218,
    -0.056,
    -0.8512,
    -0.3794,
    0.7776,
    -0.5013,
    -0.1151,
    0.0748,
    -0.9905,
    -0.0215,
    0.6234,
    -0.7816,
    -0.0171,
    0.612,
    -0.7907,
    -0.9024,
    0.4301,
    -0.0262,
    -0.8834,
    0.2502,
    -0.3962,
    -0.3794,
    0.7776,
    -0.5013,
    -0.3549,
    0.8888,
    -0.2898,
    -0.0592,
    -0.9271,
    0.3701,
    64e-4,
    -0.6954,
    0.7186,
    0.2417,
    -0.7012,
    0.6708,
    0.4503,
    -0.8542,
    0.2599,
    0.8706,
    -0.489,
    0.0537,
    0.9162,
    -0.163,
    0.366,
    0.9339,
    0.2618,
    -0.2436,
    0.942,
    0.2699,
    0.1995,
    0.2417,
    -0.7012,
    0.6708,
    0.4503,
    -0.8542,
    0.2599,
    0.5042,
    -0.0398,
    0.8626,
    0.5133,
    -0.0351,
    0.8575,
    0.8706,
    -0.489,
    0.0537,
    0.9162,
    -0.163,
    0.366,
    0.5133,
    -0.0351,
    0.8575,
    0.539,
    0.5617,
    0.6277,
    0.9162,
    -0.163,
    0.366,
    0.942,
    0.2699,
    0.1995,
    64e-4,
    -0.6954,
    0.7186,
    64e-4,
    -0.6954,
    0.7186,
    0.1146,
    11e-4,
    0.9934,
    0.127,
    0.0103,
    0.9918,
    0.2417,
    -0.7012,
    0.6708,
    0.5042,
    -0.0398,
    0.8626,
    0.0592,
    0.9271,
    -0.3701,
    0.1142,
    0.9924,
    0.0448,
    0.3489,
    0.937,
    0.0161,
    0.5029,
    0.779,
    -0.3746,
    0.127,
    0.0103,
    0.9918,
    0.1878,
    0.6487,
    0.7375,
    0.5042,
    -0.0398,
    0.8626,
    0.5133,
    -0.0351,
    0.8575,
    0.539,
    0.5617,
    0.6277,
    0.5442,
    0.5568,
    0.6275,
    0.0578,
    0.9882,
    0.1415,
    0.0938,
    0.7214,
    0.6861,
    0.1142,
    0.9924,
    0.0448,
    0.1878,
    0.6487,
    0.7375,
    0.3489,
    0.937,
    0.0161,
    0.5442,
    0.5568,
    0.6275,
    0.3489,
    0.937,
    0.0161,
    0.5029,
    0.779,
    -0.3746,
    0.539,
    0.5617,
    0.6277,
    0.5442,
    0.5568,
    0.6275,
    0.9339,
    0.2618,
    -0.2436,
    0.942,
    0.2699,
    0.1995,
    -0.1614,
    -0.9861,
    -0.0393,
    -0.1242,
    -0.9821,
    -0.1413,
    -0.0592,
    -0.9271,
    0.3701,
    0.1583,
    -0.9846,
    -0.074,
    0.4503,
    -0.8542,
    0.2599,
    -0.1263,
    -0.6554,
    -0.7446,
    -0.0997,
    0.0478,
    -0.9939,
    0.2515,
    -0.6459,
    -0.7208,
    0.2519,
    -0.6457,
    -0.7209,
    0.3027,
    -0.1663,
    -0.9385,
    -0.2146,
    -0.7051,
    -0.6759,
    -0.1614,
    -0.9861,
    -0.0393,
    -0.1263,
    -0.6554,
    -0.7446,
    0.1583,
    -0.9846,
    -0.074,
    0.2519,
    -0.6457,
    -0.7209,
    0.1583,
    -0.9846,
    -0.074,
    0.2515,
    -0.6459,
    -0.7208,
    0.2519,
    -0.6457,
    -0.7209,
    0.4503,
    -0.8542,
    0.2599,
    0.7957,
    -0.4433,
    -0.4128,
    0.8706,
    -0.489,
    0.0537,
    0.2515,
    -0.6459,
    -0.7208,
    0.3027,
    -0.1663,
    -0.9385,
    0.7957,
    -0.4433,
    -0.4128,
    0.8094,
    0.057,
    -0.5844,
    -0.0215,
    0.6234,
    -0.7816,
    -0.0171,
    0.612,
    -0.7907,
    0.0592,
    0.9271,
    -0.3701,
    0.4058,
    0.6715,
    -0.62,
    0.5029,
    0.779,
    -0.3746,
    0.7957,
    -0.4433,
    -0.4128,
    0.8093,
    0.0566,
    -0.5847,
    0.8094,
    0.057,
    -0.5844,
    0.8706,
    -0.489,
    0.0537,
    0.9339,
    0.2618,
    -0.2436,
    0.4058,
    0.6715,
    -0.62,
    0.5029,
    0.779,
    -0.3746,
    0.8093,
    0.0566,
    -0.5847,
    0.9339,
    0.2618,
    -0.2436,
    -0.1151,
    0.0748,
    -0.9905,
    -0.0997,
    0.0478,
    -0.9939,
    -0.0171,
    0.612,
    -0.7907,
    0.3027,
    -0.1663,
    -0.9385,
    0.4058,
    0.6715,
    -0.62,
    0.8093,
    0.0566,
    -0.5847,
    0.8094,
    0.057,
    -0.5844,
    -0.582,
    -0.7335,
    0.3511,
    -0.3364,
    -0.631,
    0.699,
    -0.1389,
    -0.9251,
    0.3534,
    -0.0614,
    -0.631,
    0.7733,
    -0.023,
    -0.7102,
    0.7036,
    -0.4,
    0.457,
    0.7945,
    -0.325,
    0.0773,
    0.9426,
    -0.2128,
    -0.0185,
    0.9769,
    -0.0901,
    0.6729,
    0.7343,
    0.0262,
    0.016,
    0.9995,
    0.2031,
    0.6532,
    0.7294,
    0.212,
    0.6419,
    0.7369,
    -0.3364,
    -0.631,
    0.699,
    -0.325,
    0.0773,
    0.9426,
    -0.023,
    -0.7102,
    0.7036,
    0.0262,
    0.016,
    0.9995,
    0.1163,
    -0.0836,
    0.9897,
    -0.9599,
    -0.1974,
    0.1991,
    -0.8639,
    0.0436,
    0.5017,
    -0.582,
    -0.7335,
    0.3511,
    -0.3364,
    -0.631,
    0.699,
    -0.325,
    0.0773,
    0.9426,
    -0.2128,
    -0.0185,
    0.9769,
    -0.8639,
    0.0436,
    0.5017,
    -0.769,
    0.3986,
    0.4997,
    -0.4,
    0.457,
    0.7945,
    -0.2128,
    -0.0185,
    0.9769,
    -0.2807,
    0.9129,
    -0.2962,
    -0.22,
    0.9719,
    0.0836,
    -0.2132,
    0.9729,
    0.089,
    0.1389,
    0.9251,
    -0.3534,
    0.175,
    0.9824,
    0.0648,
    -0.9599,
    -0.1974,
    0.1991,
    -0.8728,
    0.4842,
    -0.0619,
    -0.8639,
    0.0436,
    0.5017,
    -0.8277,
    0.5372,
    0.1625,
    -0.769,
    0.3986,
    0.4997,
    -0.22,
    0.9719,
    0.0836,
    -0.0901,
    0.6729,
    0.7343,
    0.175,
    0.9824,
    0.0648,
    0.212,
    0.6419,
    0.7369,
    0.2448,
    0.9602,
    0.1348,
    -0.8277,
    0.5372,
    0.1625,
    -0.769,
    0.3986,
    0.4997,
    -0.4,
    0.457,
    0.7945,
    -0.22,
    0.9719,
    0.0836,
    -0.2132,
    0.9729,
    0.089,
    -0.0901,
    0.6729,
    0.7343,
    -0.8728,
    0.4842,
    -0.0619,
    -0.8277,
    0.5372,
    0.1625,
    -0.2807,
    0.9129,
    -0.2962,
    -0.2132,
    0.9729,
    0.089,
    -0.582,
    -0.7335,
    0.3511,
    -0.5373,
    -0.8424,
    -0.042,
    -0.4577,
    -0.8798,
    -0.1284,
    -0.1709,
    -0.9853,
    92e-4,
    -0.1389,
    -0.9251,
    0.3534,
    -0.9734,
    -0.2238,
    -0.0498,
    -0.9599,
    -0.1974,
    0.1991,
    -0.9128,
    -0.106,
    -0.3945,
    -0.8728,
    0.4842,
    -0.0619,
    -0.8405,
    0.3146,
    -0.4411,
    -0.8292,
    0.4152,
    -0.3741,
    -0.9734,
    -0.2238,
    -0.0498,
    -0.9599,
    -0.1974,
    0.1991,
    -0.582,
    -0.7335,
    0.3511,
    -0.5373,
    -0.8424,
    -0.042,
    -0.9734,
    -0.2238,
    -0.0498,
    -0.9128,
    -0.106,
    -0.3945,
    -0.6157,
    -0.2819,
    -0.7358,
    -0.5373,
    -0.8424,
    -0.042,
    -0.4577,
    -0.8798,
    -0.1284,
    -0.3635,
    -0.6173,
    -0.6977,
    -0.4577,
    -0.8798,
    -0.1284,
    -0.3635,
    -0.6173,
    -0.6977,
    -0.1709,
    -0.9853,
    92e-4,
    -0.1131,
    -0.6101,
    -0.7842,
    0.0488,
    -0.991,
    -0.1247,
    0.1336,
    -0.6995,
    -0.702,
    -0.3006,
    0.8058,
    -0.5103,
    -0.2807,
    0.9129,
    -0.2962,
    0.0615,
    0.6316,
    -0.7729,
    0.1389,
    0.9251,
    -0.3534,
    -0.6157,
    -0.2819,
    -0.7358,
    -0.4266,
    -15e-4,
    -0.9044,
    -0.3635,
    -0.6173,
    -0.6977,
    -0.1194,
    0.0727,
    -0.9902,
    -0.1131,
    -0.6101,
    -0.7842,
    -0.0465,
    -8e-4,
    -0.9989,
    -0.8405,
    0.3146,
    -0.4411,
    -0.8292,
    0.4152,
    -0.3741,
    -0.4266,
    -15e-4,
    -0.9044,
    -0.3006,
    0.8058,
    -0.5103,
    -0.1194,
    0.0727,
    -0.9902,
    0.0237,
    0.7101,
    -0.7037,
    0.0615,
    0.6316,
    -0.7729,
    -0.9128,
    -0.106,
    -0.3945,
    -0.8292,
    0.4152,
    -0.3741,
    -0.6157,
    -0.2819,
    -0.7358,
    -0.4266,
    -15e-4,
    -0.9044,
    -0.8728,
    0.4842,
    -0.0619,
    -0.8405,
    0.3146,
    -0.4411,
    -0.3006,
    0.8058,
    -0.5103,
    -0.2807,
    0.9129,
    -0.2962,
    -0.1389,
    -0.9251,
    0.3534,
    -0.0614,
    -0.631,
    0.7733,
    0.3007,
    -0.8043,
    0.5124,
    0.3367,
    -0.9011,
    0.2733,
    0.8488,
    -0.3021,
    0.4339,
    0.8488,
    -0.2983,
    0.4364,
    0.8526,
    -0.5173,
    0.0738,
    0.9319,
    0.2833,
    0.2263,
    0.9345,
    0.2887,
    0.208,
    0.9589,
    0.1988,
    -0.2027,
    0.3007,
    -0.8043,
    0.5124,
    0.3367,
    -0.9011,
    0.2733,
    0.8488,
    -0.2983,
    0.4364,
    0.8526,
    -0.5173,
    0.0738,
    -0.0614,
    -0.631,
    0.7733,
    -0.023,
    -0.7102,
    0.7036,
    0.1163,
    -0.0836,
    0.9897,
    0.3007,
    -0.8043,
    0.5124,
    0.4934,
    71e-4,
    0.8698,
    0.8488,
    -0.3021,
    0.4339,
    0.8488,
    -0.2983,
    0.4364,
    0.4934,
    71e-4,
    0.8698,
    0.536,
    0.422,
    0.7311,
    0.8488,
    -0.3021,
    0.4339,
    0.9319,
    0.2833,
    0.2263,
    0.1389,
    0.9251,
    -0.3534,
    0.175,
    0.9824,
    0.0648,
    0.2448,
    0.9602,
    0.1348,
    0.5454,
    0.8341,
    -0.0827,
    0.5814,
    0.734,
    -0.3511,
    0.0262,
    0.016,
    0.9995,
    0.1163,
    -0.0836,
    0.9897,
    0.2031,
    0.6532,
    0.7294,
    0.4934,
    71e-4,
    0.8698,
    0.536,
    0.422,
    0.7311,
    0.2031,
    0.6532,
    0.7294,
    0.212,
    0.6419,
    0.7369,
    0.2448,
    0.9602,
    0.1348,
    0.536,
    0.422,
    0.7311,
    0.5454,
    0.8341,
    -0.0827,
    0.9319,
    0.2833,
    0.2263,
    0.9345,
    0.2887,
    0.208,
    0.5454,
    0.8341,
    -0.0827,
    0.5814,
    0.734,
    -0.3511,
    0.9345,
    0.2887,
    0.208,
    0.9589,
    0.1988,
    -0.2027,
    -0.1709,
    -0.9853,
    92e-4,
    -0.1389,
    -0.9251,
    0.3534,
    0.0488,
    -0.991,
    -0.1247,
    0.3367,
    -0.9011,
    0.2733,
    -0.1131,
    -0.6101,
    -0.7842,
    -0.0465,
    -8e-4,
    -0.9989,
    0.1336,
    -0.6995,
    -0.702,
    0.2537,
    -0.6432,
    -0.7225,
    0.328,
    -0.0583,
    -0.9429,
    0.3523,
    -0.0801,
    -0.9324,
    0.0488,
    -0.991,
    -0.1247,
    0.1336,
    -0.6995,
    -0.702,
    0.2537,
    -0.6432,
    -0.7225,
    0.3367,
    -0.9011,
    0.2733,
    0.7841,
    -0.5,
    -0.3676,
    0.8526,
    -0.5173,
    0.0738,
    0.2537,
    -0.6432,
    -0.7225,
    0.3523,
    -0.0801,
    -0.9324,
    0.7841,
    -0.5,
    -0.3676,
    0.8496,
    -0.0839,
    -0.5207,
    0.0237,
    0.7101,
    -0.7037,
    0.0615,
    0.6316,
    -0.7729,
    0.1389,
    0.9251,
    -0.3534,
    0.3338,
    0.632,
    -0.6994,
    0.5814,
    0.734,
    -0.3511,
    0.7841,
    -0.5,
    -0.3676,
    0.8496,
    -0.0839,
    -0.5207,
    0.8526,
    -0.5173,
    0.0738,
    0.9589,
    0.1988,
    -0.2027,
    0.328,
    -0.0583,
    -0.9429,
    0.3338,
    0.632,
    -0.6994,
    0.3523,
    -0.0801,
    -0.9324,
    0.5814,
    0.734,
    -0.3511,
    0.8496,
    -0.0839,
    -0.5207,
    0.9589,
    0.1988,
    -0.2027,
    -0.1194,
    0.0727,
    -0.9902,
    -0.0465,
    -8e-4,
    -0.9989,
    0.0237,
    0.7101,
    -0.7037,
    0.328,
    -0.0583,
    -0.9429,
    0.3338,
    0.632,
    -0.6994,
    0.2925,
    -0.9523,
    0.0874,
    0.5183,
    -0.7534,
    0.4047,
    0.6904,
    -0.7211,
    -0.0582,
    0.7262,
    -0.5949,
    0.3446,
    -0.3017,
    0.0997,
    0.9482,
    -0.3009,
    0.1097,
    0.9473,
    -0.0453,
    0.4124,
    0.9099,
    -0.0181,
    0.412,
    0.911,
    0.1654,
    -0.3802,
    0.91,
    0.1687,
    -0.3801,
    0.9094,
    0.5087,
    -0.1052,
    0.8545,
    0.5169,
    -0.178,
    0.8373,
    0.1687,
    -0.3801,
    0.9094,
    0.5087,
    -0.1052,
    0.8545,
    0.5183,
    -0.7534,
    0.4047,
    0.7262,
    -0.5949,
    0.3446,
    0.7555,
    -0.5176,
    0.4017,
    -0.3413,
    -0.7073,
    0.6191,
    -0.3335,
    -0.9137,
    0.2324,
    0.1654,
    -0.3802,
    0.91,
    0.1687,
    -0.3801,
    0.9094,
    0.2925,
    -0.9523,
    0.0874,
    0.5183,
    -0.7534,
    0.4047,
    -0.9273,
    0.3227,
    0.1899,
    -0.6919,
    0.5145,
    0.5065,
    -0.6904,
    0.7211,
    0.0582,
    -0.5307,
    0.7179,
    0.4506,
    -0.9068,
    -0.3128,
    0.2825,
    -0.6731,
    -0.3642,
    0.6437,
    -0.3413,
    -0.7073,
    0.6191,
    -0.3335,
    -0.9137,
    0.2324,
    -0.6919,
    0.5145,
    0.5065,
    -0.5307,
    0.7179,
    0.4506,
    -0.5307,
    0.7179,
    0.4506,
    -0.3009,
    0.1097,
    0.9473,
    -0.0453,
    0.4124,
    0.9099,
    -0.9273,
    0.3227,
    0.1899,
    -0.9068,
    -0.3128,
    0.2825,
    -0.6919,
    0.5145,
    0.5065,
    -0.6731,
    -0.3642,
    0.6437,
    -0.3017,
    0.0997,
    0.9482,
    -0.3009,
    0.1097,
    0.9473,
    -0.6731,
    -0.3642,
    0.6437,
    -0.3413,
    -0.7073,
    0.6191,
    -0.3017,
    0.0997,
    0.9482,
    0.1654,
    -0.3802,
    0.91,
    0.2682,
    -0.9417,
    -0.2032,
    0.2925,
    -0.9523,
    0.0874,
    0.4677,
    -0.6998,
    -0.54,
    0.4798,
    -0.6987,
    -0.5307,
    0.6904,
    -0.7211,
    -0.0582,
    -0.9137,
    -0.3878,
    -0.1213,
    -0.9092,
    -0.3948,
    -0.1321,
    -0.9068,
    -0.3128,
    0.2825,
    -0.4461,
    -0.8784,
    -0.1713,
    -0.4386,
    -0.884,
    -0.1619,
    -0.3335,
    -0.9137,
    0.2324,
    -0.4461,
    -0.8784,
    -0.1713,
    -0.3335,
    -0.9137,
    0.2324,
    0.2682,
    -0.9417,
    -0.2032,
    0.2925,
    -0.9523,
    0.0874,
    -0.4461,
    -0.8784,
    -0.1713,
    -0.4386,
    -0.884,
    -0.1619,
    -0.3372,
    -0.5648,
    -0.7532,
    0.082,
    -0.4514,
    -0.8886,
    0.1108,
    -0.456,
    -0.8831,
    0.2682,
    -0.9417,
    -0.2032,
    0.4677,
    -0.6998,
    -0.54,
    -0.9092,
    -0.3948,
    -0.1321,
    -0.6542,
    -0.2343,
    -0.7191,
    -0.4386,
    -0.884,
    -0.1619,
    -0.3372,
    -0.5648,
    -0.7532,
    -0.9416,
    0.3239,
    -0.0926,
    -0.9273,
    0.3227,
    0.1899,
    -0.758,
    0.5096,
    -0.4072,
    -0.7262,
    0.5949,
    -0.3446,
    -0.6904,
    0.7211,
    0.0582,
    -0.6542,
    -0.2343,
    -0.7191,
    -0.5586,
    0.1436,
    -0.8169,
    -0.4707,
    0.1331,
    -0.8722,
    -0.3372,
    -0.5648,
    -0.7532,
    0.082,
    -0.4514,
    -0.8886,
    -0.9416,
    0.3239,
    -0.0926,
    -0.9137,
    -0.3878,
    -0.1213,
    -0.9092,
    -0.3948,
    -0.1321,
    -0.758,
    0.5096,
    -0.4072,
    -0.6542,
    -0.2343,
    -0.7191,
    -0.5586,
    0.1436,
    -0.8169,
    -0.9416,
    0.3239,
    -0.0926,
    -0.9273,
    0.3227,
    0.1899,
    -0.9137,
    -0.3878,
    -0.1213,
    -0.9068,
    -0.3128,
    0.2825,
    0.6904,
    -0.7211,
    -0.0582,
    0.7262,
    -0.5949,
    0.3446,
    0.7555,
    -0.5176,
    0.4017,
    0.9116,
    -0.3762,
    -0.1659,
    0.9414,
    -0.3218,
    0.1011,
    0.3009,
    0.9282,
    -0.2188,
    0.5499,
    0.8181,
    0.1681,
    0.8922,
    0.3602,
    -0.2724,
    0.9093,
    0.3947,
    0.1322,
    0.9137,
    0.3878,
    0.1219,
    0.8922,
    0.3602,
    -0.2724,
    0.9093,
    0.3947,
    0.1322,
    0.9116,
    -0.3762,
    -0.1659,
    0.9414,
    -0.3218,
    0.1011,
    0.5087,
    -0.1052,
    0.8545,
    0.5169,
    -0.178,
    0.8373,
    0.6428,
    0.2519,
    0.7234,
    0.7555,
    -0.5176,
    0.4017,
    0.9093,
    0.3947,
    0.1322,
    0.9137,
    0.3878,
    0.1219,
    0.9414,
    -0.3218,
    0.1011,
    0.231,
    0.639,
    0.7337,
    0.5499,
    0.8181,
    0.1681,
    0.6428,
    0.2519,
    0.7234,
    0.9137,
    0.3878,
    0.1219,
    -0.6904,
    0.7211,
    0.0582,
    -0.5307,
    0.7179,
    0.4506,
    -0.5307,
    0.7179,
    0.4506,
    -0.325,
    0.8747,
    0.3596,
    -0.2471,
    0.9651,
    -0.087,
    -0.0181,
    0.412,
    0.911,
    0.231,
    0.639,
    0.7337,
    0.2435,
    0.6393,
    0.7294,
    0.5169,
    -0.178,
    0.8373,
    0.6428,
    0.2519,
    0.7234,
    -0.5307,
    0.7179,
    0.4506,
    -0.325,
    0.8747,
    0.3596,
    -0.0453,
    0.4124,
    0.9099,
    -0.0181,
    0.412,
    0.911,
    0.2435,
    0.6393,
    0.7294,
    -0.325,
    0.8747,
    0.3596,
    -0.2471,
    0.9651,
    -0.087,
    0.231,
    0.639,
    0.7337,
    0.2435,
    0.6393,
    0.7294,
    0.3009,
    0.9282,
    -0.2188,
    0.5499,
    0.8181,
    0.1681,
    0.4798,
    -0.6987,
    -0.5307,
    0.6904,
    -0.7211,
    -0.0582,
    0.829,
    -0.4008,
    -0.3901,
    0.9116,
    -0.3762,
    -0.1659,
    -0.4707,
    0.1331,
    -0.8722,
    -0.1733,
    0.3868,
    -0.9057,
    -0.1564,
    0.3881,
    -0.9083,
    0.082,
    -0.4514,
    -0.8886,
    0.1108,
    -0.456,
    -0.8831,
    0.2426,
    -0.0312,
    -0.9696,
    0.1108,
    -0.456,
    -0.8831,
    0.2426,
    -0.0312,
    -0.9696,
    0.4677,
    -0.6998,
    -0.54,
    0.4798,
    -0.6987,
    -0.5307,
    0.7205,
    0.2704,
    -0.6385,
    0.7269,
    0.2678,
    -0.6324,
    0.829,
    -0.4008,
    -0.3901,
    -0.1733,
    0.3868,
    -0.9057,
    0.2426,
    -0.0312,
    -0.9696,
    0.3378,
    0.7129,
    -0.6145,
    0.7269,
    0.2678,
    -0.6324,
    0.7205,
    0.2704,
    -0.6385,
    0.829,
    -0.4008,
    -0.3901,
    0.8922,
    0.3602,
    -0.2724,
    0.9116,
    -0.3762,
    -0.1659,
    -0.7262,
    0.5949,
    -0.3446,
    -0.6904,
    0.7211,
    0.0582,
    -0.5422,
    0.7391,
    -0.3997,
    -0.2471,
    0.9651,
    -0.087,
    0.3009,
    0.9282,
    -0.2188,
    0.3378,
    0.7129,
    -0.6145,
    0.7205,
    0.2704,
    -0.6385,
    0.7269,
    0.2678,
    -0.6324,
    0.8922,
    0.3602,
    -0.2724,
    -0.5422,
    0.7391,
    -0.3997,
    -0.2471,
    0.9651,
    -0.087,
    -0.1733,
    0.3868,
    -0.9057,
    -0.1564,
    0.3881,
    -0.9083,
    0.3009,
    0.9282,
    -0.2188,
    0.3378,
    0.7129,
    -0.6145,
    -0.758,
    0.5096,
    -0.4072,
    -0.7262,
    0.5949,
    -0.3446,
    -0.5586,
    0.1436,
    -0.8169,
    -0.5422,
    0.7391,
    -0.3997,
    -0.4707,
    0.1331,
    -0.8722,
    -0.1564,
    0.3881,
    -0.9083,
    -0.5437,
    -0.8319,
    0.1111,
    -0.4548,
    -0.7315,
    0.508,
    -0.4482,
    -0.7308,
    0.5149,
    0.1783,
    -0.8534,
    0.4898,
    0.1844,
    -0.857,
    0.4812,
    0.1888,
    -0.9767,
    0.1021,
    -0.9419,
    -0.1308,
    0.3093,
    -0.8279,
    0.1387,
    0.5435,
    -0.4548,
    -0.7315,
    0.508,
    -0.4482,
    -0.7308,
    0.5149,
    -0.3609,
    0.1613,
    0.9185,
    -0.3225,
    0.114,
    0.9397,
    -0.2374,
    -0.2665,
    0.9342,
    -0.9762,
    -0.208,
    0.0623,
    -0.9419,
    -0.1308,
    0.3093,
    -0.5437,
    -0.8319,
    0.1111,
    -0.4548,
    -0.7315,
    0.508,
    -0.3609,
    0.1613,
    0.9185,
    -0.3225,
    0.114,
    0.9397,
    -0.2115,
    0.5464,
    0.8104,
    -0.2043,
    0.5522,
    0.8083,
    0.3964,
    0.0532,
    0.9166,
    0.4226,
    0.4294,
    0.7981,
    0.4279,
    0.4198,
    0.8004,
    -0.9762,
    -0.208,
    0.0623,
    -0.9419,
    -0.1308,
    0.3093,
    -0.8405,
    0.5417,
    -0.0116,
    -0.8279,
    0.1387,
    0.5435,
    -0.8133,
    0.4574,
    0.3596,
    -0.2043,
    0.5522,
    0.8083,
    -0.0312,
    0.95,
    0.3107,
    0.4026,
    0.8635,
    0.3038,
    0.4226,
    0.4294,
    0.7981,
    -0.8405,
    0.5417,
    -0.0116,
    -0.8133,
    0.4574,
    0.3596,
    -0.2179,
    0.9718,
    -0.0899,
    -0.2115,
    0.5464,
    0.8104,
    -0.2043,
    0.5522,
    0.8083,
    -0.0312,
    0.95,
    0.3107,
    -0.8279,
    0.1387,
    0.5435,
    -0.8133,
    0.4574,
    0.3596,
    -0.3225,
    0.114,
    0.9397,
    -0.2115,
    0.5464,
    0.8104,
    -0.9762,
    -0.208,
    0.0623,
    -0.9409,
    -0.1351,
    -0.3107,
    -0.8512,
    0.1698,
    -0.4966,
    -0.8492,
    0.4599,
    -0.2594,
    -0.8405,
    0.5417,
    -0.0116,
    -0.4471,
    -0.0161,
    -0.8943,
    -0.4296,
    -0.4271,
    -0.7956,
    -0.4282,
    -0.4295,
    -0.7951,
    -0.3935,
    0.0177,
    -0.9191,
    0.1094,
    -0.5464,
    -0.8303,
    0.3009,
    -0.1284,
    -0.945,
    0.3538,
    -0.2547,
    -0.9,
    -0.9762,
    -0.208,
    0.0623,
    -0.9409,
    -0.1351,
    -0.3107,
    -0.5437,
    -0.8319,
    0.1111,
    -0.4296,
    -0.4271,
    -0.7956,
    -0.4282,
    -0.4295,
    -0.7951,
    -0.3834,
    -0.8738,
    -0.2991,
    -0.9409,
    -0.1351,
    -0.3107,
    -0.8512,
    0.1698,
    -0.4966,
    -0.4282,
    -0.4295,
    -0.7951,
    -0.3935,
    0.0177,
    -0.9191,
    -0.4296,
    -0.4271,
    -0.7956,
    -0.3834,
    -0.8738,
    -0.2991,
    0.1094,
    -0.5464,
    -0.8303,
    0.1395,
    -0.9396,
    -0.3125,
    -0.2179,
    0.9718,
    -0.0899,
    -0.192,
    0.8503,
    -0.49,
    -0.1865,
    0.8474,
    -0.4972,
    0.3506,
    0.7787,
    -0.5202,
    0.581,
    0.8055,
    -0.1167,
    -0.8512,
    0.1698,
    -0.4966,
    -0.8492,
    0.4599,
    -0.2594,
    -0.4471,
    -0.0161,
    -0.8943,
    -0.3935,
    0.0177,
    -0.9191,
    -0.192,
    0.8503,
    -0.49,
    -0.1865,
    0.8474,
    -0.4972,
    -0.1779,
    0.3512,
    -0.9192,
    -0.8492,
    0.4599,
    -0.2594,
    -0.8405,
    0.5417,
    -0.0116,
    -0.2179,
    0.9718,
    -0.0899,
    -0.192,
    0.8503,
    -0.49,
    0.8478,
    -0.4657,
    0.2537,
    0.8499,
    -0.1775,
    0.4961,
    0.8599,
    -0.5102,
    0.014,
    0.9405,
    0.1281,
    0.3148,
    0.9687,
    0.2365,
    -0.0747,
    -0.3609,
    0.1613,
    0.9185,
    -0.2374,
    -0.2665,
    0.9342,
    0.1964,
    -0.3515,
    0.9153,
    0.3964,
    0.0532,
    0.9166,
    0.4369,
    -0.0524,
    0.898,
    0.1844,
    -0.857,
    0.4812,
    0.1888,
    -0.9767,
    0.1021,
    0.8478,
    -0.4657,
    0.2537,
    0.8599,
    -0.5102,
    0.014,
    0.1783,
    -0.8534,
    0.4898,
    0.1844,
    -0.857,
    0.4812,
    0.1964,
    -0.3515,
    0.9153,
    0.4369,
    -0.0524,
    0.898,
    0.8478,
    -0.4657,
    0.2537,
    0.8499,
    -0.1775,
    0.4961,
    -0.4482,
    -0.7308,
    0.5149,
    -0.2374,
    -0.2665,
    0.9342,
    0.1783,
    -0.8534,
    0.4898,
    0.1964,
    -0.3515,
    0.9153,
    -0.2179,
    0.9718,
    -0.0899,
    -0.0312,
    0.95,
    0.3107,
    0.4026,
    0.8635,
    0.3038,
    0.581,
    0.8055,
    -0.1167,
    0.4026,
    0.8635,
    0.3038,
    0.4226,
    0.4294,
    0.7981,
    0.4279,
    0.4198,
    0.8004,
    0.581,
    0.8055,
    -0.1167,
    0.9405,
    0.1281,
    0.3148,
    0.9687,
    0.2365,
    -0.0747,
    0.3964,
    0.0532,
    0.9166,
    0.4279,
    0.4198,
    0.8004,
    0.4369,
    -0.0524,
    0.898,
    0.8499,
    -0.1775,
    0.4961,
    0.9405,
    0.1281,
    0.3148,
    -0.5437,
    -0.8319,
    0.1111,
    -0.3834,
    -0.8738,
    -0.2991,
    0.1395,
    -0.9396,
    -0.3125,
    0.1548,
    -0.9431,
    -0.2943,
    0.1888,
    -0.9767,
    0.1021,
    0.1094,
    -0.5464,
    -0.8303,
    0.1395,
    -0.9396,
    -0.3125,
    0.1548,
    -0.9431,
    -0.2943,
    0.3538,
    -0.2547,
    -0.9,
    0.7912,
    -0.2936,
    -0.5364,
    0.8229,
    -0.5208,
    -0.2273,
    0.1548,
    -0.9431,
    -0.2943,
    0.1888,
    -0.9767,
    0.1021,
    0.8229,
    -0.5208,
    -0.2273,
    0.8599,
    -0.5102,
    0.014,
    0.7912,
    -0.2936,
    -0.5364,
    0.8229,
    -0.5208,
    -0.2273,
    0.8599,
    -0.5102,
    0.014,
    0.9067,
    0.0279,
    -0.4208,
    0.9687,
    0.2365,
    -0.0747,
    -0.4471,
    -0.0161,
    -0.8943,
    -0.1779,
    0.3512,
    -0.9192,
    0.3009,
    -0.1284,
    -0.945,
    0.3457,
    0.2503,
    -0.9043,
    0.3554,
    0.2316,
    -0.9056,
    0.3457,
    0.2503,
    -0.9043,
    0.3506,
    0.7787,
    -0.5202,
    0.3554,
    0.2316,
    -0.9056,
    0.581,
    0.8055,
    -0.1167,
    0.9067,
    0.0279,
    -0.4208,
    0.9687,
    0.2365,
    -0.0747,
    0.3009,
    -0.1284,
    -0.945,
    0.3457,
    0.2503,
    -0.9043,
    0.3538,
    -0.2547,
    -0.9,
    0.7912,
    -0.2936,
    -0.5364,
    0.9067,
    0.0279,
    -0.4208,
    -0.1865,
    0.8474,
    -0.4972,
    -0.1779,
    0.3512,
    -0.9192,
    0.3506,
    0.7787,
    -0.5202,
    0.3554,
    0.2316,
    -0.9056,
    -0.5906,
    -0.7419,
    0.3174,
    -0.3397,
    -0.6541,
    0.6759,
    0.1388,
    -0.741,
    0.657,
    0.2857,
    -0.9208,
    0.2654,
    0.3347,
    -0.903,
    0.2693,
    -0.9544,
    -0.2324,
    0.1873,
    -0.9449,
    -0.2694,
    0.1862,
    -0.86,
    0.0854,
    0.5031,
    -0.6315,
    -0.7158,
    0.2981,
    -0.5906,
    -0.7419,
    0.3174,
    -0.3397,
    -0.6541,
    0.6759,
    -0.3396,
    0.0126,
    0.9405,
    -0.3308,
    1e-3,
    0.9437,
    -0.3396,
    0.0126,
    0.9405,
    -0.3308,
    1e-3,
    0.9437,
    -0.2194,
    0.6686,
    0.7105,
    -0.207,
    0.6762,
    0.707,
    0.3845,
    -0.1328,
    0.9135,
    0.398,
    -0.1248,
    0.9089,
    0.5152,
    0.5316,
    0.6723,
    0.524,
    0.5197,
    0.6748,
    -0.9544,
    -0.2324,
    0.1873,
    -0.86,
    0.0854,
    0.5031,
    -0.8096,
    0.5798,
    -0.0915,
    -0.7839,
    0.5141,
    0.348,
    -0.2194,
    0.6686,
    0.7105,
    -0.0377,
    0.9938,
    0.1043,
    0.4263,
    0.9012,
    0.0784,
    0.524,
    0.5197,
    0.6748,
    -0.8096,
    0.5798,
    -0.0915,
    -0.7839,
    0.5141,
    0.348,
    -0.7807,
    0.6127,
    -0.1227,
    -0.33,
    0.9043,
    -0.2709,
    -0.294,
    0.9175,
    -0.2678,
    -0.2194,
    0.6686,
    0.7105,
    -0.207,
    0.6762,
    0.707,
    -0.0377,
    0.9938,
    0.1043,
    -0.86,
    0.0854,
    0.5031,
    -0.7839,
    0.5141,
    0.348,
    -0.3308,
    1e-3,
    0.9437,
    -0.207,
    0.6762,
    0.707,
    -0.9544,
    -0.2324,
    0.1873,
    -0.949,
    -0.179,
    -0.2595,
    -0.9449,
    -0.2694,
    0.1862,
    -0.8655,
    0.2716,
    -0.4209,
    -0.8096,
    0.5798,
    -0.0915,
    -0.7807,
    0.6127,
    -0.1227,
    -0.949,
    -0.179,
    -0.2595,
    -0.9449,
    -0.2694,
    0.1862,
    -0.6315,
    -0.7158,
    0.2981,
    -0.5154,
    -0.5157,
    -0.6844,
    -0.5058,
    -0.5287,
    -0.6816,
    -0.4387,
    -0.8947,
    -0.0836,
    -0.949,
    -0.179,
    -0.2595,
    -0.8655,
    0.2716,
    -0.4209,
    -0.5154,
    -0.5157,
    -0.6844,
    -0.398,
    0.1247,
    -0.9089,
    -0.5058,
    -0.5287,
    -0.6816,
    -0.4387,
    -0.8947,
    -0.0836,
    0.0374,
    -0.9945,
    -0.098,
    0.2194,
    -0.6686,
    -0.7106,
    -0.33,
    0.9043,
    -0.2709,
    -0.294,
    0.9175,
    -0.2678,
    -0.1386,
    0.7451,
    -0.6524,
    0.3512,
    0.6457,
    -0.678,
    0.5927,
    0.7442,
    -0.3081,
    0.6281,
    0.7111,
    -0.3159,
    -0.8655,
    0.2716,
    -0.4209,
    -0.7807,
    0.6127,
    -0.1227,
    -0.398,
    0.1247,
    -0.9089,
    -0.3845,
    0.1328,
    -0.9135,
    -0.33,
    0.9043,
    -0.2709,
    -0.1386,
    0.7451,
    -0.6524,
    0.7827,
    -0.6102,
    0.1222,
    0.8055,
    -0.5845,
    0.098,
    0.8641,
    -0.2736,
    0.4224,
    0.9498,
    0.1657,
    0.2652,
    0.9554,
    0.2319,
    -0.1827,
    0.1388,
    -0.741,
    0.657,
    0.3347,
    -0.903,
    0.2693,
    0.3845,
    -0.1328,
    0.9135,
    0.398,
    -0.1248,
    0.9089,
    0.7827,
    -0.6102,
    0.1222,
    0.8641,
    -0.2736,
    0.4224,
    0.398,
    -0.1248,
    0.9089,
    0.5152,
    0.5316,
    0.6723,
    0.8641,
    -0.2736,
    0.4224,
    0.9498,
    0.1657,
    0.2652,
    -0.3397,
    -0.6541,
    0.6759,
    -0.3396,
    0.0126,
    0.9405,
    0.1388,
    -0.741,
    0.657,
    0.3845,
    -0.1328,
    0.9135,
    -0.294,
    0.9175,
    -0.2678,
    -0.0377,
    0.9938,
    0.1043,
    0.4263,
    0.9012,
    0.0784,
    0.5927,
    0.7442,
    -0.3081,
    0.4263,
    0.9012,
    0.0784,
    0.5152,
    0.5316,
    0.6723,
    0.524,
    0.5197,
    0.6748,
    0.5927,
    0.7442,
    -0.3081,
    0.6281,
    0.7111,
    -0.3159,
    0.9422,
    0.2649,
    -0.2053,
    0.9498,
    0.1657,
    0.2652,
    0.9554,
    0.2319,
    -0.1827,
    -0.6315,
    -0.7158,
    0.2981,
    -0.5906,
    -0.7419,
    0.3174,
    -0.4387,
    -0.8947,
    -0.0836,
    0.0374,
    -0.9945,
    -0.098,
    0.2857,
    -0.9208,
    0.2654,
    0.0374,
    -0.9945,
    -0.098,
    0.207,
    -0.6762,
    -0.707,
    0.2194,
    -0.6686,
    -0.7106,
    0.2857,
    -0.9208,
    0.2654,
    0.3347,
    -0.903,
    0.2693,
    0.7827,
    -0.6102,
    0.1222,
    0.7844,
    -0.5129,
    -0.3487,
    0.8055,
    -0.5845,
    0.098,
    0.207,
    -0.6762,
    -0.707,
    0.3296,
    -0.0209,
    -0.9439,
    0.7844,
    -0.5129,
    -0.3487,
    0.86,
    -0.0716,
    -0.5053,
    0.7844,
    -0.5129,
    -0.3487,
    0.8055,
    -0.5845,
    0.098,
    0.86,
    -0.0716,
    -0.5053,
    0.9422,
    0.2649,
    -0.2053,
    0.9554,
    0.2319,
    -0.1827,
    -0.5154,
    -0.5157,
    -0.6844,
    -0.5058,
    -0.5287,
    -0.6816,
    -0.398,
    0.1247,
    -0.9089,
    -0.3845,
    0.1328,
    -0.9135,
    0.207,
    -0.6762,
    -0.707,
    0.2194,
    -0.6686,
    -0.7106,
    0.3199,
    -82e-4,
    -0.9474,
    0.3296,
    -0.0209,
    -0.9439,
    0.3199,
    -82e-4,
    -0.9474,
    0.3296,
    -0.0209,
    -0.9439,
    0.3512,
    0.6457,
    -0.678,
    0.6281,
    0.7111,
    -0.3159,
    0.86,
    -0.0716,
    -0.5053,
    0.9422,
    0.2649,
    -0.2053,
    -0.3845,
    0.1328,
    -0.9135,
    -0.1386,
    0.7451,
    -0.6524,
    0.3199,
    -82e-4,
    -0.9474,
    0.3512,
    0.6457,
    -0.678,
    0.3138,
    -0.9071,
    0.2804,
    0.5194,
    -0.6248,
    0.583,
    0.7242,
    -0.4543,
    0.5188,
    0.7497,
    -0.6464,
    0.1421,
    -0.4298,
    0.2132,
    0.8774,
    -0.4298,
    0.2143,
    0.8771,
    -0.1822,
    0.5313,
    0.8273,
    0.0705,
    -0.2118,
    0.9748,
    0.0789,
    -0.2105,
    0.9744,
    0.3466,
    0.0606,
    0.9361,
    0.0705,
    -0.2118,
    0.9748,
    0.3466,
    0.0606,
    0.9361,
    0.4559,
    0.047,
    0.8888,
    0.5194,
    -0.6248,
    0.583,
    0.7242,
    -0.4543,
    0.5188,
    0.7375,
    -0.3576,
    0.5729,
    -0.3775,
    -0.6182,
    0.6894,
    -0.2596,
    -0.9045,
    0.3383,
    0.0705,
    -0.2118,
    0.9748,
    0.0789,
    -0.2105,
    0.9744,
    0.3138,
    -0.9071,
    0.2804,
    0.5194,
    -0.6248,
    0.583,
    -0.9638,
    0.2657,
    0.0223,
    -0.7781,
    0.5369,
    0.3261,
    -0.7497,
    0.6464,
    -0.1421,
    -0.6406,
    0.7225,
    0.2601,
    -0.9001,
    -0.3673,
    0.2343,
    -0.7137,
    -0.3166,
    0.6247,
    -0.3775,
    -0.6182,
    0.6894,
    -0.2596,
    -0.9045,
    0.3383,
    -0.7781,
    0.5369,
    0.3261,
    -0.6406,
    0.7225,
    0.2601,
    -0.6406,
    0.7225,
    0.2601,
    -0.4298,
    0.2143,
    0.8771,
    -0.1837,
    0.5401,
    0.8213,
    -0.1822,
    0.5313,
    0.8273,
    -0.9638,
    0.2657,
    0.0223,
    -0.9001,
    -0.3673,
    0.2343,
    -0.7781,
    0.5369,
    0.3261,
    -0.7137,
    -0.3166,
    0.6247,
    -0.4298,
    0.2132,
    0.8774,
    -0.4298,
    0.2143,
    0.8771,
    -0.7137,
    -0.3166,
    0.6247,
    -0.4298,
    0.2132,
    0.8774,
    -0.3775,
    -0.6182,
    0.6894,
    0.0789,
    -0.2105,
    0.9744,
    0.3138,
    -0.9071,
    0.2804,
    0.4662,
    -0.8664,
    -0.1792,
    0.5987,
    -0.7217,
    -0.3474,
    0.6675,
    -0.6929,
    -0.2728,
    0.7497,
    -0.6464,
    0.1421,
    -0.9001,
    -0.3673,
    0.2343,
    -0.8511,
    -0.5017,
    -0.1547,
    -0.845,
    -0.5091,
    -0.1635,
    -0.4348,
    -0.8966,
    -0.0838,
    -0.2596,
    -0.9045,
    0.3383,
    -0.4348,
    -0.8966,
    -0.0838,
    -0.2596,
    -0.9045,
    0.3383,
    -0.1048,
    -0.7675,
    -0.6324,
    -0.0923,
    -0.7663,
    -0.6358,
    0.3138,
    -0.9071,
    0.2804,
    0.4662,
    -0.8664,
    -0.1792,
    -0.8511,
    -0.5017,
    -0.1547,
    -0.54,
    -0.4136,
    -0.7331,
    -0.4348,
    -0.8966,
    -0.0838,
    -0.0923,
    -0.7663,
    -0.6358,
    -0.1048,
    -0.7675,
    -0.6324,
    0.1734,
    -0.5407,
    -0.8232,
    0.2649,
    -0.5328,
    -0.8037,
    0.4662,
    -0.8664,
    -0.1792,
    0.6675,
    -0.6929,
    -0.2728,
    -0.9638,
    0.2657,
    0.0223,
    -0.9498,
    0.2164,
    -0.2261,
    -0.7497,
    0.6464,
    -0.1421,
    -0.6997,
    0.3977,
    -0.5935,
    -0.54,
    -0.4136,
    -0.7331,
    -0.4305,
    -62e-4,
    -0.9026,
    -0.4034,
    -0.015,
    -0.9149,
    -0.1048,
    -0.7675,
    -0.6324,
    -0.0923,
    -0.7663,
    -0.6358,
    0.1734,
    -0.5407,
    -0.8232,
    -0.9498,
    0.2164,
    -0.2261,
    -0.8511,
    -0.5017,
    -0.1547,
    -0.845,
    -0.5091,
    -0.1635,
    -0.6997,
    0.3977,
    -0.5935,
    -0.6916,
    0.3934,
    -0.6057,
    -0.54,
    -0.4136,
    -0.7331,
    -0.4305,
    -62e-4,
    -0.9026,
    -0.9638,
    0.2657,
    0.0223,
    -0.9498,
    0.2164,
    -0.2261,
    -0.9001,
    -0.3673,
    0.2343,
    -0.845,
    -0.5091,
    -0.1635,
    0.7242,
    -0.4543,
    0.5188,
    0.7375,
    -0.3576,
    0.5729,
    0.7497,
    -0.6464,
    0.1421,
    0.9457,
    -0.2054,
    0.2518,
    0.9532,
    -0.3023,
    18e-4,
    0.2945,
    0.8966,
    -0.3306,
    0.4391,
    0.8938,
    0.0912,
    0.8458,
    0.5127,
    0.1477,
    0.8473,
    0.5108,
    0.1454,
    0.8826,
    0.4089,
    -0.2319,
    0.8458,
    0.5127,
    0.1477,
    0.8826,
    0.4089,
    -0.2319,
    0.9457,
    -0.2054,
    0.2518,
    0.9532,
    -0.3023,
    18e-4,
    0.4559,
    0.047,
    0.8888,
    0.5338,
    0.4191,
    0.7344,
    0.7375,
    -0.3576,
    0.5729,
    0.8458,
    0.5127,
    0.1477,
    0.8473,
    0.5108,
    0.1454,
    0.9457,
    -0.2054,
    0.2518,
    0.1017,
    0.7621,
    0.6395,
    0.4391,
    0.8938,
    0.0912,
    0.5338,
    0.4191,
    0.7344,
    0.8473,
    0.5108,
    0.1454,
    -0.7497,
    0.6464,
    -0.1421,
    -0.6406,
    0.7225,
    0.2601,
    -0.6406,
    0.7225,
    0.2601,
    -0.4437,
    0.8801,
    0.1689,
    -0.3552,
    0.8987,
    -0.2573,
    -0.1837,
    0.5401,
    0.8213,
    -0.1822,
    0.5313,
    0.8273,
    0.0942,
    0.7615,
    0.6413,
    0.1017,
    0.7621,
    0.6395,
    0.3466,
    0.0606,
    0.9361,
    0.4559,
    0.047,
    0.8888,
    0.5338,
    0.4191,
    0.7344,
    -0.6406,
    0.7225,
    0.2601,
    -0.4437,
    0.8801,
    0.1689,
    -0.1837,
    0.5401,
    0.8213,
    0.0942,
    0.7615,
    0.6413,
    -0.4437,
    0.8801,
    0.1689,
    -0.3552,
    0.8987,
    -0.2573,
    0.0942,
    0.7615,
    0.6413,
    0.1017,
    0.7621,
    0.6395,
    0.2945,
    0.8966,
    -0.3306,
    0.4391,
    0.8938,
    0.0912,
    0.5987,
    -0.7217,
    -0.3474,
    0.7497,
    -0.6464,
    0.1421,
    0.9016,
    -0.3708,
    -0.2226,
    0.9532,
    -0.3023,
    18e-4,
    -0.4034,
    -0.015,
    -0.9149,
    0.018,
    0.1349,
    -0.9907,
    0.1734,
    -0.5407,
    -0.8232,
    0.2649,
    -0.5328,
    -0.8037,
    0.3627,
    -0.1552,
    -0.9189,
    0.2649,
    -0.5328,
    -0.8037,
    0.3627,
    -0.1552,
    -0.9189,
    0.5987,
    -0.7217,
    -0.3474,
    0.6675,
    -0.6929,
    -0.2728,
    0.7644,
    0.2362,
    -0.5999,
    0.7709,
    0.2353,
    -0.5919,
    0.9016,
    -0.3708,
    -0.2226,
    0.018,
    0.1349,
    -0.9907,
    0.2728,
    0.6849,
    -0.6756,
    0.3627,
    -0.1552,
    -0.9189,
    0.7644,
    0.2362,
    -0.5999,
    0.7709,
    0.2353,
    -0.5919,
    0.8826,
    0.4089,
    -0.2319,
    0.9016,
    -0.3708,
    -0.2226,
    0.9532,
    -0.3023,
    18e-4,
    -0.7497,
    0.6464,
    -0.1421,
    -0.6997,
    0.3977,
    -0.5935,
    -0.6916,
    0.3934,
    -0.6057,
    -0.4236,
    0.7536,
    -0.5027,
    -0.3552,
    0.8987,
    -0.2573,
    0.2728,
    0.6849,
    -0.6756,
    0.2792,
    0.6709,
    -0.6869,
    0.2945,
    0.8966,
    -0.3306,
    0.7644,
    0.2362,
    -0.5999,
    0.7709,
    0.2353,
    -0.5919,
    0.8826,
    0.4089,
    -0.2319,
    -0.4236,
    0.7536,
    -0.5027,
    -0.3552,
    0.8987,
    -0.2573,
    0.2792,
    0.6709,
    -0.6869,
    0.2945,
    0.8966,
    -0.3306,
    -0.6916,
    0.3934,
    -0.6057,
    -0.4305,
    -62e-4,
    -0.9026,
    -0.4236,
    0.7536,
    -0.5027,
    -0.4034,
    -0.015,
    -0.9149,
    0.018,
    0.1349,
    -0.9907,
    0.2728,
    0.6849,
    -0.6756,
    0.2792,
    0.6709,
    -0.6869
  ]);
  var texcoord_arr4 = Float32Array.from([
    0.1999,
    0.2854,
    0.1999,
    0.2854,
    0.1999,
    0.2854,
    0.1999,
    0.2854,
    0.4611,
    0.0749,
    0.4611,
    0.0749,
    0.4611,
    0.0749,
    0.4611,
    0.0749,
    0.4611,
    0.0749,
    0.4611,
    0.0749,
    0.4611,
    0.0749,
    0.4611,
    0.9646,
    0.4611,
    0.9646,
    0.4611,
    0.9646,
    0.4611,
    0.9646,
    0.375,
    0.0749,
    0.1999,
    0.25,
    0.1999,
    0.25,
    0.1999,
    0.25,
    0.375,
    0.0749,
    0.375,
    0.9794,
    0.375,
    0.9794,
    0.1505,
    0.2585,
    0.4136,
    0,
    0.4136,
    0,
    0.1505,
    0.2585,
    0.4611,
    1,
    0.4611,
    1,
    0.4611,
    1,
    0.4611,
    0,
    0.4611,
    0,
    0.4611,
    0,
    0.5389,
    0.0749,
    0.5389,
    0.0749,
    0.5389,
    0.0749,
    0.5389,
    0.0749,
    0.5389,
    0.0749,
    0.5389,
    0.0749,
    0.8001,
    0.2854,
    0.8001,
    0.2854,
    0.8001,
    0.2854,
    0.8001,
    0.2854,
    0.8001,
    0.2854,
    0.5389,
    0.9646,
    0.5389,
    0.9646,
    0.5389,
    0.9646,
    0.5389,
    0.9646,
    0.5389,
    0.9646,
    0.8001,
    0.25,
    0.625,
    0.0749,
    0.8001,
    0.25,
    0.8001,
    0.25,
    0.625,
    0.0749,
    0.5749,
    1,
    0.5749,
    1,
    0.6042,
    0.0255,
    0.875,
    0.2659,
    0.875,
    0.2659,
    0.6042,
    0.0255,
    0.625,
    0.9646,
    0.625,
    0.9646,
    0.875,
    0.2854,
    0.875,
    0.2854,
    0.1999,
    0.4646,
    0.1999,
    0.4646,
    0.1999,
    0.4646,
    0.1999,
    0.4646,
    0.1999,
    0.4646,
    0.4611,
    0.7854,
    0.4611,
    0.7854,
    0.4611,
    0.7854,
    0.4611,
    0.7854,
    0.4611,
    0.7854,
    0.4611,
    0.6751,
    0.4611,
    0.6751,
    0.4611,
    0.6751,
    0.4611,
    0.6751,
    0.4611,
    0.6751,
    0.375,
    0.7854,
    0.375,
    0.7854,
    0.125,
    0.4646,
    0.125,
    0.4646,
    0.3997,
    0.7261,
    0.4272,
    0.75,
    0.3997,
    0.7261,
    0.3997,
    0.7261,
    0.125,
    0.4841,
    0.125,
    0.4841,
    0.3997,
    0.7261,
    0.1999,
    0.5,
    0.375,
    0.6751,
    0.375,
    0.6751,
    0.375,
    0.6751,
    0.1999,
    0.5,
    0.1999,
    0.5,
    0.8001,
    0.4646,
    0.8001,
    0.4646,
    0.8001,
    0.4646,
    0.8001,
    0.4646,
    0.5389,
    0.6751,
    0.5389,
    0.6751,
    0.5389,
    0.6751,
    0.5389,
    0.6751,
    0.5389,
    0.6751,
    0.5389,
    0.6751,
    0.5389,
    0.7854,
    0.5389,
    0.7854,
    0.5389,
    0.7854,
    0.5389,
    0.7854,
    0.5389,
    0.7854,
    0.625,
    0.7659,
    0.625,
    0.7659,
    0.5974,
    0.7287,
    0.8297,
    0.5,
    0.5974,
    0.7287,
    0.8297,
    0.5,
    0.8297,
    0.5,
    0.5389,
    0.75,
    0.5389,
    0.75,
    0.5389,
    0.75,
    0.5389,
    0.75,
    0.5389,
    0.75,
    0.625,
    0.7854,
    0.625,
    0.7854,
    0.875,
    0.4646,
    0.875,
    0.4646,
    0.3001,
    0.2854,
    0.3001,
    0.2854,
    0.3001,
    0.2854,
    0.3001,
    0.2854,
    0.3001,
    0.2854,
    0.4611,
    0.2854,
    0.4611,
    0.2854,
    0.4611,
    0.2854,
    0.4611,
    0.2854,
    0.4611,
    0.2854,
    0.4611,
    0.1751,
    0.4611,
    0.1751,
    0.4611,
    0.1751,
    0.4611,
    0.1751,
    0.4611,
    0.1751,
    0.375,
    0.2854,
    0.375,
    0.2854,
    0.375,
    0.2854,
    0.375,
    0.2854,
    0.3629,
    0.2458,
    0.3842,
    0.2244,
    0.3842,
    0.2244,
    0.3842,
    0.2244,
    0.3842,
    0.2244,
    0.3842,
    0.2244,
    0.3842,
    0.2244,
    0.4611,
    0.25,
    0.4611,
    0.25,
    0.4611,
    0.25,
    0.4611,
    0.25,
    0.4611,
    0.25,
    0.6999,
    0.2854,
    0.6999,
    0.2854,
    0.6999,
    0.2854,
    0.6999,
    0.2854,
    0.6999,
    0.2854,
    0.6999,
    0.2854,
    0.5389,
    0.1751,
    0.5389,
    0.1751,
    0.5389,
    0.1751,
    0.5389,
    0.1751,
    0.5389,
    0.1751,
    0.5389,
    0.2854,
    0.5389,
    0.2854,
    0.5389,
    0.2854,
    0.5389,
    0.2854,
    0.5389,
    0.2854,
    0.6999,
    0.25,
    0.625,
    0.1751,
    0.625,
    0.1751,
    0.625,
    0.1751,
    0.6999,
    0.25,
    0.5993,
    0.2538,
    0.5993,
    0.2538,
    0.5993,
    0.2538,
    0.5993,
    0.2538,
    0.5993,
    0.2538,
    0.5993,
    0.2538,
    0.5993,
    0.2538,
    0.625,
    0.2854,
    0.625,
    0.2854,
    0.625,
    0.2854,
    0.625,
    0.2854,
    0.3001,
    0.4646,
    0.3001,
    0.4646,
    0.3001,
    0.4646,
    0.3001,
    0.4646,
    0.3001,
    0.4646,
    0.4611,
    0.5749,
    0.4611,
    0.5749,
    0.4611,
    0.5749,
    0.4611,
    0.5749,
    0.4611,
    0.5749,
    0.4611,
    0.4646,
    0.4611,
    0.4646,
    0.4611,
    0.4646,
    0.4611,
    0.4646,
    0.4611,
    0.4646,
    0.3763,
    0.514,
    0.3582,
    0.496,
    0.3763,
    0.514,
    0.3763,
    0.514,
    0.3763,
    0.514,
    0.3763,
    0.514,
    0.4611,
    0.5,
    0.4611,
    0.5,
    0.4611,
    0.5,
    0.4611,
    0.5,
    0.4611,
    0.5,
    0.4611,
    0.5,
    0.375,
    0.4646,
    0.375,
    0.4646,
    0.375,
    0.4646,
    0.375,
    0.4646,
    0.6999,
    0.4646,
    0.6999,
    0.4646,
    0.6999,
    0.4646,
    0.6999,
    0.4646,
    0.6999,
    0.4646,
    0.6999,
    0.4646,
    0.5389,
    0.4646,
    0.5389,
    0.4646,
    0.5389,
    0.4646,
    0.5389,
    0.4646,
    0.5389,
    0.4646,
    0.5389,
    0.5749,
    0.5389,
    0.5749,
    0.5389,
    0.5749,
    0.5389,
    0.5749,
    0.5389,
    0.5749,
    0.5389,
    0.5749,
    0.625,
    0.4646,
    0.625,
    0.4646,
    0.625,
    0.4646,
    0.625,
    0.4646,
    0.5945,
    0.5045,
    0.5945,
    0.5045,
    0.5945,
    0.5045,
    0.5945,
    0.5045,
    0.5945,
    0.5045,
    0.5945,
    0.5045,
    0.625,
    0.5749,
    0.625,
    0.5749,
    0.6999,
    0.5,
    0.625,
    0.5749,
    0.6999,
    0.5,
    0.1459,
    0.2688,
    0.1459,
    0.2688,
    0.1459,
    0.2688,
    0.1459,
    0.2688,
    0.5,
    0.0214,
    0.5,
    0.0214,
    0.5,
    0.0214,
    0.5,
    0.0214,
    0.375,
    0.9922,
    0.375,
    0.9922,
    0.1371,
    0.25,
    0.4168,
    52e-4,
    0.1371,
    0.25,
    0.4168,
    52e-4,
    0.375,
    0.9816,
    0.375,
    0.9816,
    0.125,
    0.2684,
    0.125,
    0.2684,
    0.8541,
    0.2688,
    0.8541,
    0.2688,
    0.8541,
    0.2688,
    0.8541,
    0.2688,
    0.4999,
    0.9812,
    0.4999,
    0.9812,
    0.4999,
    0.9812,
    0.4999,
    0.9812,
    0.4999,
    0.9812,
    0.4999,
    0.9812,
    0.5704,
    1,
    0.5704,
    1,
    0.625,
    0.0125,
    0.8689,
    0.2555,
    0.625,
    0.0125,
    0.8689,
    0.2555,
    0.625,
    0.9816,
    0.625,
    0.9816,
    0.875,
    0.2684,
    0.875,
    0.2684,
    0.5008,
    1,
    0.5008,
    1,
    0.5008,
    0,
    0.5008,
    0,
    0.1443,
    0.4812,
    0.1443,
    0.4812,
    0.1443,
    0.4812,
    0.1443,
    0.4812,
    0.503,
    0.7688,
    0.503,
    0.7688,
    0.503,
    0.7688,
    0.503,
    0.7688,
    0.4078,
    0.7553,
    0.4078,
    0.7553,
    0.125,
    0.4883,
    0.375,
    0.7411,
    0.375,
    0.7411,
    0.125,
    0.4883,
    0.4995,
    0.75,
    0.4995,
    0.75,
    0.4995,
    0.75,
    0.4995,
    0.75,
    0.375,
    0.7309,
    0.1441,
    0.5,
    0.1441,
    0.5,
    0.375,
    0.7309,
    0.8557,
    0.4812,
    0.8557,
    0.4812,
    0.8557,
    0.4812,
    0.8557,
    0.4812,
    0.4994,
    0.7312,
    0.4994,
    0.7312,
    0.4994,
    0.7312,
    0.4994,
    0.7312,
    0.4994,
    0.7312,
    0.4994,
    0.7312,
    0.625,
    0.7309,
    0.8559,
    0.5,
    0.625,
    0.7309,
    0.8559,
    0.5,
    0.625,
    0.7615,
    0.625,
    0.7615,
    0.5783,
    0.75,
    0.5783,
    0.75,
    0.8682,
    0.4956,
    0.8682,
    0.4956,
    0.3541,
    0.2688,
    0.3541,
    0.2688,
    0.3541,
    0.2688,
    0.3541,
    0.2688,
    0.4995,
    0.2687,
    0.4995,
    0.2687,
    0.4995,
    0.2687,
    0.4995,
    0.2687,
    0.4995,
    0.2687,
    0.388,
    0.2551,
    0.388,
    0.2551,
    0.388,
    0.2551,
    0.388,
    0.2551,
    0.388,
    0.2551,
    0.388,
    0.2551,
    0.4993,
    0.25,
    0.4993,
    0.25,
    0.4993,
    0.25,
    0.4993,
    0.25,
    0.3541,
    0.25,
    0.375,
    0.2291,
    0.3541,
    0.25,
    0.375,
    0.2291,
    0.6459,
    0.2688,
    0.6459,
    0.2688,
    0.6459,
    0.2688,
    0.6459,
    0.2688,
    0.5,
    0.2286,
    0.5,
    0.2286,
    0.5,
    0.2286,
    0.5,
    0.2286,
    0.5,
    0.2286,
    0.6141,
    0.2458,
    0.6202,
    0.2518,
    0.6141,
    0.2458,
    0.6141,
    0.2458,
    0.6141,
    0.2458,
    0.6141,
    0.2458,
    0.625,
    0.2682,
    0.625,
    0.2682,
    0.625,
    0.2682,
    0.625,
    0.2682,
    0.3557,
    0.4812,
    0.3557,
    0.4812,
    0.3557,
    0.4812,
    0.3557,
    0.4812,
    0.5016,
    0.5188,
    0.5016,
    0.5188,
    0.5016,
    0.5188,
    0.5016,
    0.5188,
    0.5016,
    0.5188,
    0.5016,
    0.5188,
    0.3557,
    0.5,
    0.375,
    0.5193,
    0.3557,
    0.5,
    0.375,
    0.5193,
    0.3837,
    0.4926,
    0.3837,
    0.4926,
    0.3837,
    0.4926,
    0.3837,
    0.4926,
    0.3837,
    0.4926,
    0.3837,
    0.4926,
    0.4996,
    0.5,
    0.4996,
    0.5,
    0.4996,
    0.5,
    0.4996,
    0.5,
    0.6443,
    0.4812,
    0.6443,
    0.4812,
    0.6443,
    0.4812,
    0.6443,
    0.4812,
    0.501,
    0.4813,
    0.501,
    0.4813,
    0.501,
    0.4813,
    0.501,
    0.4813,
    0.6129,
    0.4955,
    0.6129,
    0.4955,
    0.6129,
    0.4955,
    0.6129,
    0.4955,
    0.6129,
    0.4955,
    0.6129,
    0.4955,
    0.625,
    0.5192,
    0.6442,
    0.5,
    0.625,
    0.5192,
    0.6442,
    0.5,
    0.2033,
    0.2824,
    0.2033,
    0.2824,
    0.2033,
    0.2824,
    0.2033,
    0.2824,
    0.2033,
    0.2824,
    0.465,
    0.0783,
    0.465,
    0.0783,
    0.465,
    0.0783,
    0.465,
    0.0783,
    0.465,
    0.0783,
    0.465,
    0.9676,
    0.465,
    0.9676,
    0.465,
    0.9676,
    0.465,
    0.9676,
    0.465,
    0.9676,
    0.2033,
    0.25,
    0.375,
    0.0783,
    0.2033,
    0.25,
    0.2033,
    0.25,
    0.375,
    0.0783,
    0.375,
    0.0783,
    0.4006,
    0.9896,
    0.4006,
    0.9896,
    0.1601,
    0.25,
    0.1601,
    0.25,
    0.4295,
    0,
    0.4295,
    0,
    0.4295,
    0,
    0.375,
    0.9676,
    0.375,
    0.9676,
    0.125,
    0.2824,
    0.125,
    0.2824,
    0.535,
    0.0783,
    0.535,
    0.0783,
    0.535,
    0.0783,
    0.535,
    0.0783,
    0.535,
    0.0783,
    0.535,
    0.0783,
    0.7967,
    0.2824,
    0.7967,
    0.2824,
    0.7967,
    0.2824,
    0.7967,
    0.2824,
    0.7967,
    0.2824,
    0.535,
    0.9676,
    0.535,
    0.9676,
    0.535,
    0.9676,
    0.535,
    0.9676,
    0.535,
    0.9676,
    0.5847,
    1,
    0.5847,
    1,
    0.8561,
    0.261,
    0.625,
    0.0455,
    0.8561,
    0.261,
    0.625,
    0.0455,
    0.625,
    0.9676,
    0.625,
    0.9676,
    0.875,
    0.2824,
    0.875,
    0.2824,
    0.535,
    1,
    0.535,
    1,
    0.535,
    1,
    0.535,
    0,
    0.535,
    0,
    0.2033,
    0.4676,
    0.2033,
    0.4676,
    0.2033,
    0.4676,
    0.2033,
    0.4676,
    0.465,
    0.7824,
    0.465,
    0.7824,
    0.465,
    0.7824,
    0.465,
    0.7824,
    0.4038,
    0.7592,
    0.4038,
    0.7592,
    0.375,
    0.7149,
    0.375,
    0.7149,
    0.125,
    0.4804,
    0.125,
    0.4804,
    0.5,
    0.75,
    0.5,
    0.75,
    0.5,
    0.75,
    0.5,
    0.75,
    0.5,
    0.75,
    0.375,
    0.6717,
    0.2033,
    0.5,
    0.375,
    0.6717,
    0.2033,
    0.5,
    0.375,
    0.6717,
    0.2033,
    0.5,
    0.7967,
    0.4676,
    0.7967,
    0.4676,
    0.7967,
    0.4676,
    0.7967,
    0.4676,
    0.4981,
    0.6717,
    0.4981,
    0.6717,
    0.4981,
    0.6717,
    0.4981,
    0.6717,
    0.4981,
    0.6717,
    0.4981,
    0.6717,
    0.4981,
    0.6717,
    0.535,
    0.7824,
    0.535,
    0.7824,
    0.535,
    0.7824,
    0.535,
    0.7824,
    0.625,
    0.6717,
    0.7967,
    0.5,
    0.625,
    0.6717,
    0.625,
    0.6717,
    0.7967,
    0.5,
    0.7967,
    0.5,
    0.625,
    0.7696,
    0.625,
    0.7696,
    0.5847,
    0.75,
    0.5847,
    0.75,
    0.8499,
    0.4908,
    0.8499,
    0.4908,
    0.2967,
    0.2824,
    0.2967,
    0.2824,
    0.2967,
    0.2824,
    0.2967,
    0.2824,
    0.2967,
    0.2824,
    0.465,
    0.2824,
    0.465,
    0.2824,
    0.465,
    0.2824,
    0.465,
    0.2824,
    0.465,
    0.2824,
    0.465,
    0.1717,
    0.465,
    0.1717,
    0.465,
    0.1717,
    0.465,
    0.1717,
    0.465,
    0.1717,
    0.465,
    0.1717,
    0.375,
    0.2824,
    0.375,
    0.2824,
    0.375,
    0.2824,
    0.375,
    0.2824,
    0.3663,
    0.2448,
    0.3852,
    0.2259,
    0.3852,
    0.2259,
    0.3852,
    0.2259,
    0.3852,
    0.2259,
    0.3852,
    0.2259,
    0.465,
    0.25,
    0.465,
    0.25,
    0.465,
    0.25,
    0.465,
    0.25,
    0.465,
    0.25,
    0.7033,
    0.2824,
    0.7033,
    0.2824,
    0.7033,
    0.2824,
    0.7033,
    0.2824,
    0.7033,
    0.2824,
    0.535,
    0.1717,
    0.535,
    0.1717,
    0.535,
    0.1717,
    0.535,
    0.1717,
    0.535,
    0.1717,
    0.535,
    0.2824,
    0.535,
    0.2824,
    0.535,
    0.2824,
    0.535,
    0.2824,
    0.535,
    0.2824,
    0.7033,
    0.25,
    0.625,
    0.1717,
    0.7033,
    0.25,
    0.625,
    0.1717,
    0.625,
    0.1717,
    0.7033,
    0.25,
    0.5981,
    0.2535,
    0.5981,
    0.2535,
    0.5981,
    0.2535,
    0.5981,
    0.2535,
    0.5981,
    0.2535,
    0.5981,
    0.2535,
    0.5981,
    0.2535,
    0.625,
    0.2824,
    0.625,
    0.2824,
    0.625,
    0.2824,
    0.625,
    0.2824,
    0.2967,
    0.4676,
    0.2967,
    0.4676,
    0.2967,
    0.4676,
    0.2967,
    0.4676,
    0.2967,
    0.4676,
    0.465,
    0.5783,
    0.465,
    0.5783,
    0.465,
    0.5783,
    0.465,
    0.5783,
    0.465,
    0.5783,
    0.465,
    0.4676,
    0.465,
    0.4676,
    0.465,
    0.4676,
    0.465,
    0.4676,
    0.465,
    0.4676,
    0.3763,
    0.5152,
    0.3575,
    0.4963,
    0.3763,
    0.5152,
    0.3763,
    0.5152,
    0.3763,
    0.5152,
    0.3763,
    0.5152,
    0.5,
    0.5,
    0.5,
    0.5,
    0.5,
    0.5,
    0.5,
    0.5,
    0.5,
    0.5,
    0.5,
    0.5,
    0.375,
    0.4676,
    0.375,
    0.4676,
    0.375,
    0.4676,
    0.375,
    0.4676,
    0.7033,
    0.4676,
    0.7033,
    0.4676,
    0.7033,
    0.4676,
    0.7033,
    0.4676,
    0.7033,
    0.4676,
    0.535,
    0.4676,
    0.535,
    0.4676,
    0.535,
    0.4676,
    0.535,
    0.4676,
    0.535,
    0.4676,
    0.535,
    0.5783,
    0.535,
    0.5783,
    0.535,
    0.5783,
    0.535,
    0.5783,
    0.535,
    0.5783,
    0.625,
    0.4676,
    0.625,
    0.4676,
    0.625,
    0.4676,
    0.625,
    0.4676,
    0.6148,
    0.5241,
    0.6337,
    0.5052,
    0.6148,
    0.5241,
    0.6148,
    0.5241,
    0.6148,
    0.5241,
    0.6148,
    0.5241,
    0.2033,
    0.2781,
    0.2033,
    0.2781,
    0.2033,
    0.2781,
    0.2033,
    0.2781,
    0.2033,
    0.2781,
    0.465,
    0.0783,
    0.465,
    0.0783,
    0.465,
    0.0783,
    0.465,
    0.0783,
    0.465,
    0.0783,
    0.465,
    0.9719,
    0.465,
    0.9719,
    0.465,
    0.9719,
    0.465,
    0.9719,
    0.465,
    0.9719,
    0.375,
    0.9874,
    0.375,
    0.9874,
    0.1705,
    0.25,
    0.4056,
    0.0189,
    0.1705,
    0.25,
    0.4056,
    0.0189,
    0.375,
    0.9719,
    0.375,
    0.9719,
    0.125,
    0.2781,
    0.125,
    0.2781,
    0.535,
    0.0783,
    0.535,
    0.0783,
    0.535,
    0.0783,
    0.535,
    0.0783,
    0.535,
    0.0783,
    0.535,
    0.0783,
    0.7967,
    0.2781,
    0.7967,
    0.2781,
    0.7967,
    0.2781,
    0.7967,
    0.2781,
    0.7967,
    0.2781,
    0.535,
    0.9719,
    0.535,
    0.9719,
    0.535,
    0.9719,
    0.535,
    0.9719,
    0.625,
    0.0783,
    0.7967,
    0.25,
    0.7967,
    0.25,
    0.625,
    0.0783,
    0.625,
    0.0783,
    0.5944,
    0.9932,
    0.5944,
    0.9932,
    0.875,
    0.2663,
    0.625,
    0.0351,
    0.625,
    0.0351,
    0.875,
    0.2663,
    0.5,
    1,
    0.5,
    1,
    0.5,
    1,
    0.5,
    0,
    0.5,
    0,
    0.5,
    0,
    0.2033,
    0.4719,
    0.2033,
    0.4719,
    0.2033,
    0.4719,
    0.2033,
    0.4719,
    0.2033,
    0.4719,
    0.5019,
    0.7781,
    0.5019,
    0.7781,
    0.5019,
    0.7781,
    0.5019,
    0.7781,
    0.5019,
    0.7781,
    0.5019,
    0.7781,
    0.5019,
    0.7781,
    0.465,
    0.6717,
    0.465,
    0.6717,
    0.465,
    0.6717,
    0.465,
    0.6717,
    0.465,
    0.6717,
    0.465,
    0.6717,
    0.375,
    0.7781,
    0.375,
    0.7781,
    0.125,
    0.4719,
    0.125,
    0.4719,
    0.4273,
    0.75,
    0.3967,
    0.7234,
    0.3967,
    0.7234,
    0.125,
    0.4874,
    0.125,
    0.4874,
    0.3967,
    0.7234,
    0.2033,
    0.5,
    0.375,
    0.6717,
    0.375,
    0.6717,
    0.2033,
    0.5,
    0.375,
    0.6717,
    0.2033,
    0.5,
    0.7967,
    0.4719,
    0.7967,
    0.4719,
    0.7967,
    0.4719,
    0.7967,
    0.4719,
    0.7967,
    0.4719,
    0.535,
    0.6717,
    0.535,
    0.6717,
    0.535,
    0.6717,
    0.535,
    0.6717,
    0.535,
    0.6717,
    0.625,
    0.7626,
    0.625,
    0.7626,
    0.5944,
    0.7311,
    0.8295,
    0.5,
    0.5944,
    0.7311,
    0.8295,
    0.5,
    0.535,
    0.75,
    0.535,
    0.75,
    0.535,
    0.75,
    0.535,
    0.75,
    0.535,
    0.75,
    0.625,
    0.7781,
    0.625,
    0.7781,
    0.875,
    0.4719,
    0.875,
    0.4719,
    0.2967,
    0.2781,
    0.2967,
    0.2781,
    0.2967,
    0.2781,
    0.2967,
    0.2781,
    0.465,
    0.2781,
    0.465,
    0.2781,
    0.465,
    0.2781,
    0.465,
    0.2781,
    0.465,
    0.1717,
    0.465,
    0.1717,
    0.465,
    0.1717,
    0.465,
    0.1717,
    0.465,
    0.1717,
    0.465,
    0.1717,
    0.3852,
    0.2511,
    0.3852,
    0.2511,
    0.3852,
    0.2511,
    0.3852,
    0.2511,
    0.3852,
    0.2511,
    0.3852,
    0.2511,
    0.465,
    0.25,
    0.465,
    0.25,
    0.465,
    0.25,
    0.465,
    0.25,
    0.465,
    0.25,
    0.465,
    0.25,
    0.2967,
    0.25,
    0.2967,
    0.25,
    0.375,
    0.1717,
    0.375,
    0.1717,
    0.2967,
    0.25,
    0.375,
    0.1717,
    0.7033,
    0.2781,
    0.7033,
    0.2781,
    0.7033,
    0.2781,
    0.7033,
    0.2781,
    0.7033,
    0.2781,
    0.535,
    0.1717,
    0.535,
    0.1717,
    0.535,
    0.1717,
    0.535,
    0.1717,
    0.535,
    0.1717,
    0.535,
    0.1717,
    0.535,
    0.2781,
    0.535,
    0.2781,
    0.535,
    0.2781,
    0.535,
    0.2781,
    0.535,
    0.2781,
    0.7033,
    0.25,
    0.7033,
    0.25,
    0.625,
    0.1717,
    0.625,
    0.1717,
    0.7033,
    0.25,
    0.602,
    0.2532,
    0.602,
    0.2532,
    0.602,
    0.2532,
    0.602,
    0.2532,
    0.602,
    0.2532,
    0.602,
    0.2532,
    0.625,
    0.2781,
    0.625,
    0.2781,
    0.625,
    0.2781,
    0.625,
    0.2781,
    0.2967,
    0.4719,
    0.2967,
    0.4719,
    0.2967,
    0.4719,
    0.2967,
    0.4719,
    0.2967,
    0.4719,
    0.465,
    0.5783,
    0.465,
    0.5783,
    0.465,
    0.5783,
    0.465,
    0.5783,
    0.465,
    0.5783,
    0.3763,
    0.5157,
    0.3575,
    0.4968,
    0.3763,
    0.5157,
    0.3763,
    0.5157,
    0.3763,
    0.5157,
    0.3763,
    0.5157,
    0.465,
    0.5,
    0.465,
    0.5,
    0.465,
    0.5,
    0.465,
    0.5,
    0.465,
    0.5,
    0.375,
    0.4719,
    0.375,
    0.4719,
    0.375,
    0.4719,
    0.375,
    0.4719,
    0.7033,
    0.4719,
    0.7033,
    0.4719,
    0.7033,
    0.4719,
    0.7033,
    0.4719,
    0.7033,
    0.4719,
    0.4981,
    0.4719,
    0.4981,
    0.4719,
    0.4981,
    0.4719,
    0.4981,
    0.4719,
    0.4981,
    0.4719,
    0.4981,
    0.4719,
    0.4981,
    0.4719,
    0.535,
    0.5783,
    0.535,
    0.5783,
    0.535,
    0.5783,
    0.535,
    0.5783,
    0.535,
    0.5783,
    0.535,
    0.5783,
    0.625,
    0.4719,
    0.625,
    0.4719,
    0.625,
    0.4719,
    0.625,
    0.4719,
    0.5897,
    0.5054,
    0.5897,
    0.5054,
    0.5897,
    0.5054,
    0.5897,
    0.5054,
    0.5897,
    0.5054,
    0.5897,
    0.5054,
    0.625,
    0.5783,
    0.625,
    0.5783,
    0.7033,
    0.5,
    0.7033,
    0.5,
    0.625,
    0.5783,
    0.7033,
    0.5,
    0.2485,
    0.2875,
    0.2485,
    0.2875,
    0.2485,
    0.2875,
    0.2485,
    0.2875,
    0.504,
    0.0916,
    0.504,
    0.0916,
    0.504,
    0.0916,
    0.504,
    0.0916,
    0.504,
    0.0916,
    0.504,
    0.0916,
    0.375,
    0.9782,
    0.375,
    0.9782,
    0.1561,
    0.259,
    0.4177,
    0,
    0.1561,
    0.259,
    0.4177,
    0,
    0.499,
    0.9625,
    0.499,
    0.9625,
    0.499,
    0.9625,
    0.499,
    0.9625,
    0.625,
    0.125,
    0.75,
    0.25,
    0.625,
    0.125,
    0.75,
    0.25,
    0.625,
    0.125,
    0.5926,
    0.991,
    0.5926,
    0.991,
    0.625,
    0.041,
    0.875,
    0.2718,
    0.625,
    0.041,
    0.875,
    0.2718,
    0.5,
    1,
    0.5,
    1,
    0.5,
    0,
    0.5,
    0,
    0.5016,
    0.7875,
    0.5016,
    0.7875,
    0.5016,
    0.7875,
    0.5016,
    0.7875,
    0.5016,
    0.7875,
    0.5016,
    0.7875,
    0.375,
    0.7875,
    0.375,
    0.7875,
    0.125,
    0.4625,
    0.125,
    0.4625,
    0.4177,
    0.75,
    0.4177,
    0.75,
    0.375,
    0.6946,
    0.1511,
    0.488,
    0.1511,
    0.488,
    0.375,
    0.6946,
    0.375,
    0.6946,
    0.5,
    0.75,
    0.5,
    0.75,
    0.5,
    0.75,
    0.5,
    0.75,
    0.7455,
    0.4625,
    0.7455,
    0.4625,
    0.7455,
    0.4625,
    0.7455,
    0.4625,
    0.7455,
    0.4625,
    0.5014,
    0.6584,
    0.5014,
    0.6584,
    0.5014,
    0.6584,
    0.5014,
    0.6584,
    0.5014,
    0.6584,
    0.625,
    0.7668,
    0.625,
    0.7668,
    0.5944,
    0.7239,
    0.8196,
    0.5,
    0.5944,
    0.7239,
    0.8196,
    0.5,
    0.625,
    0.7875,
    0.625,
    0.7875,
    0.875,
    0.4625,
    0.875,
    0.4625,
    0.4986,
    0.2875,
    0.4986,
    0.2875,
    0.4986,
    0.2875,
    0.4986,
    0.2875,
    0.3852,
    0.2549,
    0.3852,
    0.2549,
    0.3852,
    0.2549,
    0.3852,
    0.2549,
    0.3852,
    0.2549,
    0.3852,
    0.2549,
    0.5,
    0.25,
    0.5,
    0.25,
    0.5,
    0.25,
    0.5,
    0.25,
    0.25,
    0.25,
    0.375,
    0.125,
    0.375,
    0.125,
    0.25,
    0.25,
    0.375,
    0.125,
    0.7545,
    0.2875,
    0.7545,
    0.2875,
    0.7545,
    0.2875,
    0.7545,
    0.2875,
    0.496,
    0.1584,
    0.496,
    0.1584,
    0.496,
    0.1584,
    0.496,
    0.1584,
    0.496,
    0.1584,
    0.496,
    0.1584,
    0.6246,
    0.2659,
    0.6246,
    0.2659,
    0.6246,
    0.2659,
    0.6246,
    0.2659,
    0.6246,
    0.2659,
    0.6246,
    0.2659,
    0.2515,
    0.4625,
    0.2515,
    0.4625,
    0.2515,
    0.4625,
    0.2515,
    0.4625,
    0.2515,
    0.4625,
    0.4986,
    0.5916,
    0.4986,
    0.5916,
    0.4986,
    0.5916,
    0.4986,
    0.5916,
    0.4986,
    0.5916,
    0.4986,
    0.5916,
    0.3493,
    0.496,
    0.3754,
    0.5221,
    0.3754,
    0.5221,
    0.3754,
    0.5221,
    0.3754,
    0.5221,
    0.3754,
    0.5221,
    0.5,
    0.5,
    0.5,
    0.5,
    0.5,
    0.5,
    0.5,
    0.5,
    0.375,
    0.4625,
    0.375,
    0.4625,
    0.375,
    0.4625,
    0.375,
    0.4625,
    0.5014,
    0.4625,
    0.5014,
    0.4625,
    0.5014,
    0.4625,
    0.5014,
    0.4625,
    0.5014,
    0.4625,
    0.6142,
    0.4971,
    0.6142,
    0.4971,
    0.6142,
    0.4971,
    0.6142,
    0.4971,
    0.6142,
    0.4971,
    0.6142,
    0.4971,
    0.625,
    0.5916,
    0.625,
    0.5916,
    0.7166,
    0.5,
    0.7166,
    0.5,
    0.625,
    0.5916,
    0.2076,
    0.2876,
    0.2076,
    0.2876,
    0.2076,
    0.2876,
    0.2076,
    0.2876,
    0.2076,
    0.2876,
    0.501,
    0.0826,
    0.501,
    0.0826,
    0.501,
    0.0826,
    0.501,
    0.0826,
    0.501,
    0.0826,
    0.501,
    0.0826,
    0.501,
    0.0826,
    0.375,
    0.0826,
    0.2076,
    0.25,
    0.2076,
    0.25,
    0.375,
    0.0826,
    0.375,
    0.9781,
    0.375,
    0.9781,
    0.1531,
    0.2591,
    0.4175,
    0,
    0.4175,
    0,
    0.1531,
    0.2591,
    0.7924,
    0.2876,
    0.7924,
    0.2876,
    0.7924,
    0.2876,
    0.7924,
    0.2876,
    0.7924,
    0.2876,
    0.499,
    0.9624,
    0.499,
    0.9624,
    0.499,
    0.9624,
    0.499,
    0.9624,
    0.499,
    0.9624,
    0.5825,
    1,
    0.5825,
    1,
    0.8551,
    0.2628,
    0.625,
    0.048,
    0.8551,
    0.2628,
    0.625,
    0.048,
    0.625,
    0.9624,
    0.625,
    0.9624,
    0.875,
    0.2876,
    0.875,
    0.2876,
    0.5,
    1,
    0.5,
    1,
    0.5,
    0,
    0.5,
    0,
    0.2076,
    0.4624,
    0.2076,
    0.4624,
    0.2076,
    0.4624,
    0.2076,
    0.4624,
    0.5017,
    0.7876,
    0.5017,
    0.7876,
    0.5017,
    0.7876,
    0.5017,
    0.7876,
    0.5017,
    0.7876,
    0.5017,
    0.7876,
    0.375,
    0.7876,
    0.375,
    0.7876,
    0.125,
    0.4624,
    0.125,
    0.4624,
    0.4175,
    0.75,
    0.4175,
    0.75,
    0.375,
    0.6999,
    0.1487,
    0.488,
    0.375,
    0.6999,
    0.1487,
    0.488,
    0.1487,
    0.488,
    0.5,
    0.75,
    0.5,
    0.75,
    0.5,
    0.75,
    0.5,
    0.75,
    0.7924,
    0.4624,
    0.7924,
    0.4624,
    0.7924,
    0.4624,
    0.7924,
    0.4624,
    0.499,
    0.6674,
    0.499,
    0.6674,
    0.499,
    0.6674,
    0.499,
    0.6674,
    0.499,
    0.6674,
    0.499,
    0.6674,
    0.625,
    0.7668,
    0.625,
    0.7668,
    0.5946,
    0.7265,
    0.825,
    0.5,
    0.5946,
    0.7265,
    0.825,
    0.5,
    0.825,
    0.5,
    0.625,
    0.7876,
    0.625,
    0.7876,
    0.875,
    0.4624,
    0.875,
    0.4624,
    0.2924,
    0.2876,
    0.2924,
    0.2876,
    0.2924,
    0.2876,
    0.2924,
    0.2876,
    0.501,
    0.2876,
    0.501,
    0.2876,
    0.501,
    0.2876,
    0.501,
    0.2876,
    0.3851,
    0.2559,
    0.3851,
    0.2559,
    0.3851,
    0.2559,
    0.3851,
    0.2559,
    0.3851,
    0.2559,
    0.3851,
    0.2559,
    0.5,
    0.25,
    0.5,
    0.25,
    0.5,
    0.25,
    0.5,
    0.25,
    0.2924,
    0.25,
    0.2924,
    0.25,
    0.375,
    0.1674,
    0.375,
    0.1674,
    0.2924,
    0.25,
    0.375,
    0.1674,
    0.7076,
    0.2876,
    0.7076,
    0.2876,
    0.7076,
    0.2876,
    0.7076,
    0.2876,
    0.4983,
    0.1674,
    0.4983,
    0.1674,
    0.4983,
    0.1674,
    0.4983,
    0.1674,
    0.4983,
    0.1674,
    0.4983,
    0.1674,
    0.7076,
    0.25,
    0.625,
    0.1674,
    0.7076,
    0.25,
    0.625,
    0.1674,
    0.7076,
    0.25,
    0.625,
    0.1674,
    0.6237,
    0.2648,
    0.6237,
    0.2648,
    0.6237,
    0.2648,
    0.6237,
    0.2648,
    0.6237,
    0.2648,
    0.6237,
    0.2648,
    0.2924,
    0.4624,
    0.2924,
    0.4624,
    0.2924,
    0.4624,
    0.2924,
    0.4624,
    0.2924,
    0.4624,
    0.5017,
    0.5826,
    0.5017,
    0.5826,
    0.5017,
    0.5826,
    0.5017,
    0.5826,
    0.5017,
    0.5826,
    0.375,
    0.5826,
    0.2924,
    0.5,
    0.375,
    0.5826,
    0.2924,
    0.5,
    0.375,
    0.5826,
    0.3763,
    0.4853,
    0.3763,
    0.4853,
    0.3763,
    0.4853,
    0.3763,
    0.4853,
    0.3763,
    0.4853,
    0.3763,
    0.4853,
    0.5,
    0.5,
    0.5,
    0.5,
    0.5,
    0.5,
    0.5,
    0.5,
    0.7076,
    0.4624,
    0.7076,
    0.4624,
    0.7076,
    0.4624,
    0.7076,
    0.4624,
    0.7076,
    0.4624,
    0.4983,
    0.4624,
    0.4983,
    0.4624,
    0.4983,
    0.4624,
    0.4983,
    0.4624,
    0.4983,
    0.4624,
    0.625,
    0.4624,
    0.625,
    0.4624,
    0.625,
    0.4624,
    0.625,
    0.4624,
    0.6149,
    0.5283,
    0.6149,
    0.5283,
    0.6384,
    0.5048,
    0.6149,
    0.5283,
    0.6149,
    0.5283,
    0.6149,
    0.5283,
    0.6149,
    0.5283,
    0.2134,
    0.29,
    0.2134,
    0.29,
    0.2134,
    0.29,
    0.2134,
    0.29,
    0.2134,
    0.29,
    0.5044,
    0.0884,
    0.5044,
    0.0884,
    0.5044,
    0.0884,
    0.5044,
    0.0884,
    0.5044,
    0.0884,
    0.5044,
    0.0884,
    0.5044,
    0.0884,
    0.2134,
    0.25,
    0.375,
    0.0884,
    0.2134,
    0.25,
    0.375,
    0.0884,
    0.375,
    0.0884,
    0.375,
    0.9767,
    0.375,
    0.9767,
    0.155,
    0.2596,
    0.155,
    0.2596,
    0.4166,
    0,
    0.4166,
    0,
    0.4679,
    1,
    0.4679,
    1,
    0.4679,
    0,
    0.4679,
    0,
    0.7866,
    0.29,
    0.7866,
    0.29,
    0.7866,
    0.29,
    0.7866,
    0.29,
    0.7866,
    0.29,
    0.4956,
    0.96,
    0.4956,
    0.96,
    0.4956,
    0.96,
    0.4956,
    0.96,
    0.4956,
    0.96,
    0.7866,
    0.25,
    0.625,
    0.0884,
    0.7866,
    0.25,
    0.625,
    0.0884,
    0.7866,
    0.25,
    0.571,
    1,
    0.571,
    1,
    0.6026,
    0.03,
    0.875,
    0.2679,
    0.875,
    0.2679,
    0.6026,
    0.03,
    0.625,
    0.96,
    0.625,
    0.96,
    0.875,
    0.29,
    0.875,
    0.29,
    0.2134,
    0.46,
    0.2134,
    0.46,
    0.2134,
    0.46,
    0.2134,
    0.46,
    0.2134,
    0.46,
    0.5044,
    0.79,
    0.5044,
    0.79,
    0.5044,
    0.79,
    0.5044,
    0.79,
    0.5044,
    0.79,
    0.5044,
    0.79,
    0.375,
    0.79,
    0.375,
    0.79,
    0.125,
    0.46,
    0.125,
    0.46,
    0.429,
    0.75,
    0.3974,
    0.72,
    0.3974,
    0.72,
    0.125,
    0.4821,
    0.125,
    0.4821,
    0.3974,
    0.72,
    0.25,
    0.5,
    0.375,
    0.625,
    0.25,
    0.5,
    0.375,
    0.625,
    0.25,
    0.5,
    0.375,
    0.625,
    0.7866,
    0.46,
    0.7866,
    0.46,
    0.7866,
    0.46,
    0.7866,
    0.46,
    0.4989,
    0.6616,
    0.4989,
    0.6616,
    0.4989,
    0.6616,
    0.4989,
    0.6616,
    0.4989,
    0.6616,
    0.4989,
    0.6616,
    0.625,
    0.7679,
    0.625,
    0.7679,
    0.5953,
    0.7248,
    0.8215,
    0.5,
    0.5953,
    0.7248,
    0.8215,
    0.5,
    0.8215,
    0.5,
    0.5321,
    0.75,
    0.5321,
    0.75,
    0.5321,
    0.75,
    0.5321,
    0.75,
    0.625,
    0.79,
    0.625,
    0.79,
    0.875,
    0.46,
    0.875,
    0.46,
    0.2866,
    0.29,
    0.2866,
    0.29,
    0.2866,
    0.29,
    0.2866,
    0.29,
    0.5018,
    0.29,
    0.5018,
    0.29,
    0.5018,
    0.29,
    0.5018,
    0.29,
    0.5018,
    0.29,
    0.5018,
    0.29,
    0.375,
    0.29,
    0.375,
    0.29,
    0.375,
    0.29,
    0.375,
    0.29,
    0.3596,
    0.2449,
    0.3596,
    0.2449,
    0.3849,
    0.2195,
    0.3849,
    0.2195,
    0.3849,
    0.2195,
    0.3849,
    0.2195,
    0.3849,
    0.2195,
    0.5,
    0.25,
    0.5,
    0.25,
    0.5,
    0.25,
    0.5,
    0.25,
    0.7134,
    0.29,
    0.7134,
    0.29,
    0.7134,
    0.29,
    0.7134,
    0.29,
    0.7134,
    0.29,
    0.4956,
    0.1616,
    0.4956,
    0.1616,
    0.4956,
    0.1616,
    0.4956,
    0.1616,
    0.4956,
    0.1616,
    0.6245,
    0.2289,
    0.6245,
    0.2289,
    0.6498,
    0.2543,
    0.6245,
    0.2289,
    0.6245,
    0.2289,
    0.6245,
    0.2289,
    0.6245,
    0.2289,
    0.625,
    0.29,
    0.625,
    0.29,
    0.625,
    0.29,
    0.625,
    0.29,
    0.2866,
    0.46,
    0.2866,
    0.46,
    0.2866,
    0.46,
    0.2866,
    0.46,
    0.5018,
    0.5884,
    0.5018,
    0.5884,
    0.5018,
    0.5884,
    0.5018,
    0.5884,
    0.5018,
    0.5884,
    0.5018,
    0.5884,
    0.3755,
    0.4858,
    0.3755,
    0.4858,
    0.3755,
    0.4858,
    0.3755,
    0.4858,
    0.3755,
    0.4858,
    0.3755,
    0.4858,
    0.5,
    0.5,
    0.5,
    0.5,
    0.5,
    0.5,
    0.5,
    0.5,
    0.7134,
    0.46,
    0.7134,
    0.46,
    0.7134,
    0.46,
    0.7134,
    0.46,
    0.7134,
    0.46,
    0.4989,
    0.46,
    0.4989,
    0.46,
    0.4989,
    0.46,
    0.4989,
    0.46,
    0.6145,
    0.4958,
    0.6145,
    0.4958,
    0.6145,
    0.4958,
    0.6145,
    0.4958,
    0.6145,
    0.4958,
    0.6145,
    0.4958,
    0.625,
    0.5884,
    0.625,
    0.5884,
    0.7134,
    0.5,
    0.625,
    0.5884,
    0.7134,
    0.5,
    0.2056,
    0.292,
    0.2056,
    0.292,
    0.2056,
    0.292,
    0.2056,
    0.292,
    0.5007,
    0.0806,
    0.5007,
    0.0806,
    0.5007,
    0.0806,
    0.5007,
    0.0806,
    0.5007,
    0.0806,
    0.5007,
    0.0806,
    0.5007,
    0.0806,
    0.5007,
    0.0806,
    0.375,
    0.0806,
    0.375,
    0.0806,
    0.2056,
    0.25,
    0.2056,
    0.25,
    0.2056,
    0.25,
    0.375,
    0.9756,
    0.375,
    0.9756,
    0.422,
    0,
    0.422,
    0,
    0.1524,
    0.2601,
    0.1524,
    0.2601,
    0.7944,
    0.292,
    0.7944,
    0.292,
    0.7944,
    0.292,
    0.7944,
    0.292,
    0.4993,
    0.958,
    0.4993,
    0.958,
    0.4993,
    0.958,
    0.4993,
    0.958,
    0.7944,
    0.25,
    0.7944,
    0.25,
    0.7944,
    0.25,
    0.625,
    0.0806,
    0.625,
    0.0806,
    0.875,
    0.2744,
    0.5894,
    0.9899,
    0.875,
    0.2744,
    0.5894,
    0.9899,
    0.625,
    0.0361,
    0.625,
    0.0361,
    0.5,
    1,
    0.5,
    1,
    0.5,
    0,
    0.5,
    0,
    0.2056,
    0.458,
    0.2056,
    0.458,
    0.2056,
    0.458,
    0.2056,
    0.458,
    0.2056,
    0.458,
    0.5011,
    0.792,
    0.5011,
    0.792,
    0.5011,
    0.792,
    0.5011,
    0.792,
    0.5011,
    0.792,
    0.5011,
    0.792,
    0.375,
    0.792,
    0.375,
    0.792,
    0.125,
    0.458,
    0.125,
    0.458,
    0.422,
    0.75,
    0.422,
    0.75,
    0.375,
    0.7012,
    0.375,
    0.7012,
    0.375,
    0.7012,
    0.148,
    0.4865,
    0.148,
    0.4865,
    0.5,
    0.75,
    0.5,
    0.75,
    0.5,
    0.75,
    0.5,
    0.75,
    0.7944,
    0.458,
    0.7944,
    0.458,
    0.7944,
    0.458,
    0.7944,
    0.458,
    0.7944,
    0.458,
    0.5009,
    0.6694,
    0.5009,
    0.6694,
    0.5009,
    0.6694,
    0.5009,
    0.6694,
    0.5009,
    0.6694,
    0.8281,
    0.5,
    0.625,
    0.7688,
    0.625,
    0.7688,
    0.8281,
    0.5,
    0.5894,
    0.7306,
    0.5894,
    0.7306,
    0.875,
    0.458,
    0.875,
    0.458,
    0.625,
    0.792,
    0.625,
    0.792,
    0.2944,
    0.292,
    0.2944,
    0.292,
    0.2944,
    0.292,
    0.2944,
    0.292,
    0.2944,
    0.292,
    0.5011,
    0.292,
    0.5011,
    0.292,
    0.5011,
    0.292,
    0.5011,
    0.292,
    0.5011,
    0.292,
    0.375,
    0.292,
    0.375,
    0.292,
    0.375,
    0.292,
    0.375,
    0.292,
    0.3862,
    0.2229,
    0.3862,
    0.2229,
    0.3862,
    0.2229,
    0.3632,
    0.2459,
    0.3862,
    0.2229,
    0.3862,
    0.2229,
    0.3862,
    0.2229,
    0.5,
    0.25,
    0.5,
    0.25,
    0.5,
    0.25,
    0.5,
    0.25,
    0.7056,
    0.292,
    0.7056,
    0.292,
    0.7056,
    0.292,
    0.7056,
    0.292,
    0.7056,
    0.292,
    0.4989,
    0.1694,
    0.4989,
    0.1694,
    0.4989,
    0.1694,
    0.4989,
    0.1694,
    0.4989,
    0.1694,
    0.7056,
    0.25,
    0.7056,
    0.25,
    0.625,
    0.1694,
    0.625,
    0.1694,
    0.625,
    0.1694,
    0.6224,
    0.2665,
    0.6224,
    0.2665,
    0.6224,
    0.2665,
    0.6224,
    0.2665,
    0.6224,
    0.2665,
    0.6224,
    0.2665,
    0.2944,
    0.458,
    0.2944,
    0.458,
    0.2944,
    0.458,
    0.2944,
    0.458,
    0.4991,
    0.5806,
    0.4991,
    0.5806,
    0.4991,
    0.5806,
    0.4991,
    0.5806,
    0.4991,
    0.5806,
    0.4991,
    0.5806,
    0.3776,
    0.5185,
    0.3776,
    0.5185,
    0.3546,
    0.4955,
    0.3546,
    0.4955,
    0.3776,
    0.5185,
    0.3776,
    0.5185,
    0.3776,
    0.5185,
    0.5,
    0.5,
    0.5,
    0.5,
    0.5,
    0.5,
    0.5,
    0.5,
    0.375,
    0.458,
    0.375,
    0.458,
    0.375,
    0.458,
    0.375,
    0.458,
    0.7056,
    0.458,
    0.7056,
    0.458,
    0.7056,
    0.458,
    0.7056,
    0.458,
    0.4993,
    0.458,
    0.4993,
    0.458,
    0.4993,
    0.458,
    0.4993,
    0.458,
    0.4993,
    0.458,
    0.6138,
    0.4921,
    0.6138,
    0.4921,
    0.6138,
    0.4921,
    0.6138,
    0.4921,
    0.6138,
    0.4921,
    0.6138,
    0.4921,
    0.7056,
    0.5,
    0.7056,
    0.5,
    0.625,
    0.5806,
    0.7056,
    0.5,
    0.625,
    0.5806,
    0.625,
    0.5806,
    0.2487,
    0.2912,
    0.2487,
    0.2912,
    0.2487,
    0.2912,
    0.2487,
    0.2912,
    0.2487,
    0.2912,
    0.2487,
    0.2912,
    0.4011,
    0.9868,
    0.4011,
    0.9868,
    0.1686,
    0.25,
    0.1686,
    0.25,
    0.4304,
    0,
    0.4304,
    0,
    0.4304,
    0,
    0.375,
    0.9588,
    0.375,
    0.9588,
    0.125,
    0.2912,
    0.125,
    0.2912,
    0.5335,
    0.1237,
    0.5335,
    0.1237,
    0.5335,
    0.1237,
    0.5335,
    0.1237,
    0.5335,
    0.1237,
    0.5335,
    0.1237,
    0.5335,
    0.1237,
    0.5015,
    0.9588,
    0.5015,
    0.9588,
    0.5015,
    0.9588,
    0.5015,
    0.9588,
    0.5015,
    0.9588,
    0.625,
    0.125,
    0.75,
    0.25,
    0.75,
    0.25,
    0.625,
    0.125,
    0.5957,
    0.9883,
    0.5957,
    0.9883,
    0.875,
    0.2749,
    0.625,
    0.0436,
    0.625,
    0.0436,
    0.875,
    0.2749,
    0.5335,
    1,
    0.5335,
    1,
    0.5335,
    0,
    0.5335,
    0,
    0.4985,
    0.7912,
    0.4985,
    0.7912,
    0.4985,
    0.7912,
    0.4985,
    0.7912,
    0.4985,
    0.7912,
    0.4665,
    0.624,
    0.4665,
    0.624,
    0.4665,
    0.624,
    0.4665,
    0.624,
    0.4665,
    0.624,
    0.4665,
    0.624,
    0.4665,
    0.624,
    0.4043,
    0.7617,
    0.4043,
    0.7617,
    0.125,
    0.4751,
    0.375,
    0.7064,
    0.375,
    0.7064,
    0.125,
    0.4751,
    0.4665,
    0.75,
    0.4665,
    0.75,
    0.4665,
    0.75,
    0.4665,
    0.75,
    0.375,
    0.625,
    0.25,
    0.5,
    0.375,
    0.625,
    0.25,
    0.5,
    0.7513,
    0.4588,
    0.7513,
    0.4588,
    0.7513,
    0.4588,
    0.7513,
    0.4588,
    0.7513,
    0.4588,
    0.5989,
    0.7632,
    0.5989,
    0.7632,
    0.5989,
    0.7632,
    0.5989,
    0.7632,
    0.8314,
    0.5,
    0.8314,
    0.5,
    0.5696,
    0.75,
    0.625,
    0.7912,
    0.625,
    0.7912,
    0.875,
    0.4588,
    0.875,
    0.4588,
    0.5012,
    0.2912,
    0.5012,
    0.2912,
    0.5012,
    0.2912,
    0.5012,
    0.2912,
    0.5012,
    0.2912,
    0.4665,
    0.1263,
    0.4665,
    0.1263,
    0.4665,
    0.1263,
    0.4665,
    0.1263,
    0.4665,
    0.1263,
    0.375,
    0.2912,
    0.375,
    0.2912,
    0.375,
    0.2912,
    0.375,
    0.2912,
    0.4074,
    0.2436,
    0.4074,
    0.2436,
    0.4074,
    0.2436,
    0.4074,
    0.2436,
    0.4074,
    0.2436,
    0.4074,
    0.2436,
    0.25,
    0.25,
    0.375,
    0.125,
    0.25,
    0.25,
    0.375,
    0.125,
    0.7487,
    0.2912,
    0.7487,
    0.2912,
    0.7487,
    0.2912,
    0.7487,
    0.2912,
    0.6257,
    0.2646,
    0.6257,
    0.2646,
    0.6257,
    0.2646,
    0.6257,
    0.2646,
    0.6257,
    0.2646,
    0.6257,
    0.2646,
    0.5335,
    0.25,
    0.5335,
    0.25,
    0.5335,
    0.25,
    0.5335,
    0.25,
    0.5335,
    0.25,
    0.2513,
    0.4588,
    0.2513,
    0.4588,
    0.2513,
    0.4588,
    0.2513,
    0.4588,
    0.2513,
    0.4588,
    0.3964,
    0.4953,
    0.3964,
    0.4953,
    0.3964,
    0.4953,
    0.3964,
    0.4953,
    0.3964,
    0.4953,
    0.3964,
    0.4953,
    0.375,
    0.4588,
    0.375,
    0.4588,
    0.375,
    0.4588,
    0.375,
    0.4588,
    0.4981,
    0.4588,
    0.4981,
    0.4588,
    0.4981,
    0.4588,
    0.4981,
    0.4588,
    0.4981,
    0.4588,
    0.5335,
    0.6265,
    0.5335,
    0.6265,
    0.5335,
    0.6265,
    0.5335,
    0.6265,
    0.5335,
    0.6265,
    0.6157,
    0.4924,
    0.6157,
    0.4924,
    0.6157,
    0.4924,
    0.6157,
    0.4924,
    0.6157,
    0.4924,
    0.6157,
    0.4924,
    0.5335,
    0.5,
    0.5335,
    0.5,
    0.5335,
    0.5,
    0.5335,
    0.5,
    0.5335,
    0.5,
    0.75,
    0.5,
    0.625,
    0.625,
    0.75,
    0.5,
    0.625,
    0.625,
    0.2516,
    0.306,
    0.2516,
    0.306,
    0.2516,
    0.306,
    0.2516,
    0.306,
    0.2516,
    0.306,
    0.375,
    0.9649,
    0.375,
    0.9649,
    0.375,
    0.9649,
    0.1593,
    0.2681,
    0.1593,
    0.2681,
    0.1593,
    0.2681,
    0.4233,
    0,
    0.4233,
    0,
    0.5,
    0.125,
    0.5,
    0.125,
    0.5,
    0.125,
    0.5,
    0.125,
    0.5,
    0.125,
    0.5,
    0.125,
    0.5,
    0.125,
    0.5,
    0.125,
    0.499,
    0.944,
    0.499,
    0.944,
    0.499,
    0.944,
    0.499,
    0.944,
    0.625,
    0.125,
    0.75,
    0.25,
    0.75,
    0.25,
    0.625,
    0.125,
    0.5923,
    0.9819,
    0.5923,
    0.9819,
    0.5923,
    0.9819,
    0.875,
    0.2851,
    0.875,
    0.2851,
    0.625,
    0.0507,
    0.625,
    0.0507,
    0.875,
    0.2851,
    0.5,
    1,
    0.5,
    1,
    0.5,
    0,
    0.5,
    0,
    0.5006,
    0.806,
    0.5006,
    0.806,
    0.5006,
    0.806,
    0.5006,
    0.806,
    0.5006,
    0.806,
    0.5006,
    0.806,
    0.4117,
    0.7635,
    0.4117,
    0.7635,
    0.125,
    0.4674,
    0.375,
    0.6993,
    0.375,
    0.6993,
    0.125,
    0.4674,
    0.5,
    0.75,
    0.5,
    0.75,
    0.5,
    0.75,
    0.5,
    0.75,
    0.375,
    0.625,
    0.25,
    0.5,
    0.25,
    0.5,
    0.375,
    0.625,
    0.7496,
    0.444,
    0.7496,
    0.444,
    0.7496,
    0.444,
    0.7496,
    0.444,
    0.7496,
    0.444,
    0.7496,
    0.444,
    0.625,
    0.7826,
    0.625,
    0.7826,
    0.5767,
    0.75,
    0.5767,
    0.75,
    0.8365,
    0.4865,
    0.8365,
    0.4865,
    0.4992,
    0.306,
    0.4992,
    0.306,
    0.4992,
    0.306,
    0.4992,
    0.306,
    0.4992,
    0.306,
    0.3872,
    0.257,
    0.3872,
    0.257,
    0.3872,
    0.257,
    0.3872,
    0.257,
    0.3872,
    0.257,
    0.3872,
    0.257,
    0.5,
    0.25,
    0.5,
    0.25,
    0.5,
    0.25,
    0.5,
    0.25,
    0.25,
    0.25,
    0.375,
    0.125,
    0.25,
    0.25,
    0.375,
    0.125,
    0.7507,
    0.306,
    0.7507,
    0.306,
    0.7507,
    0.306,
    0.7507,
    0.306,
    0.6255,
    0.2738,
    0.6255,
    0.2738,
    0.6255,
    0.2738,
    0.6255,
    0.2738,
    0.6255,
    0.2738,
    0.6255,
    0.2738,
    0.6255,
    0.2738,
    0.6255,
    0.2738,
    0.2484,
    0.444,
    0.2484,
    0.444,
    0.2484,
    0.444,
    0.2484,
    0.444,
    0.2484,
    0.444,
    0.3745,
    0.4762,
    0.3745,
    0.4762,
    0.3745,
    0.4762,
    0.3745,
    0.4762,
    0.3745,
    0.4762,
    0.3745,
    0.4762,
    0.3745,
    0.4762,
    0.3745,
    0.4762,
    0.5,
    0.5,
    0.5,
    0.5,
    0.5,
    0.5,
    0.5,
    0.5,
    0.5008,
    0.444,
    0.5008,
    0.444,
    0.5008,
    0.444,
    0.5008,
    0.444,
    0.5008,
    0.444,
    0.4989,
    0.6251,
    0.4989,
    0.6251,
    0.4989,
    0.6251,
    0.4989,
    0.6251,
    0.4989,
    0.6251,
    0.4989,
    0.6251,
    0.4989,
    0.6251,
    0.4989,
    0.6251,
    0.6128,
    0.493,
    0.6128,
    0.493,
    0.6128,
    0.493,
    0.6128,
    0.493,
    0.6128,
    0.493,
    0.6128,
    0.493,
    0.625,
    0.625,
    0.75,
    0.5,
    0.625,
    0.625,
    0.75,
    0.5,
    0.2028,
    0.2959,
    0.2028,
    0.2959,
    0.2028,
    0.2959,
    0.2028,
    0.2959,
    0.5013,
    0.0778,
    0.5013,
    0.0778,
    0.5013,
    0.0778,
    0.5013,
    0.0778,
    0.5013,
    0.0778,
    0.5013,
    0.0778,
    0.375,
    0.0778,
    0.375,
    0.0778,
    0.375,
    0.0778,
    0.2028,
    0.25,
    0.2028,
    0.25,
    0.2028,
    0.25,
    0.375,
    0.9722,
    0.375,
    0.9722,
    0.4203,
    0,
    0.4203,
    0,
    0.1499,
    0.2631,
    0.1499,
    0.2631,
    0.7972,
    0.2959,
    0.7972,
    0.2959,
    0.7972,
    0.2959,
    0.7972,
    0.2959,
    0.5011,
    0.9541,
    0.5011,
    0.9541,
    0.5011,
    0.9541,
    0.5011,
    0.9541,
    0.7972,
    0.25,
    0.7972,
    0.25,
    0.7972,
    0.25,
    0.625,
    0.0778,
    0.625,
    0.0778,
    0.625,
    0.0778,
    0.875,
    0.2778,
    0.5926,
    0.9869,
    0.875,
    0.2778,
    0.5926,
    0.9869,
    0.625,
    0.0348,
    0.625,
    0.0348,
    0.5,
    1,
    0.5,
    0,
    0.5,
    1,
    0.5,
    0,
    0.2028,
    0.4541,
    0.2028,
    0.4541,
    0.2028,
    0.4541,
    0.2028,
    0.4541,
    0.2028,
    0.4541,
    0.4989,
    0.7959,
    0.4989,
    0.7959,
    0.4989,
    0.7959,
    0.4989,
    0.7959,
    0.4989,
    0.7959,
    0.4074,
    0.7631,
    0.4074,
    0.7631,
    0.375,
    0.7152,
    0.375,
    0.7152,
    0.125,
    0.4722,
    0.125,
    0.4722,
    0.5,
    0.75,
    0.5,
    0.75,
    0.5,
    0.75,
    0.5,
    0.75,
    0.375,
    0.6722,
    0.375,
    0.6722,
    0.375,
    0.6722,
    0.2028,
    0.5,
    0.2028,
    0.5,
    0.7972,
    0.4541,
    0.7972,
    0.4541,
    0.7972,
    0.4541,
    0.7972,
    0.4541,
    0.5011,
    0.6722,
    0.5011,
    0.6722,
    0.5011,
    0.6722,
    0.5011,
    0.6722,
    0.5011,
    0.6722,
    0.5011,
    0.6722,
    0.8279,
    0.5,
    0.625,
    0.7706,
    0.625,
    0.7706,
    0.8279,
    0.5,
    0.8279,
    0.5,
    0.5926,
    0.7279,
    0.5926,
    0.7279,
    0.875,
    0.4541,
    0.875,
    0.4541,
    0.625,
    0.7959,
    0.625,
    0.7959,
    0.2972,
    0.2959,
    0.2972,
    0.2959,
    0.2972,
    0.2959,
    0.2972,
    0.2959,
    0.2972,
    0.2959,
    0.5033,
    0.2959,
    0.5033,
    0.2959,
    0.5033,
    0.2959,
    0.5033,
    0.2959,
    0.5033,
    0.2959,
    0.375,
    0.2959,
    0.375,
    0.2959,
    0.375,
    0.2959,
    0.375,
    0.2959,
    0.3865,
    0.2276,
    0.3865,
    0.2276,
    0.3677,
    0.2464,
    0.3865,
    0.2276,
    0.3865,
    0.2276,
    0.3865,
    0.2276,
    0.5,
    0.25,
    0.5,
    0.25,
    0.5,
    0.25,
    0.5,
    0.25,
    0.7028,
    0.2959,
    0.7028,
    0.2959,
    0.7028,
    0.2959,
    0.7028,
    0.2959,
    0.7028,
    0.2959,
    0.4992,
    0.1722,
    0.4992,
    0.1722,
    0.4992,
    0.1722,
    0.4992,
    0.1722,
    0.4992,
    0.1722,
    0.4992,
    0.1722,
    0.4992,
    0.1722,
    0.7028,
    0.25,
    0.7028,
    0.25,
    0.625,
    0.1722,
    0.625,
    0.1722,
    0.6224,
    0.2663,
    0.6224,
    0.2663,
    0.6224,
    0.2663,
    0.6224,
    0.2663,
    0.6224,
    0.2663,
    0.6224,
    0.2663,
    0.2972,
    0.4541,
    0.2972,
    0.4541,
    0.2972,
    0.4541,
    0.2972,
    0.4541,
    0.4989,
    0.5778,
    0.4989,
    0.5778,
    0.4989,
    0.5778,
    0.4989,
    0.5778,
    0.4989,
    0.5778,
    0.3775,
    0.5172,
    0.3775,
    0.5172,
    0.3553,
    0.4951,
    0.3553,
    0.4951,
    0.3775,
    0.5172,
    0.3775,
    0.5172,
    0.3775,
    0.5172,
    0.5,
    0.5,
    0.5,
    0.5,
    0.5,
    0.5,
    0.5,
    0.5,
    0.375,
    0.4541,
    0.375,
    0.4541,
    0.375,
    0.4541,
    0.375,
    0.4541,
    0.7028,
    0.4541,
    0.7028,
    0.4541,
    0.7028,
    0.4541,
    0.7028,
    0.4541,
    0.7028,
    0.4541,
    0.4967,
    0.4541,
    0.4967,
    0.4541,
    0.4967,
    0.4541,
    0.4967,
    0.4541,
    0.4967,
    0.4541,
    0.4967,
    0.4541,
    0.625,
    0.4541,
    0.625,
    0.4541,
    0.625,
    0.4541,
    0.625,
    0.4541,
    0.6364,
    0.5034,
    0.6142,
    0.5255,
    0.6142,
    0.5255,
    0.6142,
    0.5255,
    0.6142,
    0.5255,
    0.6142,
    0.5255,
    0.6142,
    0.5255
  ]);
  var weights_arr4 = Float32Array.from([]);
  var index_arr4 = Uint16Array.from([
    2032,
    1916,
    1945,
    1941,
    1935,
    2027,
    2036,
    2016,
    1922,
    1925,
    2018,
    2003,
    126,
    191,
    2,
    191,
    67,
    2,
    2046,
    2086,
    2007,
    2086,
    2079,
    2007,
    2043,
    2030,
    2084,
    2030,
    2076,
    2084,
    2069,
    2013,
    2082,
    2013,
    2011,
    2082,
    1987,
    2052,
    2090,
    1995,
    2087,
    2074,
    2054,
    1990,
    1977,
    2060,
    1980,
    1959,
    2051,
    2006,
    2071,
    2006,
    2015,
    2071,
    1961,
    2e3,
    1936,
    2e3,
    1947,
    1936,
    1998,
    1981,
    1946,
    1981,
    1932,
    1946,
    1939,
    1927,
    1965,
    1927,
    1967,
    1965,
    1891,
    1843,
    1869,
    1865,
    1861,
    1831,
    1840,
    1888,
    1882,
    1878,
    1874,
    1769,
    1812,
    1834,
    1797,
    1798,
    1837,
    1827,
    1807,
    1787,
    1771,
    1775,
    1766,
    1871,
    1688,
    1706,
    1724,
    1723,
    1704,
    1696,
    1930,
    1910,
    1970,
    1910,
    1956,
    1970,
    1720,
    1756,
    1691,
    1756,
    1745,
    1691,
    1718,
    1714,
    1754,
    1714,
    1675,
    1754,
    1743,
    1740,
    1689,
    1740,
    1700,
    1689,
    1656,
    1734,
    1759,
    1760,
    1735,
    1741,
    1679,
    1666,
    1653,
    1738,
    1730,
    1698,
    1730,
    1607,
    1698,
    1649,
    1684,
    1628,
    1684,
    1635,
    1628,
    1613,
    1643,
    1620,
    1685,
    1671,
    1637,
    1671,
    1711,
    1637,
    1626,
    1615,
    1645,
    1615,
    1657,
    1645,
    1424,
    1453,
    1547,
    1451,
    1444,
    1537,
    1429,
    1543,
    1525,
    1434,
    1527,
    1512,
    1617,
    1602,
    1659,
    1602,
    1726,
    1659,
    1515,
    1554,
    1585,
    1554,
    1594,
    1585,
    1551,
    1539,
    1591,
    1539,
    1584,
    1591,
    1579,
    1520,
    1589,
    1520,
    1517,
    1589,
    1497,
    1560,
    1600,
    1597,
    1581,
    1493,
    1563,
    1499,
    1482,
    1568,
    1485,
    1466,
    1559,
    1513,
    1580,
    1513,
    1522,
    1580,
    1471,
    1509,
    1445,
    1509,
    1455,
    1445,
    1491,
    1441,
    1507,
    1441,
    1454,
    1507,
    1436,
    1476,
    1448,
    1476,
    1474,
    1448,
    1239,
    1268,
    1368,
    1267,
    1259,
    1358,
    1363,
    1348,
    1244,
    1346,
    1333,
    1231,
    1439,
    1418,
    1478,
    1418,
    1465,
    1478,
    1341,
    1377,
    1406,
    1377,
    1412,
    1406,
    1361,
    1402,
    1375,
    1402,
    1410,
    1375,
    1393,
    1345,
    1405,
    1345,
    1338,
    1405,
    1316,
    1383,
    1414,
    1322,
    1415,
    1398,
    1303,
    1283,
    1378,
    1287,
    1296,
    1324,
    1326,
    1297,
    1311,
    1391,
    1381,
    1343,
    1381,
    1335,
    1343,
    1328,
    1276,
    1288,
    1276,
    1261,
    1288,
    1264,
    1271,
    1252,
    1253,
    1272,
    1233,
    1308,
    1255,
    1331,
    1255,
    1278,
    1331,
    1245,
    1292,
    1260,
    1292,
    1286,
    1260,
    1052,
    1081,
    1171,
    1170,
    1080,
    1068,
    1054,
    1164,
    1157,
    1155,
    1137,
    1048,
    1247,
    1228,
    1293,
    1228,
    1280,
    1293,
    1180,
    1220,
    1142,
    1220,
    1216,
    1142,
    1163,
    1211,
    1177,
    1211,
    1218,
    1177,
    1215,
    1202,
    1140,
    1202,
    1148,
    1140,
    1124,
    1188,
    1222,
    1131,
    1223,
    1208,
    1121,
    1108,
    1192,
    1110,
    1092,
    1183,
    1200,
    1186,
    1145,
    1186,
    1139,
    1145,
    1097,
    1132,
    1072,
    1132,
    1082,
    1072,
    1135,
    1116,
    1084,
    1116,
    1066,
    1084,
    1060,
    1100,
    1071,
    1100,
    1094,
    1071,
    1062,
    1044,
    1102,
    1044,
    1090,
    1102,
    971,
    1002,
    1032,
    1002,
    1038,
    1032,
    990,
    952,
    1e3,
    952,
    1036,
    1e3,
    1030,
    1027,
    968,
    1027,
    976,
    968,
    957,
    1010,
    1040,
    963,
    1041,
    950,
    1008,
    955,
    942,
    1014,
    941,
    1005,
    1025,
    1007,
    973,
    1007,
    895,
    973,
    930,
    964,
    910,
    964,
    917,
    910,
    948,
    987,
    966,
    987,
    920,
    966,
    902,
    933,
    908,
    933,
    927,
    908,
    808,
    684,
    697,
    818,
    696,
    688,
    662,
    778,
    799,
    797,
    771,
    658,
    815,
    776,
    795,
    791,
    783,
    811,
    904,
    892,
    935,
    892,
    1003,
    935,
    832,
    879,
    816,
    879,
    868,
    816,
    804,
    862,
    829,
    862,
    877,
    829,
    866,
    857,
    774,
    857,
    788,
    774,
    874,
    842,
    850,
    884,
    852,
    864,
    754,
    872,
    887,
    889,
    858,
    748,
    838,
    726,
    741,
    742,
    714,
    833,
    719,
    734,
    761,
    763,
    735,
    723,
    837,
    773,
    855,
    773,
    785,
    855,
    721,
    767,
    692,
    767,
    699,
    692,
    666,
    691,
    705,
    745,
    685,
    768,
    685,
    701,
    768,
    675,
    730,
    665,
    730,
    718,
    665,
    455,
    473,
    582,
    581,
    472,
    460,
    546,
    556,
    440,
    438,
    555,
    537,
    579,
    543,
    565,
    590,
    562,
    549,
    654,
    713,
    677,
    713,
    732,
    677,
    576,
    596,
    637,
    596,
    647,
    637,
    594,
    568,
    645,
    568,
    633,
    645,
    610,
    628,
    542,
    628,
    554,
    542,
    642,
    606,
    619,
    641,
    648,
    526,
    528,
    649,
    630,
    603,
    516,
    504,
    505,
    485,
    598,
    602,
    538,
    626,
    538,
    551,
    626,
    522,
    530,
    465,
    530,
    474,
    465,
    433,
    464,
    478,
    446,
    481,
    453,
    533,
    508,
    476,
    508,
    458,
    476,
    431,
    448,
    490,
    448,
    492,
    490,
    450,
    420,
    495,
    420,
    483,
    495,
    259,
    284,
    364,
    284,
    368,
    364,
    285,
    272,
    369,
    272,
    359,
    369,
    363,
    356,
    258,
    356,
    265,
    258,
    337,
    255,
    355,
    255,
    264,
    355,
    344,
    377,
    409,
    377,
    415,
    409,
    362,
    405,
    375,
    405,
    413,
    375,
    406,
    396,
    340,
    396,
    349,
    340,
    395,
    381,
    347,
    381,
    339,
    347,
    383,
    416,
    325,
    416,
    328,
    325,
    417,
    402,
    329,
    402,
    318,
    329,
    315,
    389,
    324,
    389,
    382,
    324,
    296,
    378,
    314,
    378,
    388,
    314,
    331,
    286,
    301,
    286,
    277,
    301,
    334,
    316,
    288,
    316,
    270,
    288,
    266,
    302,
    274,
    302,
    298,
    274,
    37,
    52,
    175,
    50,
    42,
    158,
    7,
    136,
    146,
    18,
    145,
    128,
    171,
    134,
    156,
    181,
    153,
    139,
    252,
    294,
    268,
    294,
    304,
    268,
    168,
    187,
    229,
    187,
    240,
    229,
    160,
    225,
    185,
    225,
    238,
    185,
    219,
    144,
    202,
    144,
    133,
    202,
    235,
    198,
    211,
    215,
    201,
    227,
    104,
    233,
    248,
    115,
    249,
    220,
    194,
    75,
    91,
    93,
    66,
    189,
    70,
    82,
    118,
    84,
    73,
    99,
    193,
    129,
    217,
    129,
    141,
    217,
    107,
    122,
    44,
    122,
    59,
    44,
    47,
    54,
    28,
    29,
    55,
    32,
    125,
    96,
    61,
    96,
    38,
    61,
    20,
    79,
    12,
    79,
    72,
    12,
    2092,
    2065,
    2077,
    2089,
    2083,
    2075,
    2062,
    2068,
    2081,
    2058,
    2066,
    2056,
    2045,
    2022,
    2034,
    2042,
    2039,
    2029,
    2020,
    2025,
    2010,
    2021,
    2014,
    2005,
    1993,
    2001,
    1963,
    1996,
    1973,
    1985,
    1968,
    1976,
    1988,
    1966,
    1974,
    1964,
    1949,
    1952,
    1937,
    1951,
    1943,
    1915,
    1929,
    1955,
    1918,
    1931,
    1923,
    1911,
    1900,
    1908,
    1898,
    1904,
    1886,
    1889,
    1876,
    1883,
    1896,
    1875,
    1825,
    1873,
    1863,
    1851,
    1785,
    1862,
    1793,
    1860,
    1846,
    1857,
    1783,
    1849,
    1852,
    1841,
    1835,
    1822,
    1894,
    1838,
    1907,
    1829,
    1817,
    1823,
    1893,
    1813,
    1819,
    1808,
    1796,
    1804,
    1790,
    1800,
    1791,
    1781,
    1778,
    1805,
    1780,
    1776,
    1854,
    1767,
    1753,
    1765,
    1750,
    1755,
    1761,
    1744,
    1736,
    1739,
    1742,
    1732,
    1670,
    1728,
    1717,
    1722,
    1625,
    1715,
    1633,
    1713,
    1703,
    1710,
    1694,
    1702,
    1697,
    1606,
    1677,
    1683,
    1648,
    1681,
    1762,
    1673,
    1660,
    1667,
    1651,
    1658,
    1663,
    1646,
    1636,
    1642,
    1630,
    1639,
    1631,
    1622,
    1608,
    1616,
    1627,
    1611,
    1707,
    1604,
    1593,
    1601,
    1562,
    1595,
    1575,
    1586,
    1570,
    1577,
    1587,
    1567,
    1574,
    1565,
    1552,
    1531,
    1541,
    1550,
    1546,
    1538,
    1529,
    1534,
    1519,
    1530,
    1523,
    1514,
    1501,
    1508,
    1469,
    1504,
    1487,
    1495,
    1480,
    1488,
    1473,
    1484,
    1477,
    1464,
    1457,
    1460,
    1446,
    1459,
    1452,
    1423,
    1437,
    1463,
    1426,
    1440,
    1432,
    1419,
    1407,
    1416,
    1386,
    1411,
    1397,
    1404,
    1390,
    1394,
    1385,
    1388,
    1305,
    1380,
    1373,
    1376,
    1340,
    1370,
    1354,
    1366,
    1351,
    1355,
    1336,
    1349,
    1342,
    1334,
    1317,
    1329,
    1289,
    1319,
    1327,
    1312,
    1300,
    1302,
    1313,
    1298,
    1294,
    1281,
    1274,
    1279,
    1257,
    1275,
    1266,
    1236,
    1250,
    1254,
    1235,
    1248,
    1240,
    1229,
    1227,
    1206,
    1214,
    1225,
    1217,
    1210,
    1198,
    1203,
    1189,
    1197,
    1195,
    1185,
    1178,
    1151,
    1168,
    1176,
    1174,
    1162,
    1146,
    1159,
    1166,
    1149,
    1152,
    1141,
    1126,
    1133,
    1099,
    1127,
    1114,
    1120,
    1104,
    1111,
    1095,
    1107,
    1103,
    1091,
    1077,
    1087,
    1075,
    1078,
    1085,
    1067,
    1063,
    1088,
    1049,
    1065,
    1057,
    1045,
    1034,
    1043,
    1012,
    1037,
    1023,
    1031,
    1018,
    1026,
    1028,
    1017,
    1020,
    1011,
    999,
    979,
    996,
    997,
    915,
    989,
    974,
    986,
    993,
    977,
    980,
    969,
    959,
    965,
    932,
    960,
    947,
    954,
    937,
    944,
    928,
    940,
    936,
    1004,
    918,
    924,
    911,
    921,
    912,
    899,
    905,
    925,
    896,
    906,
    982,
    893,
    880,
    890,
    873,
    882,
    876,
    860,
    847,
    856,
    863,
    845,
    849,
    841,
    828,
    831,
    814,
    825,
    822,
    806,
    787,
    801,
    782,
    789,
    793,
    775,
    755,
    766,
    720,
    757,
    765,
    751,
    738,
    740,
    725,
    737,
    731,
    712,
    700,
    707,
    693,
    703,
    694,
    680,
    669,
    676,
    667,
    672,
    708,
    659,
    652,
    623,
    634,
    651,
    644,
    632,
    618,
    627,
    609,
    616,
    620,
    607,
    593,
    597,
    578,
    589,
    586,
    570,
    559,
    563,
    540,
    557,
    552,
    539,
    531,
    501,
    514,
    534,
    524,
    509,
    494,
    502,
    513,
    491,
    498,
    489,
    468,
    480,
    466,
    470,
    477,
    459,
    441,
    449,
    432,
    443,
    435,
    421,
    410,
    418,
    386,
    414,
    401,
    408,
    393,
    398,
    384,
    392,
    390,
    380,
    372,
    376,
    342,
    370,
    352,
    367,
    348,
    358,
    366,
    350,
    353,
    341,
    332,
    311,
    322,
    335,
    327,
    317,
    305,
    312,
    320,
    303,
    308,
    299,
    281,
    291,
    279,
    283,
    289,
    271,
    261,
    267,
    276,
    263,
    292,
    256,
    241,
    250,
    234,
    243,
    237,
    223,
    208,
    218,
    199,
    206,
    210,
    197,
    183,
    188,
    169,
    180,
    177,
    162,
    150,
    154,
    131,
    148,
    142,
    130,
    110,
    123,
    108,
    112,
    121,
    101,
    88,
    90,
    74,
    87,
    81,
    65,
    57,
    62,
    40,
    58,
    49,
    34,
    24,
    30,
    5,
    25,
    16,
    1,
    22,
    0,
    80,
    0,
    63,
    80,
    1983,
    2072,
    1934,
    2072,
    2026,
    1934,
    172,
    230,
    135,
    230,
    203,
    135,
    2004,
    2049,
    1913,
    2049,
    1960,
    1913,
    1494,
    1582,
    1443,
    1582,
    1535,
    1443,
    1258,
    1310,
    1357,
    1310,
    1400,
    1357,
    1510,
    1557,
    1420,
    1557,
    1468,
    1420,
    1069,
    1118,
    1160,
    1118,
    1209,
    1160,
    1379,
    1284,
    1332,
    1284,
    1230,
    1332,
    871,
    753,
    728,
    716,
    690,
    664,
    1184,
    1093,
    1136,
    1093,
    1046,
    1136,
    777,
    817,
    869,
    682,
    807,
    779,
    605,
    640,
    518,
    749,
    859,
    687,
    859,
    802,
    687,
    519,
    463,
    487,
    463,
    430,
    487,
    511,
    631,
    461,
    631,
    566,
    461,
    770,
    834,
    656,
    834,
    715,
    656,
    428,
    456,
    571,
    580,
    638,
    544,
    638,
    612,
    544,
    273,
    319,
    360,
    319,
    403,
    360,
    231,
    102,
    76,
    599,
    486,
    535,
    486,
    423,
    535,
    43,
    11,
    105,
    11,
    68,
    105,
    98,
    222,
    41,
    222,
    157,
    41,
    379,
    297,
    336,
    297,
    254,
    336,
    8,
    35,
    163,
    2040,
    2031,
    1944,
    2038,
    1942,
    2028,
    1919,
    2035,
    1921,
    1912,
    1924,
    2002,
    1997,
    1986,
    2088,
    1984,
    1994,
    2073,
    2057,
    2055,
    1978,
    2048,
    2059,
    1958,
    1905,
    1890,
    1867,
    1903,
    1866,
    1832,
    1848,
    1839,
    1880,
    1845,
    1879,
    1770,
    1789,
    1811,
    1795,
    1858,
    1799,
    1828,
    1814,
    1809,
    1772,
    1815,
    1774,
    1870,
    1623,
    1721,
    1695,
    1748,
    1655,
    1757,
    1676,
    1647,
    1664,
    1746,
    1678,
    1650,
    1609,
    1629,
    1641,
    1692,
    1612,
    1619,
    1540,
    1425,
    1548,
    1545,
    1450,
    1536,
    1431,
    1428,
    1524,
    1421,
    1433,
    1511,
    1505,
    1496,
    1598,
    1503,
    1596,
    1492,
    1566,
    1564,
    1483,
    1556,
    1569,
    1467,
    1364,
    1238,
    1367,
    1369,
    1269,
    1359,
    1237,
    1362,
    1243,
    1242,
    1347,
    1232,
    1321,
    1314,
    1413,
    1309,
    1323,
    1399,
    1382,
    1315,
    1304,
    1165,
    1055,
    1173,
    1161,
    1172,
    1070,
    1059,
    1053,
    1156,
    1058,
    1154,
    1047,
    1129,
    1123,
    1221,
    1117,
    1130,
    1207,
    1187,
    1122,
    1194,
    1193,
    1109,
    1182,
    992,
    901,
    914,
    900,
    991,
    984,
    962,
    956,
    1039,
    1015,
    1009,
    943,
    820,
    809,
    698,
    803,
    819,
    689,
    674,
    661,
    798,
    673,
    796,
    657,
    827,
    813,
    794,
    826,
    792,
    812,
    881,
    875,
    851,
    759,
    752,
    886,
    760,
    888,
    747,
    843,
    840,
    743,
    844,
    744,
    835,
    750,
    764,
    724,
    660,
    710,
    681,
    573,
    457,
    584,
    567,
    583,
    462,
    427,
    545,
    439,
    424,
    437,
    536,
    592,
    577,
    564,
    575,
    591,
    550,
    636,
    624,
    611,
    517,
    639,
    525,
    510,
    527,
    629,
    613,
    604,
    506,
    614,
    507,
    600,
    520,
    488,
    497,
    442,
    434,
    479,
    425,
    445,
    452,
    165,
    36,
    174,
    173,
    51,
    159,
    19,
    10,
    147,
    3,
    17,
    127,
    184,
    170,
    155,
    167,
    182,
    140,
    242,
    236,
    212,
    245,
    214,
    226,
    114,
    103,
    247,
    97,
    116,
    221,
    204,
    196,
    92,
    205,
    94,
    190,
    106,
    69,
    117,
    120,
    85,
    100,
    13,
    45,
    26,
    6,
    31,
    33,
    2064,
    2091,
    2053,
    2085,
    2093,
    2078,
    2067,
    2061,
    2080,
    2070,
    2063,
    2050,
    2023,
    2047,
    2008,
    2041,
    2044,
    2033,
    2024,
    2017,
    2037,
    2012,
    2019,
    2009,
    1972,
    1992,
    1962,
    1999,
    1991,
    1982,
    1975,
    1969,
    1989,
    1979,
    1971,
    1957,
    1940,
    1948,
    1933,
    1953,
    1950,
    1914,
    1954,
    1926,
    1938,
    1920,
    1928,
    1917,
    1884,
    1901,
    1899,
    1909,
    1902,
    1830,
    1885,
    1881,
    1887,
    1826,
    1877,
    1897,
    1853,
    1868,
    1842,
    1794,
    1864,
    1786,
    1850,
    1847,
    1784,
    1856,
    1844,
    1768,
    1820,
    1833,
    1810,
    1906,
    1836,
    1895,
    1821,
    1816,
    1892,
    1824,
    1818,
    1872,
    1792,
    1802,
    1859,
    1806,
    1801,
    1782,
    1803,
    1773,
    1788,
    1855,
    1777,
    1779,
    1758,
    1751,
    1749,
    1764,
    1752,
    1674,
    1669,
    1731,
    1654,
    1737,
    1733,
    1729,
    1725,
    1719,
    1690,
    1634,
    1716,
    1624,
    1699,
    1705,
    1687,
    1709,
    1701,
    1605,
    1763,
    1682,
    1747,
    1686,
    1680,
    1672,
    1665,
    1661,
    1652,
    1668,
    1662,
    1727,
    1632,
    1640,
    1712,
    1644,
    1638,
    1621,
    1708,
    1614,
    1693,
    1618,
    1610,
    1603,
    1573,
    1592,
    1561,
    1599,
    1590,
    1583,
    1576,
    1571,
    1588,
    1578,
    1572,
    1558,
    1532,
    1555,
    1516,
    1549,
    1553,
    1542,
    1533,
    1526,
    1544,
    1521,
    1528,
    1518,
    1486,
    1502,
    1470,
    1506,
    1500,
    1490,
    1489,
    1481,
    1498,
    1475,
    1479,
    1472,
    1449,
    1456,
    1442,
    1462,
    1458,
    1422,
    1461,
    1435,
    1447,
    1430,
    1438,
    1427,
    1395,
    1409,
    1387,
    1417,
    1408,
    1401,
    1396,
    1392,
    1403,
    1306,
    1389,
    1384,
    1356,
    1372,
    1339,
    1374,
    1371,
    1360,
    1353,
    1350,
    1365,
    1344,
    1352,
    1337,
    1325,
    1318,
    1290,
    1330,
    1320,
    1307,
    1291,
    1295,
    1285,
    1301,
    1299,
    1282,
    1277,
    1270,
    1263,
    1265,
    1273,
    1256,
    1251,
    1246,
    1262,
    1241,
    1249,
    1234,
    1204,
    1224,
    1191,
    1219,
    1226,
    1213,
    1205,
    1201,
    1212,
    1196,
    1199,
    1190,
    1153,
    1181,
    1143,
    1175,
    1179,
    1169,
    1150,
    1147,
    1167,
    1158,
    1144,
    1138,
    1112,
    1125,
    1098,
    1134,
    1128,
    1115,
    1113,
    1106,
    1119,
    1101,
    1105,
    1096,
    1083,
    1076,
    1074,
    1089,
    1079,
    1051,
    1086,
    1061,
    1073,
    1056,
    1064,
    1050,
    1021,
    1035,
    1013,
    1042,
    1033,
    951,
    1022,
    1019,
    1029,
    1024,
    1016,
    1006,
    981,
    1001,
    970,
    916,
    998,
    995,
    978,
    975,
    994,
    985,
    972,
    894,
    945,
    958,
    931,
    967,
    961,
    949,
    946,
    939,
    953,
    934,
    938,
    929,
    913,
    922,
    988,
    926,
    919,
    897,
    923,
    903,
    909,
    983,
    907,
    898,
    878,
    885,
    867,
    891,
    883,
    861,
    853,
    848,
    865,
    854,
    846,
    836,
    821,
    823,
    810,
    830,
    824,
    805,
    790,
    786,
    781,
    800,
    784,
    772,
    762,
    756,
    722,
    769,
    758,
    746,
    729,
    733,
    717,
    739,
    736,
    711,
    695,
    704,
    686,
    709,
    702,
    679,
    706,
    670,
    668,
    678,
    671,
    655,
    621,
    650,
    643,
    646,
    653,
    635,
    622,
    617,
    608,
    625,
    615,
    601,
    585,
    587,
    574,
    595,
    588,
    569,
    561,
    558,
    548,
    553,
    560,
    541,
    499,
    529,
    521,
    523,
    532,
    515,
    500,
    493,
    512,
    503,
    496,
    484,
    475,
    469,
    467,
    482,
    471,
    454,
    436,
    447,
    426,
    451,
    444,
    422,
    399,
    412,
    387,
    419,
    411,
    404,
    400,
    397,
    407,
    391,
    394,
    385,
    354,
    373,
    343,
    374,
    371,
    361,
    351,
    346,
    365,
    357,
    345,
    338,
    309,
    330,
    300,
    326,
    333,
    323,
    310,
    306,
    321,
    313,
    307,
    295,
    287,
    280,
    278,
    293,
    282,
    257,
    290,
    260,
    275,
    269,
    262,
    253,
    239,
    246,
    228,
    251,
    244,
    224,
    213,
    209,
    200,
    216,
    207,
    192,
    176,
    178,
    166,
    186,
    179,
    161,
    152,
    149,
    138,
    143,
    151,
    132,
    119,
    111,
    109,
    124,
    113,
    95,
    78,
    83,
    71,
    89,
    86,
    64,
    60,
    53,
    46,
    48,
    56,
    39,
    27,
    21,
    14,
    15,
    23,
    4,
    839,
    870,
    727,
    663,
    683,
    780,
    547,
    429,
    572,
    195,
    232,
    77,
    137,
    9,
    164
  ]);

  // ../meshes/note.ts
  function mesh_note(gl) {
    let vao = gl.createVertexArray();
    gl.bindVertexArray(vao);
    let vertex_buf = gl.createBuffer();
    gl.bindBuffer(GL_ARRAY_BUFFER, vertex_buf);
    gl.bufferData(GL_ARRAY_BUFFER, vertex_arr5, GL_STATIC_DRAW);
    gl.enableVertexAttribArray(0 /* Position */);
    gl.vertexAttribPointer(0 /* Position */, 3, GL_FLOAT, false, 0, 0);
    let normal_buf = gl.createBuffer();
    gl.bindBuffer(GL_ARRAY_BUFFER, normal_buf);
    gl.bufferData(GL_ARRAY_BUFFER, normal_arr5, GL_STATIC_DRAW);
    gl.enableVertexAttribArray(1 /* Normal */);
    gl.vertexAttribPointer(1 /* Normal */, 3, GL_FLOAT, false, 0, 0);
    let texcoord_buf = gl.createBuffer();
    gl.bindBuffer(GL_ARRAY_BUFFER, texcoord_buf);
    gl.bufferData(GL_ARRAY_BUFFER, texcoord_arr5, GL_STATIC_DRAW);
    gl.enableVertexAttribArray(2 /* TexCoord */);
    gl.vertexAttribPointer(2 /* TexCoord */, 2, GL_FLOAT, false, 0, 0);
    let weights_buf = gl.createBuffer();
    gl.bindBuffer(GL_ARRAY_BUFFER, weights_buf);
    gl.bufferData(GL_ARRAY_BUFFER, weights_arr5, GL_STATIC_DRAW);
    gl.enableVertexAttribArray(5 /* Weights */);
    gl.vertexAttribPointer(5 /* Weights */, 4, GL_FLOAT, false, 0, 0);
    let index_buf = gl.createBuffer();
    gl.bindBuffer(GL_ELEMENT_ARRAY_BUFFER, index_buf);
    gl.bufferData(GL_ELEMENT_ARRAY_BUFFER, index_arr5, GL_STATIC_DRAW);
    gl.bindVertexArray(null);
    return {
      Vao: vao,
      VertexBuffer: vertex_buf,
      VertexArray: vertex_arr5,
      NormalBuffer: normal_buf,
      NormalArray: normal_arr5,
      TexCoordBuffer: texcoord_buf,
      TexCoordArray: texcoord_arr5,
      WeightsBuffer: weights_buf,
      WeightsArray: weights_arr5,
      IndexBuffer: index_buf,
      IndexArray: index_arr5,
      IndexCount: index_arr5.length
    };
  }
  var vertex_arr5 = Float32Array.from([
    0.1075,
    0.7101,
    -0.0612,
    0.1075,
    0.7101,
    -0.0612,
    0.1075,
    0.7101,
    -0.0612,
    0.1075,
    1.0146,
    -0.0612,
    0.1075,
    1.0146,
    -0.0612,
    0.1075,
    1.0146,
    -0.0612,
    0.3976,
    0.7461,
    72e-4,
    0.3976,
    0.7461,
    72e-4,
    0.3976,
    0.7461,
    72e-4,
    0.3976,
    1.0506,
    72e-4,
    0.3976,
    1.0506,
    72e-4,
    0.3976,
    1.0506,
    72e-4,
    -0.1879,
    0.6845,
    53e-4,
    -0.1879,
    0.6845,
    53e-4,
    -0.1879,
    0.6845,
    53e-4,
    -0.1879,
    0.989,
    53e-4,
    -0.1879,
    0.989,
    53e-4,
    -0.1879,
    0.989,
    53e-4,
    0.1091,
    0.7101,
    0.0735,
    0.1091,
    0.7101,
    0.0735,
    0.1091,
    0.7101,
    0.0735,
    0.1091,
    1.0146,
    0.0735,
    0.1091,
    1.0146,
    0.0735,
    0.1091,
    1.0146,
    0.0735,
    -0.5349,
    -0.0401,
    -21e-4,
    -0.5349,
    -0.0401,
    -21e-4,
    -0.5349,
    -0.0401,
    -21e-4,
    -0.5349,
    -0.0401,
    -21e-4,
    -0.5349,
    -0.0401,
    -21e-4,
    -0.5349,
    -0.0401,
    -21e-4,
    -0.389,
    -0.0401,
    0.2013,
    -0.389,
    -0.0401,
    0.2013,
    -0.389,
    -0.0401,
    0.2013,
    -0.389,
    -0.0401,
    0.2013,
    -0.456,
    0.0874,
    -0.1335,
    -0.456,
    0.0874,
    -0.1335,
    -0.456,
    0.0874,
    -0.1335,
    -0.456,
    0.0874,
    -0.1335,
    -0.456,
    0.0874,
    -0.1335,
    -0.456,
    0.0874,
    -0.1335,
    -0.495,
    0.0401,
    0.1233,
    -0.495,
    0.0401,
    0.1233,
    -0.495,
    0.0401,
    0.1233,
    -0.495,
    0.0401,
    0.1233,
    -0.495,
    0.0401,
    0.1233,
    -0.3749,
    0.1658,
    -0.0276,
    -0.3749,
    0.1658,
    -0.0276,
    -0.3749,
    0.1658,
    -0.0276,
    -0.3749,
    0.1658,
    -0.0276,
    -0.3749,
    0.1658,
    -0.0276,
    -0.349,
    -0.1658,
    -0.0537,
    -0.349,
    -0.1658,
    -0.0537,
    -0.349,
    -0.1658,
    -0.0537,
    -0.349,
    -0.1658,
    -0.0537,
    -0.349,
    -0.1658,
    -0.0537,
    -0.4765,
    -0.1227,
    -0.0271,
    -0.4765,
    -0.1227,
    -0.0271,
    -0.4765,
    -0.1227,
    -0.0271,
    -0.4765,
    -0.1227,
    -0.0271,
    -0.3947,
    -0.1227,
    0.138,
    -0.3947,
    -0.1227,
    0.138,
    -0.3947,
    -0.1227,
    0.138,
    -0.3947,
    -0.1227,
    0.138,
    -0.3947,
    -0.1227,
    0.138,
    -0.3947,
    -0.1227,
    0.138,
    -0.3947,
    -0.1227,
    0.138,
    -0.2531,
    -0.1227,
    -0.1417,
    -0.2531,
    -0.1227,
    -0.1417,
    -0.2531,
    -0.1227,
    -0.1417,
    -0.2531,
    -0.1227,
    -0.1417,
    -0.2531,
    -0.1227,
    -0.1417,
    -0.1667,
    -0.1227,
    0.0211,
    -0.1667,
    -0.1227,
    0.0211,
    -0.1667,
    -0.1227,
    0.0211,
    -0.1667,
    -0.1227,
    0.0211,
    -0.1667,
    -0.1227,
    0.0211,
    -0.1667,
    -0.1227,
    0.0211,
    -0.1667,
    -0.1227,
    0.0211,
    -0.4491,
    -0.0401,
    -0.1717,
    -0.4491,
    -0.0401,
    -0.1717,
    -0.4491,
    -0.0401,
    -0.1717,
    -0.4491,
    -0.0401,
    -0.1717,
    -0.4491,
    -0.0401,
    -0.1717,
    -0.4491,
    -0.0401,
    -0.1717,
    -0.1987,
    -0.0401,
    -0.1745,
    -0.1987,
    -0.0401,
    -0.1745,
    -0.1987,
    -0.0401,
    -0.1745,
    -0.1987,
    -0.0401,
    -0.1745,
    -0.1987,
    -0.0401,
    -0.1745,
    -0.3243,
    0.0401,
    -0.2138,
    -0.3243,
    0.0401,
    -0.2138,
    -0.3243,
    0.0401,
    -0.2138,
    -0.3243,
    0.0401,
    -0.2138,
    -0.3243,
    0.0401,
    -0.2138,
    -0.1187,
    -0.0401,
    0.0627,
    -0.1187,
    -0.0401,
    0.0627,
    -0.1187,
    -0.0401,
    0.0627,
    -0.1187,
    -0.0401,
    0.0627,
    -0.1187,
    -0.0401,
    0.0627,
    -0.1201,
    0.0401,
    -0.0689,
    -0.1201,
    0.0401,
    -0.0689,
    -0.1201,
    0.0401,
    -0.0689,
    -0.1201,
    0.0401,
    -0.0689,
    -0.1201,
    0.0401,
    -0.0689,
    -0.268,
    -0.053,
    0.203,
    -0.268,
    -0.053,
    0.203,
    -0.268,
    -0.053,
    0.203,
    -0.268,
    -0.053,
    0.203,
    -0.268,
    -0.053,
    0.203,
    -0.268,
    -0.053,
    0.203,
    -0.1948,
    0.0401,
    0.1701,
    -0.1948,
    0.0401,
    0.1701,
    -0.1948,
    0.0401,
    0.1701,
    -0.1948,
    0.0401,
    0.1701,
    -0.4625,
    0.1227,
    0.0687,
    -0.4625,
    0.1227,
    0.0687,
    -0.4625,
    0.1227,
    0.0687,
    -0.4625,
    0.1227,
    0.0687,
    -0.4625,
    0.1227,
    0.0687,
    -0.2492,
    0.1227,
    -0.1397,
    -0.2492,
    0.1227,
    -0.1397,
    -0.2492,
    0.1227,
    -0.1397,
    -0.2492,
    0.1227,
    -0.1397,
    -0.2492,
    0.1227,
    -0.1397,
    -0.2492,
    0.1227,
    -0.1397,
    -0.1674,
    0.1227,
    0.0255,
    -0.1674,
    0.1227,
    0.0255,
    -0.1674,
    0.1227,
    0.0255,
    -0.1674,
    0.1227,
    0.0255,
    -0.1674,
    0.1227,
    0.0255,
    -0.1674,
    0.1227,
    0.0255,
    -0.2992,
    0.1227,
    0.1543,
    -0.2992,
    0.1227,
    0.1543,
    -0.2992,
    0.1227,
    0.1543,
    -0.2992,
    0.1227,
    0.1543,
    -0.2992,
    0.1227,
    0.1543,
    -0.2992,
    0.1227,
    0.1543,
    -0.2992,
    0.1227,
    0.1543,
    -0.1548,
    0.99,
    0.06,
    -0.1548,
    0.99,
    0.06,
    -0.1548,
    0.99,
    0.06,
    -0.23,
    -0.0661,
    0.0452,
    -0.23,
    -0.0661,
    0.0452,
    -0.23,
    -0.0661,
    0.0452,
    -0.2107,
    -0.0661,
    -0.0437,
    -0.2107,
    -0.0661,
    -0.0437,
    -0.2107,
    -0.0661,
    -0.0437,
    -0.2107,
    -0.0661,
    -0.0437,
    -0.2489,
    0.99,
    62e-4,
    -0.2489,
    0.99,
    62e-4,
    -0.2489,
    0.99,
    62e-4,
    -0.2489,
    0.99,
    62e-4,
    -0.1391,
    0.99,
    -0.0296,
    -0.1391,
    0.99,
    -0.0296,
    -0.1391,
    0.99,
    -0.0296,
    -0.1391,
    0.99,
    -0.0296,
    -0.134,
    -0.0661,
    -0.0137,
    -0.134,
    -0.0661,
    -0.0137,
    -0.134,
    -0.0661,
    -0.0137,
    -0.1492,
    -0.0661,
    0.0562,
    -0.1492,
    -0.0661,
    0.0562,
    -0.1492,
    -0.0661,
    0.0562,
    0.1925,
    0.0156,
    -0.2094,
    0.1925,
    0.0156,
    -0.2094,
    0.1925,
    0.0156,
    -0.2094,
    0.1925,
    0.0156,
    -0.2094,
    0.1925,
    0.0156,
    -0.2094,
    0.1925,
    0.0156,
    -0.2094,
    0.4301,
    0.0156,
    -0.1306,
    0.4301,
    0.0156,
    -0.1306,
    0.4301,
    0.0156,
    -0.1306,
    0.4301,
    0.0156,
    -0.1306,
    0.4301,
    0.0156,
    -0.1306,
    0.3911,
    -0.0316,
    0.1262,
    0.3911,
    -0.0316,
    0.1262,
    0.3911,
    -0.0316,
    0.1262,
    0.3911,
    -0.0316,
    0.1262,
    0.3911,
    -0.0316,
    0.1262,
    0.0855,
    0.0959,
    -0.1327,
    0.0855,
    0.0959,
    -0.1327,
    0.0855,
    0.0959,
    -0.1327,
    0.0855,
    0.0959,
    -0.1327,
    0.0855,
    0.0959,
    -0.1327,
    0.3241,
    0.0959,
    -0.2086,
    0.3241,
    0.0959,
    -0.2086,
    0.3241,
    0.0959,
    -0.2086,
    0.3241,
    0.0959,
    -0.2086,
    0.3241,
    0.0959,
    -0.2086,
    0.4701,
    0.0959,
    -52e-4,
    0.4701,
    0.0959,
    -52e-4,
    0.4701,
    0.0959,
    -52e-4,
    0.4701,
    0.0959,
    -52e-4,
    0.4701,
    0.0959,
    -52e-4,
    0.4701,
    0.0959,
    -52e-4,
    0.2041,
    0.2216,
    -0.0333,
    0.2041,
    0.2216,
    -0.0333,
    0.2041,
    0.2216,
    -0.0333,
    0.2041,
    0.2216,
    -0.0333,
    0.2041,
    0.2216,
    -0.0333,
    0.2041,
    0.2216,
    -0.0333,
    0.23,
    -0.11,
    -0.0593,
    0.23,
    -0.11,
    -0.0593,
    0.23,
    -0.11,
    -0.0593,
    0.23,
    -0.11,
    -0.0593,
    0.23,
    -0.11,
    -0.0593,
    0.23,
    -0.11,
    -0.0593,
    0.1186,
    -0.0669,
    0.067,
    0.1186,
    -0.0669,
    0.067,
    0.1186,
    -0.0669,
    0.067,
    0.1186,
    -0.0669,
    0.067,
    0.1186,
    -0.0669,
    0.067,
    0.1186,
    -0.0669,
    0.067,
    0.2399,
    -0.086,
    0.1034,
    0.2399,
    -0.086,
    0.1034,
    0.2399,
    -0.086,
    0.1034,
    0.2399,
    -0.086,
    0.1034,
    0.2399,
    -0.086,
    0.1034,
    0.3259,
    -0.0669,
    -0.1473,
    0.3259,
    -0.0669,
    -0.1473,
    0.3259,
    -0.0669,
    -0.1473,
    0.3259,
    -0.0669,
    -0.1473,
    0.3259,
    -0.0669,
    -0.1473,
    0.4123,
    -0.0669,
    0.0155,
    0.4123,
    -0.0669,
    0.0155,
    0.4123,
    -0.0669,
    0.0155,
    0.4123,
    -0.0669,
    0.0155,
    0.4123,
    -0.0669,
    0.0155,
    0.4123,
    -0.0669,
    0.0155,
    0.0552,
    0.0156,
    0.0616,
    0.0552,
    0.0156,
    0.0616,
    0.0552,
    0.0156,
    0.0616,
    0.0552,
    0.0156,
    0.0616,
    0.1338,
    0.0959,
    0.1672,
    0.1338,
    0.0959,
    0.1672,
    0.1338,
    0.0959,
    0.1672,
    0.1338,
    0.0959,
    0.1672,
    0.1338,
    0.0959,
    0.1672,
    0.0529,
    28e-4,
    -0.0593,
    0.0529,
    28e-4,
    -0.0593,
    0.0529,
    28e-4,
    -0.0593,
    0.0529,
    28e-4,
    -0.0593,
    0.0529,
    28e-4,
    -0.0593,
    0.0529,
    28e-4,
    -0.0593,
    0.2594,
    0.0156,
    0.2065,
    0.2594,
    0.0156,
    0.2065,
    0.2594,
    0.0156,
    0.2065,
    0.2594,
    0.0156,
    0.2065,
    0.2594,
    0.0156,
    0.2065,
    0.2594,
    0.0156,
    0.2065,
    0.3842,
    0.0959,
    0.1644,
    0.3842,
    0.0959,
    0.1644,
    0.3842,
    0.0959,
    0.1644,
    0.3842,
    0.0959,
    0.1644,
    0.3842,
    0.0959,
    0.1644,
    0.0795,
    0.1434,
    0.0221,
    0.0795,
    0.1434,
    0.0221,
    0.0795,
    0.1434,
    0.0221,
    0.0795,
    0.1434,
    0.0221,
    0.0795,
    0.1434,
    0.0221,
    0.0795,
    0.1434,
    0.0221,
    0.1882,
    0.1785,
    0.1344,
    0.1882,
    0.1785,
    0.1344,
    0.1882,
    0.1785,
    0.1344,
    0.1882,
    0.1785,
    0.1344,
    0.1882,
    0.1785,
    0.1344,
    0.1882,
    0.1785,
    0.1344,
    0.23,
    0.1785,
    -0.1609,
    0.23,
    0.1785,
    -0.1609,
    0.23,
    0.1785,
    -0.1609,
    0.23,
    0.1785,
    -0.1609,
    0.23,
    0.1785,
    -0.1609,
    0.3956,
    0.1785,
    -0.08,
    0.3956,
    0.1785,
    -0.08,
    0.3956,
    0.1785,
    -0.08,
    0.3956,
    0.1785,
    -0.08,
    0.3956,
    0.1785,
    -0.08,
    0.3956,
    0.1785,
    -0.08,
    0.3698,
    0.1785,
    0.1025,
    0.3698,
    0.1785,
    0.1025,
    0.3698,
    0.1785,
    0.1025,
    0.3698,
    0.1785,
    0.1025,
    0.3698,
    0.1785,
    0.1025,
    0.441,
    1.0458,
    0.0394,
    0.441,
    1.0458,
    0.0394,
    0.441,
    1.0458,
    0.0394,
    0.3552,
    -0.0103,
    0.0499,
    0.3552,
    -0.0103,
    0.0499,
    0.3552,
    -0.0103,
    0.0499,
    0.3552,
    -0.0103,
    0.0499,
    0.3602,
    1.0458,
    0.0507,
    0.3602,
    1.0458,
    0.0507,
    0.3602,
    1.0458,
    0.0507,
    0.3447,
    1.0458,
    -0.0191,
    0.3447,
    1.0458,
    -0.0191,
    0.3447,
    1.0458,
    -0.0191,
    0.3447,
    1.0458,
    -0.0191,
    0.36,
    -0.0103,
    -0.0412,
    0.36,
    -0.0103,
    -0.0412,
    0.36,
    -0.0103,
    -0.0412,
    0.36,
    -0.0103,
    -0.0412,
    0.4212,
    1.0458,
    -0.0494,
    0.4212,
    1.0458,
    -0.0494,
    0.4212,
    1.0458,
    -0.0494,
    0.4212,
    1.0458,
    -0.0494,
    0.4597,
    -0.0103,
    3e-4,
    0.4597,
    -0.0103,
    3e-4,
    0.4597,
    -0.0103,
    3e-4,
    0.4597,
    -0.0103,
    3e-4
  ]);
  var normal_arr5 = Float32Array.from([
    -0.2196,
    0,
    -0.9756,
    0.1047,
    -0.9945,
    -12e-4,
    0.2296,
    0,
    -0.9733,
    -0.2196,
    0,
    -0.9756,
    -0.1047,
    0.9945,
    12e-4,
    0.2296,
    0,
    -0.9733,
    0.1047,
    -0.9945,
    -12e-4,
    0.2241,
    0,
    0.9746,
    0.2296,
    0,
    -0.9733,
    -0.1047,
    0.9945,
    12e-4,
    0.2241,
    0,
    0.9746,
    0.2296,
    0,
    -0.9733,
    -0.2239,
    0,
    0.9746,
    -0.2196,
    0,
    -0.9756,
    0.1047,
    -0.9945,
    -12e-4,
    -0.2239,
    0,
    0.9746,
    -0.2196,
    0,
    -0.9756,
    -0.1047,
    0.9945,
    12e-4,
    -0.2239,
    0,
    0.9746,
    0.1047,
    -0.9945,
    -12e-4,
    0.2241,
    0,
    0.9746,
    -0.2239,
    0,
    0.9746,
    -0.1047,
    0.9945,
    12e-4,
    0.2241,
    0,
    0.9746,
    -0.9195,
    0.3907,
    0.0425,
    -0.8905,
    0.4424,
    -0.106,
    -0.8888,
    0.0869,
    -0.45,
    -0.7997,
    -0.4433,
    -0.4049,
    -0.7535,
    -0.4181,
    0.5074,
    -0.7106,
    -0.6094,
    0.3518,
    -0.7189,
    -0.3908,
    0.5748,
    -0.3113,
    0.4181,
    0.8534,
    -0.0752,
    -0.6034,
    0.7939,
    0.0151,
    0.2698,
    0.9628,
    -0.8905,
    0.4424,
    -0.106,
    -0.8888,
    0.0869,
    -0.45,
    -0.5716,
    0.805,
    -0.1591,
    -0.4433,
    0.2353,
    -0.8649,
    -0.16,
    0.8477,
    -0.5057,
    -0.1448,
    0.7307,
    -0.6672,
    -0.9195,
    0.3907,
    0.0425,
    -0.7535,
    -0.4181,
    0.5074,
    -0.7189,
    -0.3908,
    0.5748,
    -0.3681,
    0.6094,
    0.7023,
    -0.3113,
    0.4181,
    0.8534,
    -0.5716,
    0.805,
    -0.1591,
    -0.16,
    0.8477,
    -0.5057,
    -0.1503,
    0.9462,
    0.2867,
    0.1602,
    0.9734,
    0.1639,
    0.2299,
    0.9665,
    -0.1138,
    -0.3689,
    -0.7753,
    -0.5127,
    -0.2901,
    -0.9462,
    0.1436,
    -0.2243,
    -0.7561,
    -0.6148,
    0.1262,
    -0.961,
    0.2462,
    0.2859,
    -0.9462,
    -0.1517,
    -0.7997,
    -0.4433,
    -0.4049,
    -0.7106,
    -0.6094,
    0.3518,
    -0.3689,
    -0.7753,
    -0.5127,
    -0.2901,
    -0.9462,
    0.1436,
    -0.7535,
    -0.4181,
    0.5074,
    -0.7189,
    -0.3908,
    0.5748,
    -0.7106,
    -0.6094,
    0.3518,
    -0.2901,
    -0.9462,
    0.1436,
    -0.0752,
    -0.6034,
    0.7939,
    0.1262,
    -0.961,
    0.2462,
    0.2356,
    -0.8563,
    0.4595,
    -0.2243,
    -0.7561,
    -0.6148,
    -0.037,
    -0.4181,
    -0.9076,
    0.0378,
    -0.3907,
    -0.9197,
    0.2859,
    -0.9462,
    -0.1517,
    0.7004,
    -0.6094,
    -0.3717,
    0.1262,
    -0.961,
    0.2462,
    0.2356,
    -0.8563,
    0.4595,
    0.2859,
    -0.9462,
    -0.1517,
    0.5701,
    -0.6094,
    0.5511,
    0.7004,
    -0.6094,
    -0.3717,
    0.8518,
    -0.4181,
    -0.3157,
    0.8864,
    -0.3908,
    -0.2483,
    -0.8888,
    0.0869,
    -0.45,
    -0.7997,
    -0.4433,
    -0.4049,
    -0.4433,
    0.2353,
    -0.8649,
    -0.3689,
    -0.7753,
    -0.5127,
    -0.2243,
    -0.7561,
    -0.6148,
    -0.037,
    -0.4181,
    -0.9076,
    0.0378,
    -0.3907,
    -0.9197,
    0.463,
    0.3203,
    -0.8264,
    0.6106,
    0.342,
    -0.7142,
    0.7004,
    -0.6094,
    -0.3717,
    0.8518,
    -0.4181,
    -0.3157,
    -0.4433,
    0.2353,
    -0.8649,
    -0.1448,
    0.7307,
    -0.6672,
    -0.037,
    -0.4181,
    -0.9076,
    0.0378,
    -0.3907,
    -0.9197,
    0.463,
    0.3203,
    -0.8264,
    0.5701,
    -0.6094,
    0.5511,
    0.6695,
    -0.2831,
    0.6868,
    0.868,
    0.342,
    0.3601,
    0.8864,
    -0.3908,
    -0.2483,
    0.9291,
    0.3203,
    0.185,
    0.6106,
    0.342,
    -0.7142,
    0.6274,
    0.7141,
    -0.3106,
    0.8518,
    -0.4181,
    -0.3157,
    0.8864,
    -0.3908,
    -0.2483,
    0.9291,
    0.3203,
    0.185,
    -0.0752,
    -0.6034,
    0.7939,
    0.0151,
    0.2698,
    0.9628,
    0.0761,
    0.2791,
    0.9573,
    0.2356,
    -0.8563,
    0.4595,
    0.5701,
    -0.6094,
    0.5511,
    0.6695,
    -0.2831,
    0.6868,
    0.0761,
    0.2791,
    0.9573,
    0.4893,
    0.7141,
    0.5007,
    0.6695,
    -0.2831,
    0.6868,
    0.868,
    0.342,
    0.3601,
    -0.9195,
    0.3907,
    0.0425,
    -0.8905,
    0.4424,
    -0.106,
    -0.5716,
    0.805,
    -0.1591,
    -0.3681,
    0.6094,
    0.7023,
    -0.1503,
    0.9462,
    0.2867,
    -0.16,
    0.8477,
    -0.5057,
    -0.1448,
    0.7307,
    -0.6672,
    0.2299,
    0.9665,
    -0.1138,
    0.463,
    0.3203,
    -0.8264,
    0.6106,
    0.342,
    -0.7142,
    0.6274,
    0.7141,
    -0.3106,
    0.1602,
    0.9734,
    0.1639,
    0.2299,
    0.9665,
    -0.1138,
    0.4893,
    0.7141,
    0.5007,
    0.6274,
    0.7141,
    -0.3106,
    0.868,
    0.342,
    0.3601,
    0.9291,
    0.3203,
    0.185,
    -0.3681,
    0.6094,
    0.7023,
    -0.3113,
    0.4181,
    0.8534,
    -0.1503,
    0.9462,
    0.2867,
    0.0151,
    0.2698,
    0.9628,
    0.0761,
    0.2791,
    0.9573,
    0.1602,
    0.9734,
    0.1639,
    0.4893,
    0.7141,
    0.5007,
    -0.3471,
    0.0116,
    0.9378,
    0,
    1,
    0,
    0.9817,
    61e-4,
    0.1902,
    -0.9769,
    -0.0253,
    -0.2121,
    -0.3471,
    0.0116,
    0.9378,
    0,
    -1,
    0,
    -0.9769,
    -0.0253,
    -0.2121,
    -0.3103,
    0.0337,
    -0.95,
    0,
    -1,
    0,
    0.3642,
    -0.0123,
    -0.9312,
    -0.9769,
    -0.0253,
    -0.2121,
    -0.3471,
    0.0116,
    0.9378,
    -0.3103,
    0.0337,
    -0.95,
    0,
    1,
    0,
    -0.3103,
    0.0337,
    -0.95,
    0,
    1,
    0,
    0.3642,
    -0.0123,
    -0.9312,
    0.9817,
    61e-4,
    0.1902,
    0,
    -1,
    0,
    0.3642,
    -0.0123,
    -0.9312,
    0.9817,
    61e-4,
    0.1902,
    -0.3471,
    0.0116,
    0.9378,
    0,
    -1,
    0,
    0.9817,
    61e-4,
    0.1902,
    -0.6902,
    -0.2831,
    -0.666,
    -0.4665,
    -0.7321,
    -0.4964,
    -0.3645,
    0.342,
    -0.8661,
    -0.2011,
    -0.7753,
    -0.5988,
    -0.1897,
    0.3203,
    -0.9281,
    0.2142,
    -0.342,
    -0.9149,
    0.392,
    -0.3203,
    -0.8624,
    0.6184,
    -0.7141,
    -0.3281,
    0.7111,
    0.342,
    -0.6143,
    0.8241,
    0.3203,
    -0.4673,
    0.9364,
    -0.342,
    -0.079,
    0.1562,
    -0.718,
    0.6783,
    0.273,
    -0.9001,
    0.3396,
    0.4433,
    -0.2353,
    0.8649,
    0.8888,
    -0.0869,
    0.45,
    0.918,
    -0.2914,
    0.2691,
    -0.9623,
    0.2473,
    -0.1135,
    -0.6902,
    -0.2831,
    -0.666,
    -0.593,
    0.763,
    -0.2572,
    -0.5146,
    0.7753,
    -0.3663,
    -0.3645,
    0.342,
    -0.8661,
    -0.1897,
    0.3203,
    -0.9281,
    0.2142,
    -0.342,
    -0.9149,
    0.3074,
    0.7141,
    -0.6289,
    0.392,
    -0.3203,
    -0.8624,
    0.7111,
    0.342,
    -0.6143,
    0.6931,
    0.7141,
    0.098,
    0.7997,
    0.4433,
    0.4049,
    0.8241,
    0.3203,
    -0.4673,
    0.8888,
    -0.0869,
    0.45,
    0.918,
    -0.2914,
    0.2691,
    0.9364,
    -0.342,
    -0.079,
    -0.593,
    0.763,
    -0.2572,
    -0.5146,
    0.7753,
    -0.3663,
    -0.4645,
    0.8673,
    0.179,
    0.0443,
    0.9665,
    0.2527,
    0.1421,
    0.9462,
    -0.2908,
    0.227,
    0.9734,
    0.0321,
    -0.5284,
    -0.829,
    -0.183,
    -0.4665,
    -0.7321,
    -0.4964,
    -0.2011,
    -0.7753,
    -0.5988,
    -0.1987,
    -0.9677,
    0.155,
    0.176,
    -0.9754,
    0.1331,
    0.2859,
    -0.9462,
    -0.1517,
    -0.7935,
    -0.6034,
    0.0792,
    -0.5711,
    -0.3908,
    0.7219,
    -0.5284,
    -0.829,
    -0.183,
    -0.5035,
    -0.4181,
    0.7561,
    -0.3104,
    -0.6469,
    0.6965,
    -0.1987,
    -0.9677,
    0.155,
    -0.3104,
    -0.6469,
    0.6965,
    -0.1987,
    -0.9677,
    0.155,
    0.1562,
    -0.718,
    0.6783,
    0.176,
    -0.9754,
    0.1331,
    0.273,
    -0.9001,
    0.3396,
    -0.2011,
    -0.7753,
    -0.5988,
    0.2142,
    -0.342,
    -0.9149,
    0.2859,
    -0.9462,
    -0.1517,
    0.392,
    -0.3203,
    -0.8624,
    0.6184,
    -0.7141,
    -0.3281,
    0.176,
    -0.9754,
    0.1331,
    0.273,
    -0.9001,
    0.3396,
    0.2859,
    -0.9462,
    -0.1517,
    0.6184,
    -0.7141,
    -0.3281,
    0.918,
    -0.2914,
    0.2691,
    0.9364,
    -0.342,
    -0.079,
    -0.9826,
    0.1859,
    -9e-4,
    -0.8603,
    0.2921,
    0.4178,
    -0.7935,
    -0.6034,
    0.0792,
    -0.5711,
    -0.3908,
    0.7219,
    -0.8603,
    0.2921,
    0.4178,
    -0.6561,
    0.6094,
    0.4452,
    -0.5711,
    -0.3908,
    0.7219,
    -0.5035,
    -0.4181,
    0.7561,
    -0.0378,
    0.3907,
    0.9197,
    -0.9826,
    0.1859,
    -9e-4,
    -0.9623,
    0.2473,
    -0.1135,
    -0.7935,
    -0.6034,
    0.0792,
    -0.6902,
    -0.2831,
    -0.666,
    -0.5284,
    -0.829,
    -0.183,
    -0.4665,
    -0.7321,
    -0.4964,
    -0.5035,
    -0.4181,
    0.7561,
    -0.3104,
    -0.6469,
    0.6965,
    -0.0378,
    0.3907,
    0.9197,
    0.037,
    0.4181,
    0.9076,
    0.1562,
    -0.718,
    0.6783,
    0.4433,
    -0.2353,
    0.8649,
    0.037,
    0.4181,
    0.9076,
    0.137,
    0.6094,
    0.781,
    0.4433,
    -0.2353,
    0.8649,
    0.7997,
    0.4433,
    0.4049,
    0.8888,
    -0.0869,
    0.45,
    -0.9826,
    0.1859,
    -9e-4,
    -0.9623,
    0.2473,
    -0.1135,
    -0.8603,
    0.2921,
    0.4178,
    -0.6561,
    0.6094,
    0.4452,
    -0.593,
    0.763,
    -0.2572,
    -0.4645,
    0.8673,
    0.179,
    -0.6561,
    0.6094,
    0.4452,
    -0.4645,
    0.8673,
    0.179,
    -0.0378,
    0.3907,
    0.9197,
    0.037,
    0.4181,
    0.9076,
    0.0443,
    0.9665,
    0.2527,
    0.137,
    0.6094,
    0.781,
    -0.5146,
    0.7753,
    -0.3663,
    -0.3645,
    0.342,
    -0.8661,
    -0.1897,
    0.3203,
    -0.9281,
    0.1421,
    0.9462,
    -0.2908,
    0.3074,
    0.7141,
    -0.6289,
    0.1421,
    0.9462,
    -0.2908,
    0.227,
    0.9734,
    0.0321,
    0.3074,
    0.7141,
    -0.6289,
    0.6931,
    0.7141,
    0.098,
    0.7111,
    0.342,
    -0.6143,
    0.8241,
    0.3203,
    -0.4673,
    0.0443,
    0.9665,
    0.2527,
    0.137,
    0.6094,
    0.781,
    0.227,
    0.9734,
    0.0321,
    0.6931,
    0.7141,
    0.098,
    0.7997,
    0.4433,
    0.4049,
    0,
    1,
    0,
    0.3129,
    -0.0159,
    0.9496,
    0.9758,
    0.0253,
    -0.2171,
    -0.9985,
    -0.0134,
    -0.0526,
    -0.9762,
    45e-4,
    0.217,
    0,
    -1,
    0,
    0.3129,
    -0.0159,
    0.9496,
    -0.9762,
    45e-4,
    0.217,
    0,
    1,
    0,
    0.3129,
    -0.0159,
    0.9496,
    -0.9985,
    -0.0134,
    -0.0526,
    -0.9762,
    45e-4,
    0.217,
    -0.369,
    0.0141,
    -0.9293,
    0,
    1,
    0,
    -0.9985,
    -0.0134,
    -0.0526,
    -0.369,
    0.0141,
    -0.9293,
    0,
    -1,
    0,
    0.3841,
    -0.0295,
    -0.9228,
    -0.369,
    0.0141,
    -0.9293,
    0,
    1,
    0,
    0.3841,
    -0.0295,
    -0.9228,
    0.9758,
    0.0253,
    -0.2171,
    0,
    -1,
    0,
    0.3129,
    -0.0159,
    0.9496,
    0.3841,
    -0.0295,
    -0.9228,
    0.9758,
    0.0253,
    -0.2171
  ]);
  var texcoord_arr5 = Float32Array.from([
    0.375,
    0,
    0.125,
    0.25,
    0.375,
    1,
    0.625,
    0,
    0.875,
    0.25,
    0.625,
    1,
    0.125,
    0.5,
    0.375,
    0.75,
    0.375,
    0.75,
    0.875,
    0.5,
    0.625,
    0.75,
    0.625,
    0.75,
    0.375,
    0.25,
    0.375,
    0.25,
    0.375,
    0.25,
    0.625,
    0.25,
    0.625,
    0.25,
    0.625,
    0.25,
    0.375,
    0.5,
    0.375,
    0.5,
    0.375,
    0.5,
    0.625,
    0.5,
    0.625,
    0.5,
    0.625,
    0.5,
    0.2502,
    0.8036,
    0.2502,
    0.8036,
    0.2502,
    0.8036,
    0.2502,
    0.8036,
    0.2502,
    0.8036,
    0.2502,
    0.8036,
    0.432,
    0.8036,
    0.432,
    0.8036,
    0.432,
    0.8036,
    0.432,
    0.8036,
    0.1353,
    0.6851,
    0.1353,
    0.6851,
    0.1353,
    0.6851,
    0.1353,
    0.6851,
    0.1353,
    0.6851,
    0.1353,
    0.6851,
    0.3411,
    0.7241,
    0.3411,
    0.7241,
    0.3411,
    0.7241,
    0.3411,
    0.7241,
    0.3411,
    0.7241,
    0.2504,
    0.5662,
    0.1132,
    0.5662,
    0.4545,
    0.5276,
    0.6364,
    0.5276,
    0.8182,
    0.5276,
    0.1595,
    0.9614,
    0.3636,
    1,
    0.9314,
    0.9614,
    0.5455,
    1,
    0.7273,
    1,
    0.2055,
    0.8836,
    0.3182,
    0.9213,
    0.2055,
    0.8836,
    0.3182,
    0.9213,
    0.3874,
    0.8836,
    0.3874,
    0.8836,
    0.3874,
    0.8836,
    0.3874,
    0.8836,
    0.5,
    0.9213,
    0.5,
    0.9213,
    0.5,
    0.9213,
    0.8854,
    0.8836,
    0.8854,
    0.8836,
    0.8854,
    0.8836,
    0.7727,
    0.9213,
    0.7727,
    0.9213,
    0.5909,
    0.9213,
    0.5909,
    0.9213,
    0.7036,
    0.8836,
    0.5909,
    0.9213,
    0.7036,
    0.8836,
    0.7036,
    0.8836,
    0.7036,
    0.8836,
    0.1134,
    0.8036,
    0.1134,
    0.8036,
    0.1134,
    0.8036,
    0.1134,
    0.8036,
    1,
    0.8425,
    1,
    0.8425,
    0.8407,
    0.8036,
    0.8407,
    0.8036,
    0.8407,
    0.8036,
    0.8407,
    0.8036,
    0.8407,
    0.8036,
    0.0225,
    0.7241,
    0.0225,
    0.7241,
    0.9316,
    0.7241,
    0.9316,
    0.7241,
    0.9316,
    0.7241,
    0.6589,
    0.8036,
    0.6589,
    0.8036,
    0.6589,
    0.8036,
    0.6589,
    0.8036,
    0.6589,
    0.8036,
    0.7498,
    0.7241,
    0.7498,
    0.7241,
    0.7498,
    0.7241,
    0.7498,
    0.7241,
    0.7498,
    0.7241,
    0.5237,
    0.8048,
    0.5237,
    0.8048,
    0.5237,
    0.8048,
    0.5237,
    0.8048,
    0.5237,
    0.8048,
    0.5237,
    0.8048,
    0.568,
    0.7241,
    0.568,
    0.7241,
    0.568,
    0.7241,
    0.568,
    0.7241,
    0.2964,
    0.644,
    0.2964,
    0.644,
    0.2964,
    0.644,
    0.4091,
    0.6063,
    0.4091,
    0.6063,
    0.0455,
    0.6063,
    0.0455,
    0.6063,
    0.8419,
    0.644,
    0.8419,
    0.644,
    0.8419,
    0.644,
    0.8419,
    0.644,
    0.6601,
    0.644,
    0.7727,
    0.6063,
    0.6601,
    0.644,
    0.7727,
    0.6063,
    0.6601,
    0.644,
    0.6601,
    0.644,
    0.4783,
    0.644,
    0.4783,
    0.644,
    0.4783,
    0.644,
    0.4783,
    0.644,
    0.4783,
    0.644,
    0.5909,
    0.6063,
    0.5909,
    0.6063,
    0.9471,
    0,
    0.3059,
    0.5396,
    0.0253,
    0,
    0.7286,
    0.5,
    0.7286,
    0.5,
    0.9658,
    0.7788,
    0.4496,
    0.5,
    0.4496,
    0.5,
    0.6871,
    0.9453,
    0.4496,
    0.5,
    0.6172,
    0,
    0.6172,
    0,
    0.6172,
    0,
    0.3665,
    0.8789,
    0.2369,
    0,
    0.0469,
    0.7325,
    0.2369,
    0,
    0.2369,
    0,
    0.5345,
    0.6732,
    0.1953,
    0.5,
    0.1953,
    0.5,
    0.9588,
    0.5,
    0.7788,
    0.5342,
    0.0372,
    0.5,
    0.0684,
    0.8036,
    0.0684,
    0.8036,
    0.0684,
    0.8036,
    0.9775,
    0.8036,
    0.0684,
    0.8036,
    0.9775,
    0.8036,
    0.7957,
    0.8036,
    0.7957,
    0.8036,
    0.7957,
    0.8036,
    0.7957,
    0.8036,
    0.7957,
    0.8036,
    0.5899,
    0.8425,
    0.5899,
    0.8425,
    0.5899,
    0.8425,
    0.5899,
    0.8425,
    0.5899,
    0.8425,
    0.1593,
    0.7241,
    0.1593,
    0.7241,
    0.1593,
    0.7241,
    0.1593,
    0.7241,
    0.1593,
    0.7241,
    0,
    0.6851,
    0.8866,
    0.7241,
    0.8866,
    0.7241,
    0.8866,
    0.7241,
    0.8866,
    0.7241,
    0.7048,
    0.7241,
    0.7048,
    0.7241,
    0.7048,
    0.7241,
    0.7048,
    0.7241,
    0.7048,
    0.7241,
    0.7048,
    0.7241,
    0.2504,
    0.5662,
    0.1132,
    0.5662,
    0.2504,
    0.5662,
    0.4545,
    0.5276,
    0.8182,
    0.5276,
    0.6364,
    0.5276,
    0.1595,
    0.9614,
    0.1595,
    0.9614,
    0.9314,
    0.9614,
    0.3636,
    1,
    0.5455,
    1,
    0.7273,
    1,
    0.2273,
    0.9213,
    0.3399,
    0.8836,
    0.2273,
    0.9213,
    0.3399,
    0.8836,
    0.3399,
    0.8836,
    0.3399,
    0.8836,
    0.4091,
    0.9213,
    0.4091,
    0.9213,
    0.5,
    0.9213,
    0.5,
    0.9213,
    0.5,
    0.9213,
    0.8854,
    0.8836,
    0.8854,
    0.8836,
    0.7727,
    0.9213,
    0.8854,
    0.8836,
    0.7727,
    0.9213,
    0.5909,
    0.9213,
    0.5909,
    0.9213,
    0.7036,
    0.8836,
    0.7036,
    0.8836,
    0.7036,
    0.8836,
    0.7036,
    0.8836,
    0.2952,
    0.8036,
    0.2952,
    0.8036,
    0.2952,
    0.8036,
    0.2952,
    0.8036,
    0.3861,
    0.7241,
    0.3861,
    0.7241,
    0.3861,
    0.7241,
    0.3861,
    0.7241,
    0.3861,
    0.7241,
    0.2036,
    0.8048,
    0.2036,
    0.8048,
    0.2036,
    0.8048,
    0.2036,
    0.8048,
    0.2036,
    0.8048,
    0.2036,
    0.8048,
    0.4771,
    0.8036,
    0.4771,
    0.8036,
    0.4771,
    0.8036,
    0.4771,
    0.8036,
    0.4771,
    0.8036,
    0.4771,
    0.8036,
    0.568,
    0.7241,
    0.568,
    0.7241,
    0.568,
    0.7241,
    0.568,
    0.7241,
    0.568,
    0.7241,
    0.2727,
    0.6851,
    0.2727,
    0.6851,
    0.2727,
    0.6851,
    0.2727,
    0.6851,
    0.2727,
    0.6851,
    0.2727,
    0.6851,
    0.3182,
    0.6063,
    0.3182,
    0.6063,
    0.4308,
    0.644,
    0.4308,
    0.644,
    0.4308,
    0.644,
    0.4308,
    0.644,
    0.0672,
    0.644,
    0.0672,
    0.644,
    0.0672,
    0.644,
    0.8636,
    0.6063,
    0.8636,
    0.6063,
    0.7945,
    0.644,
    0.6818,
    0.6063,
    0.7945,
    0.644,
    0.6818,
    0.6063,
    0.7945,
    0.644,
    0.7945,
    0.644,
    0.5,
    0.6063,
    0.5,
    0.6063,
    0.6126,
    0.644,
    0.6126,
    0.644,
    0.6126,
    0.644,
    0.2212,
    0.5342,
    0.9628,
    0,
    0.0412,
    0,
    0.759,
    0.5,
    0.759,
    0.5,
    0.9552,
    0.7379,
    0.759,
    0.5,
    0.7714,
    0,
    0.4658,
    0.7212,
    0.7714,
    0,
    0.5532,
    0,
    0.5532,
    0,
    0.5532,
    0,
    0.3243,
    0.965,
    0.4786,
    0.5,
    0.4786,
    0.5,
    0.7212,
    0.9658,
    0.4786,
    0.5,
    0.3004,
    0,
    0.0547,
    0.8129,
    0.3004,
    0,
    0.3004,
    0,
    0.6211,
    0.6335,
    0.9747,
    0.5,
    0.1396,
    0.5,
    0.1396,
    0.5
  ]);
  var weights_arr5 = Float32Array.from([]);
  var index_arr5 = Uint16Array.from([
    298,
    287,
    304,
    307,
    284,
    303,
    297,
    300,
    294,
    286,
    293,
    289,
    290,
    295,
    282,
    295,
    301,
    282,
    143,
    160,
    146,
    160,
    156,
    146,
    145,
    152,
    150,
    140,
    155,
    161,
    155,
    158,
    161,
    149,
    138,
    142,
    138,
    159,
    142,
    9,
    22,
    4,
    22,
    17,
    4,
    14,
    19,
    1,
    19,
    6,
    1,
    3,
    16,
    0,
    16,
    13,
    0,
    21,
    18,
    15,
    18,
    12,
    15,
    10,
    7,
    23,
    7,
    20,
    23,
    11,
    5,
    8,
    5,
    2,
    8,
    299,
    306,
    302,
    285,
    296,
    292,
    239,
    230,
    206,
    241,
    208,
    200,
    163,
    242,
    201,
    213,
    203,
    211,
    244,
    212,
    210,
    217,
    165,
    202,
    225,
    169,
    221,
    174,
    223,
    216,
    247,
    173,
    214,
    235,
    243,
    209,
    234,
    207,
    231,
    167,
    218,
    184,
    172,
    227,
    193,
    251,
    175,
    248,
    256,
    232,
    229,
    254,
    228,
    237,
    178,
    255,
    238,
    267,
    182,
    164,
    183,
    268,
    166,
    275,
    187,
    170,
    190,
    276,
    171,
    281,
    189,
    252,
    263,
    249,
    246,
    262,
    245,
    236,
    260,
    233,
    257,
    261,
    259,
    196,
    195,
    181,
    266,
    270,
    185,
    273,
    198,
    269,
    271,
    274,
    188,
    280,
    199,
    272,
    279,
    278,
    250,
    265,
    197,
    277,
    264,
    194,
    258,
    180,
    253,
    191,
    176,
    192,
    226,
    177,
    186,
    220,
    168,
    179,
    240,
    162,
    215,
    222,
    204,
    224,
    219,
    205,
    291,
    283,
    288,
    283,
    305,
    288,
    139,
    151,
    153,
    147,
    157,
    154,
    141,
    144,
    148,
    81,
    57,
    50,
    62,
    51,
    58,
    66,
    82,
    52,
    75,
    87,
    70,
    108,
    94,
    74,
    107,
    72,
    65,
    32,
    104,
    63,
    30,
    60,
    42,
    27,
    55,
    79,
    35,
    26,
    78,
    91,
    83,
    67,
    92,
    68,
    84,
    101,
    88,
    76,
    102,
    77,
    97,
    112,
    95,
    109,
    114,
    40,
    24,
    34,
    115,
    25,
    37,
    80,
    89,
    122,
    93,
    85,
    123,
    86,
    99,
    130,
    103,
    98,
    129,
    96,
    113,
    135,
    110,
    106,
    134,
    105,
    33,
    44,
    132,
    31,
    46,
    38,
    119,
    49,
    121,
    126,
    48,
    125,
    136,
    47,
    133,
    118,
    117,
    131,
    43,
    137,
    127,
    111,
    128,
    124,
    100,
    120,
    39,
    90,
    45,
    116,
    36,
    41,
    59,
    28,
    64,
    71,
    53,
    73,
    69,
    54,
    61,
    56,
    29
  ]);

  // ../meshes/wheel.ts
  function mesh_wheel(gl) {
    let vao = gl.createVertexArray();
    gl.bindVertexArray(vao);
    let vertex_buf = gl.createBuffer();
    gl.bindBuffer(GL_ARRAY_BUFFER, vertex_buf);
    gl.bufferData(GL_ARRAY_BUFFER, vertex_arr6, GL_STATIC_DRAW);
    gl.enableVertexAttribArray(0 /* Position */);
    gl.vertexAttribPointer(0 /* Position */, 3, GL_FLOAT, false, 0, 0);
    let normal_buf = gl.createBuffer();
    gl.bindBuffer(GL_ARRAY_BUFFER, normal_buf);
    gl.bufferData(GL_ARRAY_BUFFER, normal_arr6, GL_STATIC_DRAW);
    gl.enableVertexAttribArray(1 /* Normal */);
    gl.vertexAttribPointer(1 /* Normal */, 3, GL_FLOAT, false, 0, 0);
    let texcoord_buf = gl.createBuffer();
    gl.bindBuffer(GL_ARRAY_BUFFER, texcoord_buf);
    gl.bufferData(GL_ARRAY_BUFFER, texcoord_arr6, GL_STATIC_DRAW);
    gl.enableVertexAttribArray(2 /* TexCoord */);
    gl.vertexAttribPointer(2 /* TexCoord */, 2, GL_FLOAT, false, 0, 0);
    let weights_buf = gl.createBuffer();
    gl.bindBuffer(GL_ARRAY_BUFFER, weights_buf);
    gl.bufferData(GL_ARRAY_BUFFER, weights_arr6, GL_STATIC_DRAW);
    gl.enableVertexAttribArray(5 /* Weights */);
    gl.vertexAttribPointer(5 /* Weights */, 4, GL_FLOAT, false, 0, 0);
    let index_buf = gl.createBuffer();
    gl.bindBuffer(GL_ELEMENT_ARRAY_BUFFER, index_buf);
    gl.bufferData(GL_ELEMENT_ARRAY_BUFFER, index_arr6, GL_STATIC_DRAW);
    gl.bindVertexArray(null);
    return {
      Vao: vao,
      VertexBuffer: vertex_buf,
      VertexArray: vertex_arr6,
      NormalBuffer: normal_buf,
      NormalArray: normal_arr6,
      TexCoordBuffer: texcoord_buf,
      TexCoordArray: texcoord_arr6,
      WeightsBuffer: weights_buf,
      WeightsArray: weights_arr6,
      IndexBuffer: index_buf,
      IndexArray: index_arr6,
      IndexCount: index_arr6.length
    };
  }
  var vertex_arr6 = Float32Array.from([
    -0.3,
    0,
    -1.0454,
    -0.3,
    0,
    -1.0454,
    -0.3,
    0,
    -1.0454,
    -0.3,
    0,
    -1.0454,
    -0.132,
    0.388,
    -1.3393,
    -0.132,
    0.388,
    -1.3393,
    -0.132,
    0.388,
    -1.3393,
    -0.132,
    0.388,
    -1.3393,
    -0.132,
    -0.388,
    -1.3393,
    -0.132,
    -0.388,
    -1.3393,
    -0.132,
    -0.388,
    -1.3393,
    -0.132,
    -0.388,
    -1.3393,
    -0.2508,
    0.2744,
    -1.2256,
    -0.2508,
    0.2744,
    -1.2256,
    -0.2508,
    0.2744,
    -1.2256,
    -0.2508,
    0.2744,
    -1.2256,
    -0.229,
    -0,
    -1.336,
    -0.229,
    -0,
    -1.336,
    -0.229,
    -0,
    -1.336,
    -0.132,
    -0,
    -1.4334,
    -0.132,
    -0,
    -1.4334,
    -0.132,
    -0,
    -1.4334,
    -0.132,
    -0,
    -1.4334,
    -0.2508,
    -0.2744,
    -1.2256,
    -0.2508,
    -0.2744,
    -1.2256,
    -0.2508,
    -0.2744,
    -1.2256,
    -0.2508,
    -0.2744,
    -1.2256,
    0.3,
    0,
    -1.0454,
    0.3,
    0,
    -1.0454,
    0.3,
    0,
    -1.0454,
    0.3,
    0,
    -1.0454,
    0.132,
    -0.388,
    -1.3393,
    0.132,
    -0.388,
    -1.3393,
    0.132,
    -0.388,
    -1.3393,
    0.132,
    -0.388,
    -1.3393,
    0.132,
    0.388,
    -1.3393,
    0.132,
    0.388,
    -1.3393,
    0.132,
    0.388,
    -1.3393,
    0.132,
    0.388,
    -1.3393,
    0.2508,
    -0.2744,
    -1.2256,
    0.2508,
    -0.2744,
    -1.2256,
    0.2508,
    -0.2744,
    -1.2256,
    0.2508,
    -0.2744,
    -1.2256,
    0.229,
    -0,
    -1.336,
    0.229,
    -0,
    -1.336,
    0.229,
    -0,
    -1.336,
    0.132,
    -0,
    -1.4334,
    0.132,
    -0,
    -1.4334,
    0.132,
    -0,
    -1.4334,
    0.132,
    -0,
    -1.4334,
    0.2508,
    0.2744,
    -1.2256,
    0.2508,
    0.2744,
    -1.2256,
    0.2508,
    0.2744,
    -1.2256,
    0.2508,
    0.2744,
    -1.2256,
    -0.3,
    -0.7392,
    -0.7392,
    -0.3,
    -0.7392,
    -0.7392,
    -0.3,
    -0.7392,
    -0.7392,
    -0.3,
    -0.7392,
    -0.7392,
    -0.132,
    -0.6726,
    -1.2214,
    -0.132,
    -0.6726,
    -1.2214,
    -0.132,
    -0.6726,
    -1.2214,
    -0.132,
    -0.6726,
    -1.2214,
    -0.132,
    -1.2214,
    -0.6726,
    -0.132,
    -1.2214,
    -0.6726,
    -0.132,
    -1.2214,
    -0.6726,
    -0.132,
    -1.2214,
    -0.6726,
    -0.2508,
    -0.7392,
    -1.0607,
    -0.2508,
    -0.7392,
    -1.0607,
    -0.2508,
    -0.7392,
    -1.0607,
    -0.2508,
    -0.7392,
    -1.0607,
    -0.229,
    -0.9545,
    -0.9545,
    -0.229,
    -0.9545,
    -0.9545,
    -0.229,
    -0.9545,
    -0.9545,
    -0.132,
    -0.9941,
    -0.9941,
    -0.132,
    -0.9941,
    -0.9941,
    -0.132,
    -0.9941,
    -0.9941,
    -0.132,
    -0.9941,
    -0.9941,
    -0.2508,
    -1.0607,
    -0.7392,
    -0.2508,
    -1.0607,
    -0.7392,
    -0.2508,
    -1.0607,
    -0.7392,
    -0.2508,
    -1.0607,
    -0.7392,
    0.3,
    -0.7392,
    -0.7392,
    0.3,
    -0.7392,
    -0.7392,
    0.3,
    -0.7392,
    -0.7392,
    0.3,
    -0.7392,
    -0.7392,
    0.132,
    -1.2214,
    -0.6726,
    0.132,
    -1.2214,
    -0.6726,
    0.132,
    -1.2214,
    -0.6726,
    0.132,
    -1.2214,
    -0.6726,
    0.132,
    -0.6726,
    -1.2214,
    0.132,
    -0.6726,
    -1.2214,
    0.132,
    -0.6726,
    -1.2214,
    0.132,
    -0.6726,
    -1.2214,
    0.2508,
    -1.0607,
    -0.7392,
    0.2508,
    -1.0607,
    -0.7392,
    0.2508,
    -1.0607,
    -0.7392,
    0.2508,
    -1.0607,
    -0.7392,
    0.229,
    -0.9545,
    -0.9545,
    0.229,
    -0.9545,
    -0.9545,
    0.229,
    -0.9545,
    -0.9545,
    0.132,
    -0.9941,
    -0.9941,
    0.132,
    -0.9941,
    -0.9941,
    0.132,
    -0.9941,
    -0.9941,
    0.132,
    -0.9941,
    -0.9941,
    0.2508,
    -0.7392,
    -1.0607,
    0.2508,
    -0.7392,
    -1.0607,
    0.2508,
    -0.7392,
    -1.0607,
    0.2508,
    -0.7392,
    -1.0607,
    -0.3,
    -1.0454,
    0,
    -0.3,
    -1.0454,
    0,
    -0.3,
    -1.0454,
    0,
    -0.3,
    -1.0454,
    0,
    -0.132,
    -1.3393,
    -0.388,
    -0.132,
    -1.3393,
    -0.388,
    -0.132,
    -1.3393,
    -0.388,
    -0.132,
    -1.3393,
    -0.388,
    -0.132,
    -1.3393,
    0.388,
    -0.132,
    -1.3393,
    0.388,
    -0.132,
    -1.3393,
    0.388,
    -0.132,
    -1.3393,
    0.388,
    -0.2508,
    -1.2727,
    -0.2273,
    -0.2508,
    -1.2727,
    -0.2273,
    -0.2508,
    -1.2727,
    -0.2273,
    -0.2508,
    -1.2727,
    -0.2273,
    -0.229,
    -1.3498,
    0,
    -0.229,
    -1.3498,
    0,
    -0.229,
    -1.3498,
    0,
    -0.132,
    -1.4058,
    -0,
    -0.132,
    -1.4058,
    -0,
    -0.132,
    -1.4058,
    -0,
    -0.132,
    -1.4058,
    -0,
    -0.2508,
    -1.2727,
    0.2273,
    -0.2508,
    -1.2727,
    0.2273,
    -0.2508,
    -1.2727,
    0.2273,
    -0.2508,
    -1.2727,
    0.2273,
    0.3,
    -1.0454,
    0,
    0.3,
    -1.0454,
    0,
    0.3,
    -1.0454,
    0,
    0.3,
    -1.0454,
    0,
    0.132,
    -1.3393,
    0.388,
    0.132,
    -1.3393,
    0.388,
    0.132,
    -1.3393,
    0.388,
    0.132,
    -1.3393,
    0.388,
    0.132,
    -1.3393,
    -0.388,
    0.132,
    -1.3393,
    -0.388,
    0.132,
    -1.3393,
    -0.388,
    0.132,
    -1.3393,
    -0.388,
    0.2508,
    -1.2727,
    0.2273,
    0.2508,
    -1.2727,
    0.2273,
    0.2508,
    -1.2727,
    0.2273,
    0.2508,
    -1.2727,
    0.2273,
    0.229,
    -1.3498,
    0,
    0.229,
    -1.3498,
    0,
    0.229,
    -1.3498,
    0,
    0.132,
    -1.4058,
    0,
    0.132,
    -1.4058,
    0,
    0.132,
    -1.4058,
    0,
    0.132,
    -1.4058,
    0,
    0.2508,
    -1.2727,
    -0.2273,
    0.2508,
    -1.2727,
    -0.2273,
    0.2508,
    -1.2727,
    -0.2273,
    0.2508,
    -1.2727,
    -0.2273,
    -0.3,
    -0.7392,
    0.7392,
    -0.3,
    -0.7392,
    0.7392,
    -0.3,
    -0.7392,
    0.7392,
    -0.3,
    -0.7392,
    0.7392,
    -0.132,
    -1.2214,
    0.6726,
    -0.132,
    -1.2214,
    0.6726,
    -0.132,
    -1.2214,
    0.6726,
    -0.132,
    -1.2214,
    0.6726,
    -0.132,
    -0.6726,
    1.2214,
    -0.132,
    -0.6726,
    1.2214,
    -0.132,
    -0.6726,
    1.2214,
    -0.132,
    -0.6726,
    1.2214,
    -0.2508,
    -1.0607,
    0.7392,
    -0.2508,
    -1.0607,
    0.7392,
    -0.2508,
    -1.0607,
    0.7392,
    -0.2508,
    -1.0607,
    0.7392,
    -0.229,
    -0.9545,
    0.9545,
    -0.229,
    -0.9545,
    0.9545,
    -0.229,
    -0.9545,
    0.9545,
    -0.132,
    -0.9941,
    0.9941,
    -0.132,
    -0.9941,
    0.9941,
    -0.132,
    -0.9941,
    0.9941,
    -0.132,
    -0.9941,
    0.9941,
    -0.2508,
    -0.7392,
    1.0607,
    -0.2508,
    -0.7392,
    1.0607,
    -0.2508,
    -0.7392,
    1.0607,
    -0.2508,
    -0.7392,
    1.0607,
    0.3,
    -0.7392,
    0.7392,
    0.3,
    -0.7392,
    0.7392,
    0.3,
    -0.7392,
    0.7392,
    0.3,
    -0.7392,
    0.7392,
    0.132,
    -0.6726,
    1.2214,
    0.132,
    -0.6726,
    1.2214,
    0.132,
    -0.6726,
    1.2214,
    0.132,
    -0.6726,
    1.2214,
    0.132,
    -1.2214,
    0.6726,
    0.132,
    -1.2214,
    0.6726,
    0.132,
    -1.2214,
    0.6726,
    0.132,
    -1.2214,
    0.6726,
    0.2508,
    -0.7392,
    1.0607,
    0.2508,
    -0.7392,
    1.0607,
    0.2508,
    -0.7392,
    1.0607,
    0.2508,
    -0.7392,
    1.0607,
    0.229,
    -0.9545,
    0.9545,
    0.229,
    -0.9545,
    0.9545,
    0.229,
    -0.9545,
    0.9545,
    0.132,
    -0.9941,
    0.9941,
    0.132,
    -0.9941,
    0.9941,
    0.132,
    -0.9941,
    0.9941,
    0.132,
    -0.9941,
    0.9941,
    0.2508,
    -1.0607,
    0.7392,
    0.2508,
    -1.0607,
    0.7392,
    0.2508,
    -1.0607,
    0.7392,
    0.2508,
    -1.0607,
    0.7392,
    -0.3,
    0,
    1.0454,
    -0.3,
    0,
    1.0454,
    -0.3,
    0,
    1.0454,
    -0.3,
    0,
    1.0454,
    -0.132,
    -0.388,
    1.3393,
    -0.132,
    -0.388,
    1.3393,
    -0.132,
    -0.388,
    1.3393,
    -0.132,
    -0.388,
    1.3393,
    -0.132,
    0.388,
    1.3393,
    -0.132,
    0.388,
    1.3393,
    -0.132,
    0.388,
    1.3393,
    -0.132,
    0.388,
    1.3393,
    -0.2508,
    -0.2273,
    1.2727,
    -0.2508,
    -0.2273,
    1.2727,
    -0.2508,
    -0.2273,
    1.2727,
    -0.2508,
    -0.2273,
    1.2727,
    -0.229,
    0,
    1.3498,
    -0.229,
    0,
    1.3498,
    -0.229,
    0,
    1.3498,
    -0.132,
    0,
    1.4058,
    -0.132,
    0,
    1.4058,
    -0.132,
    0,
    1.4058,
    -0.132,
    0,
    1.4058,
    -0.2508,
    0.2273,
    1.2727,
    -0.2508,
    0.2273,
    1.2727,
    -0.2508,
    0.2273,
    1.2727,
    -0.2508,
    0.2273,
    1.2727,
    0.3,
    0,
    1.0454,
    0.3,
    0,
    1.0454,
    0.3,
    0,
    1.0454,
    0.3,
    0,
    1.0454,
    0.132,
    0.388,
    1.3393,
    0.132,
    0.388,
    1.3393,
    0.132,
    0.388,
    1.3393,
    0.132,
    0.388,
    1.3393,
    0.132,
    -0.388,
    1.3393,
    0.132,
    -0.388,
    1.3393,
    0.132,
    -0.388,
    1.3393,
    0.132,
    -0.388,
    1.3393,
    0.2508,
    0.2273,
    1.2727,
    0.2508,
    0.2273,
    1.2727,
    0.2508,
    0.2273,
    1.2727,
    0.2508,
    0.2273,
    1.2727,
    0.229,
    0,
    1.3498,
    0.229,
    0,
    1.3498,
    0.229,
    0,
    1.3498,
    0.132,
    0,
    1.4058,
    0.132,
    0,
    1.4058,
    0.132,
    0,
    1.4058,
    0.132,
    0,
    1.4058,
    0.2508,
    -0.2273,
    1.2727,
    0.2508,
    -0.2273,
    1.2727,
    0.2508,
    -0.2273,
    1.2727,
    0.2508,
    -0.2273,
    1.2727,
    -0.3,
    0.7392,
    0.7392,
    -0.3,
    0.7392,
    0.7392,
    -0.3,
    0.7392,
    0.7392,
    -0.3,
    0.7392,
    0.7392,
    -0.132,
    0.6726,
    1.2214,
    -0.132,
    0.6726,
    1.2214,
    -0.132,
    0.6726,
    1.2214,
    -0.132,
    0.6726,
    1.2214,
    -0.132,
    1.2214,
    0.6726,
    -0.132,
    1.2214,
    0.6726,
    -0.132,
    1.2214,
    0.6726,
    -0.132,
    1.2214,
    0.6726,
    -0.2508,
    0.7392,
    1.0607,
    -0.2508,
    0.7392,
    1.0607,
    -0.2508,
    0.7392,
    1.0607,
    -0.2508,
    0.7392,
    1.0607,
    -0.229,
    0.9545,
    0.9545,
    -0.229,
    0.9545,
    0.9545,
    -0.229,
    0.9545,
    0.9545,
    -0.132,
    0.9941,
    0.9941,
    -0.132,
    0.9941,
    0.9941,
    -0.132,
    0.9941,
    0.9941,
    -0.132,
    0.9941,
    0.9941,
    -0.2508,
    1.0607,
    0.7392,
    -0.2508,
    1.0607,
    0.7392,
    -0.2508,
    1.0607,
    0.7392,
    -0.2508,
    1.0607,
    0.7392,
    0.3,
    0.7392,
    0.7392,
    0.3,
    0.7392,
    0.7392,
    0.3,
    0.7392,
    0.7392,
    0.3,
    0.7392,
    0.7392,
    0.132,
    1.2214,
    0.6726,
    0.132,
    1.2214,
    0.6726,
    0.132,
    1.2214,
    0.6726,
    0.132,
    1.2214,
    0.6726,
    0.132,
    0.6726,
    1.2214,
    0.132,
    0.6726,
    1.2214,
    0.132,
    0.6726,
    1.2214,
    0.132,
    0.6726,
    1.2214,
    0.2508,
    1.0607,
    0.7392,
    0.2508,
    1.0607,
    0.7392,
    0.2508,
    1.0607,
    0.7392,
    0.2508,
    1.0607,
    0.7392,
    0.229,
    0.9545,
    0.9545,
    0.229,
    0.9545,
    0.9545,
    0.229,
    0.9545,
    0.9545,
    0.132,
    0.9941,
    0.9941,
    0.132,
    0.9941,
    0.9941,
    0.132,
    0.9941,
    0.9941,
    0.132,
    0.9941,
    0.9941,
    0.2508,
    0.7392,
    1.0607,
    0.2508,
    0.7392,
    1.0607,
    0.2508,
    0.7392,
    1.0607,
    0.2508,
    0.7392,
    1.0607,
    -0.3,
    1.0454,
    -0,
    -0.3,
    1.0454,
    -0,
    -0.3,
    1.0454,
    -0,
    -0.3,
    1.0454,
    -0,
    -0.132,
    1.3393,
    0.388,
    -0.132,
    1.3393,
    0.388,
    -0.132,
    1.3393,
    0.388,
    -0.132,
    1.3393,
    0.388,
    -0.132,
    1.3393,
    -0.388,
    -0.132,
    1.3393,
    -0.388,
    -0.132,
    1.3393,
    -0.388,
    -0.132,
    1.3393,
    -0.388,
    -0.2508,
    1.2727,
    0.2273,
    -0.2508,
    1.2727,
    0.2273,
    -0.2508,
    1.2727,
    0.2273,
    -0.2508,
    1.2727,
    0.2273,
    -0.229,
    1.3498,
    -0,
    -0.229,
    1.3498,
    -0,
    -0.229,
    1.3498,
    -0,
    -0.132,
    1.4058,
    -0,
    -0.132,
    1.4058,
    -0,
    -0.132,
    1.4058,
    -0,
    -0.132,
    1.4058,
    -0,
    -0.2508,
    1.2727,
    -0.2273,
    -0.2508,
    1.2727,
    -0.2273,
    -0.2508,
    1.2727,
    -0.2273,
    -0.2508,
    1.2727,
    -0.2273,
    0.3,
    1.0454,
    -0,
    0.3,
    1.0454,
    -0,
    0.3,
    1.0454,
    -0,
    0.3,
    1.0454,
    -0,
    0.132,
    1.3393,
    -0.388,
    0.132,
    1.3393,
    -0.388,
    0.132,
    1.3393,
    -0.388,
    0.132,
    1.3393,
    -0.388,
    0.132,
    1.3393,
    0.388,
    0.132,
    1.3393,
    0.388,
    0.132,
    1.3393,
    0.388,
    0.132,
    1.3393,
    0.388,
    0.2508,
    1.2727,
    -0.2273,
    0.2508,
    1.2727,
    -0.2273,
    0.2508,
    1.2727,
    -0.2273,
    0.2508,
    1.2727,
    -0.2273,
    0.229,
    1.3498,
    -0,
    0.229,
    1.3498,
    -0,
    0.229,
    1.3498,
    -0,
    0.132,
    1.4058,
    0,
    0.132,
    1.4058,
    0,
    0.132,
    1.4058,
    0,
    0.132,
    1.4058,
    0,
    0.2508,
    1.2727,
    0.2273,
    0.2508,
    1.2727,
    0.2273,
    0.2508,
    1.2727,
    0.2273,
    0.2508,
    1.2727,
    0.2273,
    -0.3,
    0.7392,
    -0.7392,
    -0.3,
    0.7392,
    -0.7392,
    -0.3,
    0.7392,
    -0.7392,
    -0.3,
    0.7392,
    -0.7392,
    -0.132,
    1.2214,
    -0.6726,
    -0.132,
    1.2214,
    -0.6726,
    -0.132,
    1.2214,
    -0.6726,
    -0.132,
    1.2214,
    -0.6726,
    -0.132,
    0.6726,
    -1.2214,
    -0.132,
    0.6726,
    -1.2214,
    -0.132,
    0.6726,
    -1.2214,
    -0.132,
    0.6726,
    -1.2214,
    -0.2508,
    1.0607,
    -0.7392,
    -0.2508,
    1.0607,
    -0.7392,
    -0.2508,
    1.0607,
    -0.7392,
    -0.2508,
    1.0607,
    -0.7392,
    -0.229,
    0.9545,
    -0.9545,
    -0.229,
    0.9545,
    -0.9545,
    -0.229,
    0.9545,
    -0.9545,
    -0.132,
    0.9941,
    -0.9941,
    -0.132,
    0.9941,
    -0.9941,
    -0.132,
    0.9941,
    -0.9941,
    -0.132,
    0.9941,
    -0.9941,
    -0.2508,
    0.7392,
    -1.0607,
    -0.2508,
    0.7392,
    -1.0607,
    -0.2508,
    0.7392,
    -1.0607,
    -0.2508,
    0.7392,
    -1.0607,
    0.3,
    0.7392,
    -0.7392,
    0.3,
    0.7392,
    -0.7392,
    0.3,
    0.7392,
    -0.7392,
    0.3,
    0.7392,
    -0.7392,
    0.132,
    0.6726,
    -1.2214,
    0.132,
    0.6726,
    -1.2214,
    0.132,
    0.6726,
    -1.2214,
    0.132,
    0.6726,
    -1.2214,
    0.132,
    1.2214,
    -0.6726,
    0.132,
    1.2214,
    -0.6726,
    0.132,
    1.2214,
    -0.6726,
    0.132,
    1.2214,
    -0.6726,
    0.2508,
    0.7392,
    -1.0607,
    0.2508,
    0.7392,
    -1.0607,
    0.2508,
    0.7392,
    -1.0607,
    0.2508,
    0.7392,
    -1.0607,
    0.229,
    0.9545,
    -0.9545,
    0.229,
    0.9545,
    -0.9545,
    0.229,
    0.9545,
    -0.9545,
    0.132,
    0.9941,
    -0.9941,
    0.132,
    0.9941,
    -0.9941,
    0.132,
    0.9941,
    -0.9941,
    0.132,
    0.9941,
    -0.9941,
    0.2508,
    1.0607,
    -0.7392,
    0.2508,
    1.0607,
    -0.7392,
    0.2508,
    1.0607,
    -0.7392,
    0.2508,
    1.0607,
    -0.7392
  ]);
  var normal_arr6 = Float32Array.from([
    -1,
    0,
    0,
    -0.9853,
    -0.0623,
    -0.1592,
    -0.9853,
    0.0623,
    -0.1592,
    -0.9714,
    -0,
    -0.2374,
    -0.7547,
    0.2317,
    -0.6138,
    -0.7344,
    0.1781,
    -0.6549,
    -0,
    0.2358,
    -0.9718,
    0,
    0.3827,
    -0.9239,
    -0.7547,
    -0.2317,
    -0.6138,
    -0.7344,
    -0.1781,
    -0.6549,
    0,
    -0.3827,
    -0.9239,
    0,
    -0.2358,
    -0.9718,
    -0.9853,
    0.0623,
    -0.1592,
    -0.9714,
    -0,
    -0.2374,
    -0.7547,
    0.2317,
    -0.6138,
    -0.7344,
    0.1781,
    -0.6549,
    -0.9714,
    -0,
    -0.2374,
    -0.7344,
    -0.1781,
    -0.6549,
    -0.7344,
    0.1781,
    -0.6549,
    -0.7344,
    -0.1781,
    -0.6549,
    -0.7344,
    0.1781,
    -0.6549,
    -0,
    0.2358,
    -0.9718,
    0,
    -0.2358,
    -0.9718,
    -0.9853,
    -0.0623,
    -0.1592,
    -0.9714,
    -0,
    -0.2374,
    -0.7547,
    -0.2317,
    -0.6138,
    -0.7344,
    -0.1781,
    -0.6549,
    0.9714,
    0,
    -0.2374,
    0.9853,
    -0.0623,
    -0.1592,
    0.9853,
    0.0623,
    -0.1592,
    1,
    -0,
    -0,
    0,
    -0.3827,
    -0.9239,
    0,
    -0.2358,
    -0.9718,
    0.7344,
    -0.1781,
    -0.6549,
    0.7547,
    -0.2317,
    -0.6138,
    -0,
    0.2358,
    -0.9718,
    0,
    0.3827,
    -0.9239,
    0.7344,
    0.1781,
    -0.6549,
    0.7547,
    0.2317,
    -0.6138,
    0.7344,
    -0.1781,
    -0.6549,
    0.7547,
    -0.2317,
    -0.6138,
    0.9714,
    0,
    -0.2374,
    0.9853,
    -0.0623,
    -0.1592,
    0.7344,
    -0.1781,
    -0.6549,
    0.7344,
    0.1781,
    -0.6549,
    0.9714,
    0,
    -0.2374,
    -0,
    0.2358,
    -0.9718,
    0,
    -0.2358,
    -0.9718,
    0.7344,
    -0.1781,
    -0.6549,
    0.7344,
    0.1781,
    -0.6549,
    0.7344,
    0.1781,
    -0.6549,
    0.7547,
    0.2317,
    -0.6138,
    0.9714,
    0,
    -0.2374,
    0.9853,
    0.0623,
    -0.1592,
    -1,
    0,
    0,
    -0.9866,
    -0.151,
    -0.0626,
    -0.9853,
    -0.0623,
    -0.1592,
    -0.9739,
    -0.1606,
    -0.1606,
    -0.7547,
    -0.2317,
    -0.6138,
    -0.5777,
    -0.4476,
    -0.6826,
    0,
    -0.5774,
    -0.8165,
    0,
    -0.3827,
    -0.9239,
    -0.7193,
    -0.6418,
    -0.2658,
    -0.5777,
    -0.6826,
    -0.4476,
    -0,
    -0.9239,
    -0.3827,
    0,
    -0.8165,
    -0.5774,
    -0.9853,
    -0.0623,
    -0.1592,
    -0.9739,
    -0.1606,
    -0.1606,
    -0.7547,
    -0.2317,
    -0.6138,
    -0.5777,
    -0.4476,
    -0.6826,
    -0.9739,
    -0.1606,
    -0.1606,
    -0.5777,
    -0.4476,
    -0.6826,
    -0.5777,
    -0.6826,
    -0.4476,
    -0.5777,
    -0.4476,
    -0.6826,
    -0.5777,
    -0.6826,
    -0.4476,
    0,
    -0.8165,
    -0.5774,
    0,
    -0.5774,
    -0.8165,
    -0.9866,
    -0.151,
    -0.0626,
    -0.9739,
    -0.1606,
    -0.1606,
    -0.7193,
    -0.6418,
    -0.2658,
    -0.5777,
    -0.6826,
    -0.4476,
    0.9739,
    -0.1606,
    -0.1606,
    0.9853,
    -0.0623,
    -0.1592,
    0.9866,
    -0.151,
    -0.0626,
    1,
    -0,
    -0,
    -0,
    -0.9239,
    -0.3827,
    0,
    -0.8165,
    -0.5774,
    0.5777,
    -0.6826,
    -0.4476,
    0.7193,
    -0.6418,
    -0.2658,
    0,
    -0.5774,
    -0.8165,
    0,
    -0.3827,
    -0.9239,
    0.5777,
    -0.4476,
    -0.6826,
    0.7547,
    -0.2317,
    -0.6138,
    0.5777,
    -0.6826,
    -0.4476,
    0.7193,
    -0.6418,
    -0.2658,
    0.9739,
    -0.1606,
    -0.1606,
    0.9866,
    -0.151,
    -0.0626,
    0.5777,
    -0.6826,
    -0.4476,
    0.5777,
    -0.4476,
    -0.6826,
    0.9739,
    -0.1606,
    -0.1606,
    0,
    -0.8165,
    -0.5774,
    0,
    -0.5774,
    -0.8165,
    0.5777,
    -0.6826,
    -0.4476,
    0.5777,
    -0.4476,
    -0.6826,
    0.5777,
    -0.4476,
    -0.6826,
    0.7547,
    -0.2317,
    -0.6138,
    0.9739,
    -0.1606,
    -0.1606,
    0.9853,
    -0.0623,
    -0.1592,
    -1,
    0,
    0,
    -0.9866,
    -0.151,
    -0.0626,
    -0.9866,
    -0.151,
    0.0626,
    -0.9739,
    -0.2271,
    0,
    -0.7193,
    -0.6418,
    -0.2658,
    -0.5777,
    -0.7991,
    -0.1662,
    -0,
    -0.9239,
    -0.3827,
    0,
    -0.9856,
    -0.1691,
    -0.7193,
    -0.6418,
    0.2658,
    -0.5777,
    -0.7991,
    0.1662,
    0,
    -0.9239,
    0.3827,
    0,
    -0.9856,
    0.1691,
    -0.9866,
    -0.151,
    -0.0626,
    -0.9739,
    -0.2271,
    0,
    -0.7193,
    -0.6418,
    -0.2658,
    -0.5777,
    -0.7991,
    -0.1662,
    -0.9739,
    -0.2271,
    0,
    -0.5777,
    -0.7991,
    -0.1662,
    -0.5777,
    -0.7991,
    0.1662,
    -0.5777,
    -0.7991,
    -0.1662,
    -0.5777,
    -0.7991,
    0.1662,
    0,
    -0.9856,
    0.1691,
    0,
    -0.9856,
    -0.1691,
    -0.9866,
    -0.151,
    0.0626,
    -0.9739,
    -0.2271,
    0,
    -0.7193,
    -0.6418,
    0.2658,
    -0.5777,
    -0.7991,
    0.1662,
    0.9739,
    -0.2271,
    0,
    0.9866,
    -0.151,
    -0.0626,
    0.9866,
    -0.151,
    0.0626,
    1,
    -0,
    -0,
    0,
    -0.9239,
    0.3827,
    0,
    -0.9856,
    0.1691,
    0.5777,
    -0.7991,
    0.1662,
    0.7193,
    -0.6418,
    0.2658,
    -0,
    -0.9239,
    -0.3827,
    0,
    -0.9856,
    -0.1691,
    0.5777,
    -0.7991,
    -0.1662,
    0.7193,
    -0.6418,
    -0.2658,
    0.5777,
    -0.7991,
    0.1662,
    0.7193,
    -0.6418,
    0.2658,
    0.9739,
    -0.2271,
    0,
    0.9866,
    -0.151,
    0.0626,
    0.5777,
    -0.7991,
    0.1662,
    0.5777,
    -0.7991,
    -0.1662,
    0.9739,
    -0.2271,
    0,
    0,
    -0.9856,
    0.1691,
    0,
    -0.9856,
    -0.1691,
    0.5777,
    -0.7991,
    0.1662,
    0.5777,
    -0.7991,
    -0.1662,
    0.5777,
    -0.7991,
    -0.1662,
    0.7193,
    -0.6418,
    -0.2658,
    0.9739,
    -0.2271,
    0,
    0.9866,
    -0.151,
    -0.0626,
    -1,
    0,
    0,
    -0.9866,
    -0.151,
    0.0626,
    -0.9866,
    -0.0626,
    0.151,
    -0.9739,
    -0.1606,
    0.1606,
    -0.7193,
    -0.6418,
    0.2658,
    -0.5777,
    -0.6826,
    0.4476,
    0,
    -0.9239,
    0.3827,
    0,
    -0.8165,
    0.5774,
    -0.7193,
    -0.2658,
    0.6418,
    -0.5777,
    -0.4476,
    0.6826,
    -0,
    -0.5774,
    0.8165,
    0,
    -0.3827,
    0.9239,
    -0.9866,
    -0.151,
    0.0626,
    -0.9739,
    -0.1606,
    0.1606,
    -0.7193,
    -0.6418,
    0.2658,
    -0.5777,
    -0.6826,
    0.4476,
    -0.9739,
    -0.1606,
    0.1606,
    -0.5777,
    -0.6826,
    0.4476,
    -0.5777,
    -0.4476,
    0.6826,
    -0.5777,
    -0.6826,
    0.4476,
    -0.5777,
    -0.4476,
    0.6826,
    -0,
    -0.5774,
    0.8165,
    0,
    -0.8165,
    0.5774,
    -0.9866,
    -0.0626,
    0.151,
    -0.9739,
    -0.1606,
    0.1606,
    -0.7193,
    -0.2658,
    0.6418,
    -0.5777,
    -0.4476,
    0.6826,
    0.9739,
    -0.1606,
    0.1606,
    0.9866,
    -0.0626,
    0.151,
    0.9866,
    -0.151,
    0.0626,
    1,
    -0,
    -0,
    -0,
    -0.5774,
    0.8165,
    0,
    -0.3827,
    0.9239,
    0.5777,
    -0.4476,
    0.6826,
    0.7193,
    -0.2658,
    0.6418,
    0,
    -0.9239,
    0.3827,
    0,
    -0.8165,
    0.5774,
    0.5777,
    -0.6826,
    0.4476,
    0.7193,
    -0.6418,
    0.2658,
    0.5777,
    -0.4476,
    0.6826,
    0.7193,
    -0.2658,
    0.6418,
    0.9739,
    -0.1606,
    0.1606,
    0.9866,
    -0.0626,
    0.151,
    0.5777,
    -0.6826,
    0.4476,
    0.5777,
    -0.4476,
    0.6826,
    0.9739,
    -0.1606,
    0.1606,
    -0,
    -0.5774,
    0.8165,
    0,
    -0.8165,
    0.5774,
    0.5777,
    -0.6826,
    0.4476,
    0.5777,
    -0.4476,
    0.6826,
    0.5777,
    -0.6826,
    0.4476,
    0.7193,
    -0.6418,
    0.2658,
    0.9739,
    -0.1606,
    0.1606,
    0.9866,
    -0.151,
    0.0626,
    -1,
    0,
    0,
    -0.9866,
    -0.0626,
    0.151,
    -0.9866,
    0.0626,
    0.151,
    -0.9739,
    0,
    0.2271,
    -0.7193,
    -0.2658,
    0.6418,
    -0.5777,
    -0.1662,
    0.7991,
    0,
    -0.3827,
    0.9239,
    0,
    -0.1691,
    0.9856,
    -0.7193,
    0.2658,
    0.6418,
    -0.5777,
    0.1662,
    0.7991,
    -0,
    0.1691,
    0.9856,
    0,
    0.3827,
    0.9239,
    -0.9866,
    -0.0626,
    0.151,
    -0.9739,
    0,
    0.2271,
    -0.7193,
    -0.2658,
    0.6418,
    -0.5777,
    -0.1662,
    0.7991,
    -0.9739,
    0,
    0.2271,
    -0.5777,
    0.1662,
    0.7991,
    -0.5777,
    -0.1662,
    0.7991,
    -0.5777,
    0.1662,
    0.7991,
    -0.5777,
    -0.1662,
    0.7991,
    -0,
    0.1691,
    0.9856,
    0,
    -0.1691,
    0.9856,
    -0.9866,
    0.0626,
    0.151,
    -0.9739,
    0,
    0.2271,
    -0.7193,
    0.2658,
    0.6418,
    -0.5777,
    0.1662,
    0.7991,
    0.9739,
    -0,
    0.2271,
    0.9866,
    -0.0626,
    0.151,
    0.9866,
    0.0626,
    0.151,
    1,
    -0,
    -0,
    -0,
    0.1691,
    0.9856,
    0,
    0.3827,
    0.9239,
    0.5777,
    0.1662,
    0.7991,
    0.7193,
    0.2658,
    0.6418,
    0,
    -0.3827,
    0.9239,
    0,
    -0.1691,
    0.9856,
    0.5777,
    -0.1662,
    0.7991,
    0.7193,
    -0.2658,
    0.6418,
    0.5777,
    0.1662,
    0.7991,
    0.7193,
    0.2658,
    0.6418,
    0.9739,
    -0,
    0.2271,
    0.9866,
    0.0626,
    0.151,
    0.5777,
    -0.1662,
    0.7991,
    0.5777,
    0.1662,
    0.7991,
    0.9739,
    -0,
    0.2271,
    -0,
    0.1691,
    0.9856,
    0,
    -0.1691,
    0.9856,
    0.5777,
    -0.1662,
    0.7991,
    0.5777,
    0.1662,
    0.7991,
    0.5777,
    -0.1662,
    0.7991,
    0.7193,
    -0.2658,
    0.6418,
    0.9739,
    -0,
    0.2271,
    0.9866,
    -0.0626,
    0.151,
    -1,
    0,
    0,
    -0.9866,
    0.151,
    0.0626,
    -0.9866,
    0.0626,
    0.151,
    -0.9739,
    0.1606,
    0.1606,
    -0.7193,
    0.2658,
    0.6418,
    -0.5777,
    0.4476,
    0.6826,
    0,
    0.5774,
    0.8165,
    0,
    0.3827,
    0.9239,
    -0.7193,
    0.6418,
    0.2658,
    -0.5777,
    0.6826,
    0.4476,
    -0,
    0.8165,
    0.5774,
    0,
    0.9239,
    0.3827,
    -0.9866,
    0.0626,
    0.151,
    -0.9739,
    0.1606,
    0.1606,
    -0.7193,
    0.2658,
    0.6418,
    -0.5777,
    0.4476,
    0.6826,
    -0.9739,
    0.1606,
    0.1606,
    -0.5777,
    0.4476,
    0.6826,
    -0.5777,
    0.6826,
    0.4476,
    -0.5777,
    0.4476,
    0.6826,
    -0.5777,
    0.6826,
    0.4476,
    -0,
    0.8165,
    0.5774,
    0,
    0.5774,
    0.8165,
    -0.9866,
    0.151,
    0.0626,
    -0.9739,
    0.1606,
    0.1606,
    -0.7193,
    0.6418,
    0.2658,
    -0.5777,
    0.6826,
    0.4476,
    0.9739,
    0.1606,
    0.1606,
    0.9866,
    0.0626,
    0.151,
    0.9866,
    0.151,
    0.0626,
    1,
    -0,
    -0,
    -0,
    0.8165,
    0.5774,
    0,
    0.9239,
    0.3827,
    0.5777,
    0.6826,
    0.4476,
    0.7193,
    0.6418,
    0.2658,
    0,
    0.5774,
    0.8165,
    0,
    0.3827,
    0.9239,
    0.5777,
    0.4476,
    0.6826,
    0.7193,
    0.2658,
    0.6418,
    0.5777,
    0.6826,
    0.4476,
    0.7193,
    0.6418,
    0.2658,
    0.9739,
    0.1606,
    0.1606,
    0.9866,
    0.151,
    0.0626,
    0.5777,
    0.6826,
    0.4476,
    0.5777,
    0.4476,
    0.6826,
    0.9739,
    0.1606,
    0.1606,
    -0,
    0.8165,
    0.5774,
    0,
    0.5774,
    0.8165,
    0.5777,
    0.6826,
    0.4476,
    0.5777,
    0.4476,
    0.6826,
    0.5777,
    0.4476,
    0.6826,
    0.7193,
    0.2658,
    0.6418,
    0.9739,
    0.1606,
    0.1606,
    0.9866,
    0.0626,
    0.151,
    -1,
    0,
    0,
    -0.9866,
    0.151,
    -0.0626,
    -0.9866,
    0.151,
    0.0626,
    -0.9739,
    0.2271,
    0,
    -0.7193,
    0.6418,
    0.2658,
    -0.5777,
    0.7991,
    0.1662,
    -0,
    0.9856,
    0.1691,
    0,
    0.9239,
    0.3827,
    -0.7193,
    0.6418,
    -0.2658,
    -0.5777,
    0.7991,
    -0.1662,
    0,
    0.9239,
    -0.3827,
    0,
    0.9856,
    -0.1691,
    -0.9866,
    0.151,
    0.0626,
    -0.9739,
    0.2271,
    0,
    -0.7193,
    0.6418,
    0.2658,
    -0.5777,
    0.7991,
    0.1662,
    -0.9739,
    0.2271,
    0,
    -0.5777,
    0.7991,
    -0.1662,
    -0.5777,
    0.7991,
    0.1662,
    -0.5777,
    0.7991,
    -0.1662,
    -0.5777,
    0.7991,
    0.1662,
    -0,
    0.9856,
    0.1691,
    0,
    0.9856,
    -0.1691,
    -0.9866,
    0.151,
    -0.0626,
    -0.9739,
    0.2271,
    0,
    -0.7193,
    0.6418,
    -0.2658,
    -0.5777,
    0.7991,
    -0.1662,
    0.9739,
    0.2271,
    0,
    0.9866,
    0.151,
    0.0626,
    0.9866,
    0.151,
    -0.0626,
    1,
    -0,
    -0,
    0,
    0.9239,
    -0.3827,
    0,
    0.9856,
    -0.1691,
    0.5777,
    0.7991,
    -0.1662,
    0.7193,
    0.6418,
    -0.2658,
    -0,
    0.9856,
    0.1691,
    0,
    0.9239,
    0.3827,
    0.5777,
    0.7991,
    0.1662,
    0.7193,
    0.6418,
    0.2658,
    0.5777,
    0.7991,
    -0.1662,
    0.7193,
    0.6418,
    -0.2658,
    0.9739,
    0.2271,
    0,
    0.9866,
    0.151,
    -0.0626,
    0.5777,
    0.7991,
    0.1662,
    0.5777,
    0.7991,
    -0.1662,
    0.9739,
    0.2271,
    0,
    -0,
    0.9856,
    0.1691,
    0,
    0.9856,
    -0.1691,
    0.5777,
    0.7991,
    0.1662,
    0.5777,
    0.7991,
    -0.1662,
    0.5777,
    0.7991,
    0.1662,
    0.7193,
    0.6418,
    0.2658,
    0.9739,
    0.2271,
    0,
    0.9866,
    0.151,
    0.0626,
    -1,
    0,
    0,
    -0.9866,
    0.151,
    -0.0626,
    -0.9853,
    0.0623,
    -0.1592,
    -0.9739,
    0.1606,
    -0.1606,
    -0.7193,
    0.6418,
    -0.2658,
    -0.5777,
    0.6826,
    -0.4476,
    0,
    0.9239,
    -0.3827,
    0,
    0.8165,
    -0.5774,
    -0.7547,
    0.2317,
    -0.6138,
    -0.5777,
    0.4476,
    -0.6826,
    0,
    0.3827,
    -0.9239,
    0,
    0.5774,
    -0.8165,
    -0.9866,
    0.151,
    -0.0626,
    -0.9739,
    0.1606,
    -0.1606,
    -0.7193,
    0.6418,
    -0.2658,
    -0.5777,
    0.6826,
    -0.4476,
    -0.9739,
    0.1606,
    -0.1606,
    -0.5777,
    0.4476,
    -0.6826,
    -0.5777,
    0.6826,
    -0.4476,
    -0.5777,
    0.4476,
    -0.6826,
    -0.5777,
    0.6826,
    -0.4476,
    0,
    0.5774,
    -0.8165,
    0,
    0.8165,
    -0.5774,
    -0.9853,
    0.0623,
    -0.1592,
    -0.9739,
    0.1606,
    -0.1606,
    -0.7547,
    0.2317,
    -0.6138,
    -0.5777,
    0.4476,
    -0.6826,
    0.9739,
    0.1606,
    -0.1606,
    0.9853,
    0.0623,
    -0.1592,
    0.9866,
    0.151,
    -0.0626,
    1,
    -0,
    -0,
    0,
    0.3827,
    -0.9239,
    0,
    0.5774,
    -0.8165,
    0.5777,
    0.4476,
    -0.6826,
    0.7547,
    0.2317,
    -0.6138,
    0,
    0.9239,
    -0.3827,
    0,
    0.8165,
    -0.5774,
    0.5777,
    0.6826,
    -0.4476,
    0.7193,
    0.6418,
    -0.2658,
    0.5777,
    0.4476,
    -0.6826,
    0.7547,
    0.2317,
    -0.6138,
    0.9739,
    0.1606,
    -0.1606,
    0.9853,
    0.0623,
    -0.1592,
    0.5777,
    0.6826,
    -0.4476,
    0.5777,
    0.4476,
    -0.6826,
    0.9739,
    0.1606,
    -0.1606,
    0,
    0.5774,
    -0.8165,
    0,
    0.8165,
    -0.5774,
    0.5777,
    0.6826,
    -0.4476,
    0.5777,
    0.4476,
    -0.6826,
    0.5777,
    0.6826,
    -0.4476,
    0.7193,
    0.6418,
    -0.2658,
    0.9739,
    0.1606,
    -0.1606,
    0.9866,
    0.151,
    -0.0626
  ]);
  var texcoord_arr6 = Float32Array.from([
    0.75,
    0.5827,
    0.75,
    0.5827,
    0.75,
    0.5827,
    0.75,
    0.5827,
    0.0457,
    0.36,
    0.0457,
    0.36,
    0.0457,
    0.36,
    0.0457,
    0.36,
    0.9543,
    0.36,
    0.9543,
    0.36,
    0.9543,
    0.36,
    0.9543,
    0.36,
    0.697,
    0.532,
    0.697,
    0.532,
    0.039,
    0.5,
    0.039,
    0.5,
    0.7407,
    0.5138,
    0.9932,
    0.5,
    0,
    0.4408,
    1,
    0.36,
    0,
    0.36,
    0,
    0.36,
    1,
    0.36,
    0.803,
    0.532,
    0.803,
    0.532,
    0.961,
    0.5,
    0.961,
    0.5,
    0.25,
    0.5827,
    0.25,
    0.5827,
    0.25,
    0.5827,
    0.25,
    0.5827,
    0.9543,
    0.14,
    0.9543,
    0.14,
    0.9543,
    0.14,
    0.9543,
    0.14,
    0.0457,
    0.14,
    0.0457,
    0.14,
    0.0457,
    0.14,
    0.0457,
    0.14,
    0.961,
    0,
    0.961,
    0,
    0.303,
    0.532,
    0.303,
    0.532,
    1,
    0.0592,
    68e-4,
    0,
    0.2593,
    0.5138,
    0,
    0.14,
    1,
    0.14,
    1,
    0.14,
    0,
    0.14,
    0.039,
    0,
    0.039,
    0,
    0.197,
    0.532,
    0.197,
    0.532,
    0.8683,
    0.6317,
    0.8683,
    0.6317,
    0.8683,
    0.6317,
    0.8683,
    0.6317,
    0.9207,
    0.36,
    0.9207,
    0.36,
    0.9207,
    0.36,
    0.9207,
    0.36,
    0.8293,
    0.36,
    0.8293,
    0.36,
    0.8293,
    0.36,
    0.8293,
    0.36,
    0.8758,
    0.5621,
    0.8758,
    0.5621,
    0.9073,
    0.5,
    0.9073,
    0.5,
    0.9112,
    0.5768,
    0.875,
    0.4408,
    0.8687,
    0.5,
    0.875,
    0.36,
    0.875,
    0.36,
    0.875,
    0.36,
    0.875,
    0.36,
    0.9379,
    0.6242,
    0.9379,
    0.6242,
    0.8427,
    0.5,
    0.8427,
    0.5,
    0.3683,
    0.6317,
    0.3683,
    0.6317,
    0.3683,
    0.6317,
    0.3683,
    0.6317,
    0.8293,
    0.14,
    0.8293,
    0.14,
    0.8293,
    0.14,
    0.8293,
    0.14,
    0.9207,
    0.14,
    0.9207,
    0.14,
    0.9207,
    0.14,
    0.9207,
    0.14,
    0.8427,
    0,
    0.8427,
    0,
    0.4379,
    0.6242,
    0.4379,
    0.6242,
    0.875,
    0.0592,
    0.8813,
    0,
    0.4232,
    0.5888,
    0.875,
    0.14,
    0.875,
    0.14,
    0.875,
    0.14,
    0.875,
    0.14,
    0.9073,
    0,
    0.9073,
    0,
    0.3758,
    0.5621,
    0.3758,
    0.5621,
    0.9173,
    0.75,
    0.9173,
    0.75,
    0.9173,
    0.75,
    0.9173,
    0.75,
    0.7957,
    0.36,
    0.7957,
    0.36,
    0.7957,
    0.36,
    0.7957,
    0.36,
    0.7043,
    0.36,
    0.7043,
    0.36,
    0.7043,
    0.36,
    0.7043,
    0.36,
    0.9718,
    0.7061,
    0.9718,
    0.7061,
    0.7823,
    0.5,
    0.7823,
    0.5,
    0.9865,
    0.7415,
    0.75,
    0.4408,
    0.7437,
    0.5,
    0.75,
    0.36,
    0.75,
    0.36,
    0.75,
    0.36,
    0.75,
    0.36,
    0.9718,
    0.7939,
    0.9718,
    0.7939,
    0.7177,
    0.5,
    0.7177,
    0.5,
    0.4173,
    0.75,
    0.4173,
    0.75,
    0.4173,
    0.75,
    0.4173,
    0.75,
    0.7043,
    0.14,
    0.7043,
    0.14,
    0.7043,
    0.14,
    0.7043,
    0.14,
    0.7957,
    0.14,
    0.7957,
    0.14,
    0.7957,
    0.14,
    0.7957,
    0.14,
    0.7177,
    0,
    0.7177,
    0,
    0.4718,
    0.7939,
    0.4718,
    0.7939,
    0.75,
    0.0592,
    0.7563,
    0,
    0.4865,
    0.7585,
    0.75,
    0.14,
    0.75,
    0.14,
    0.75,
    0.14,
    0.75,
    0.14,
    0.7823,
    0,
    0.7823,
    0,
    0.4718,
    0.7061,
    0.4718,
    0.7061,
    0.8683,
    0.8683,
    0.8683,
    0.8683,
    0.8683,
    0.8683,
    0.8683,
    0.8683,
    0.6707,
    0.36,
    0.6707,
    0.36,
    0.6707,
    0.36,
    0.6707,
    0.36,
    0.5793,
    0.36,
    0.5793,
    0.36,
    0.5793,
    0.36,
    0.5793,
    0.36,
    0.9379,
    0.8758,
    0.9379,
    0.8758,
    0.6573,
    0.5,
    0.6573,
    0.5,
    0.9232,
    0.9112,
    0.625,
    0.4408,
    0.6187,
    0.5,
    0.625,
    0.36,
    0.625,
    0.36,
    0.625,
    0.36,
    0.625,
    0.36,
    0.8758,
    0.9379,
    0.8758,
    0.9379,
    0.5927,
    0.5,
    0.5927,
    0.5,
    0.3683,
    0.8683,
    0.3683,
    0.8683,
    0.3683,
    0.8683,
    0.3683,
    0.8683,
    0.5793,
    0.14,
    0.5793,
    0.14,
    0.5793,
    0.14,
    0.5793,
    0.14,
    0.6707,
    0.14,
    0.6707,
    0.14,
    0.6707,
    0.14,
    0.6707,
    0.14,
    0.5927,
    0,
    0.5927,
    0,
    0.3758,
    0.9379,
    0.3758,
    0.9379,
    0.6313,
    0,
    0.625,
    0.0592,
    0.4112,
    0.9232,
    0.625,
    0.14,
    0.625,
    0.14,
    0.625,
    0.14,
    0.625,
    0.14,
    0.6573,
    0,
    0.6573,
    0,
    0.4379,
    0.8758,
    0.4379,
    0.8758,
    0.75,
    0.9173,
    0.75,
    0.9173,
    0.75,
    0.9173,
    0.75,
    0.9173,
    0.5457,
    0.36,
    0.5457,
    0.36,
    0.5457,
    0.36,
    0.5457,
    0.36,
    0.4543,
    0.36,
    0.4543,
    0.36,
    0.4543,
    0.36,
    0.4543,
    0.36,
    0.7939,
    0.9718,
    0.7939,
    0.9718,
    0.5323,
    0.5,
    0.5323,
    0.5,
    0.7585,
    0.9865,
    0.4937,
    0.5,
    0.5,
    0.4408,
    0.5,
    0.36,
    0.5,
    0.36,
    0.5,
    0.36,
    0.5,
    0.36,
    0.7061,
    0.9718,
    0.7061,
    0.9718,
    0.4677,
    0.5,
    0.4677,
    0.5,
    0.25,
    0.9173,
    0.25,
    0.9173,
    0.25,
    0.9173,
    0.25,
    0.9173,
    0.4543,
    0.14,
    0.4543,
    0.14,
    0.4543,
    0.14,
    0.4543,
    0.14,
    0.5457,
    0.14,
    0.5457,
    0.14,
    0.5457,
    0.14,
    0.5457,
    0.14,
    0.4677,
    0,
    0.4677,
    0,
    0.2061,
    0.9718,
    0.2061,
    0.9718,
    0.5063,
    0,
    0.5,
    0.0592,
    0.2415,
    0.9865,
    0.5,
    0.14,
    0.5,
    0.14,
    0.5,
    0.14,
    0.5,
    0.14,
    0.5323,
    0,
    0.5323,
    0,
    0.2939,
    0.9718,
    0.2939,
    0.9718,
    0.6317,
    0.8683,
    0.6317,
    0.8683,
    0.6317,
    0.8683,
    0.6317,
    0.8683,
    0.4207,
    0.36,
    0.4207,
    0.36,
    0.4207,
    0.36,
    0.4207,
    0.36,
    0.3293,
    0.36,
    0.3293,
    0.36,
    0.3293,
    0.36,
    0.3293,
    0.36,
    0.6242,
    0.9379,
    0.6242,
    0.9379,
    0.4073,
    0.5,
    0.4073,
    0.5,
    0.5888,
    0.9232,
    0.375,
    0.4408,
    0.3687,
    0.5,
    0.375,
    0.36,
    0.375,
    0.36,
    0.375,
    0.36,
    0.375,
    0.36,
    0.5621,
    0.8758,
    0.5621,
    0.8758,
    0.3427,
    0.5,
    0.3427,
    0.5,
    0.1317,
    0.8683,
    0.1317,
    0.8683,
    0.1317,
    0.8683,
    0.1317,
    0.8683,
    0.3293,
    0.14,
    0.3293,
    0.14,
    0.3293,
    0.14,
    0.3293,
    0.14,
    0.4207,
    0.14,
    0.4207,
    0.14,
    0.4207,
    0.14,
    0.4207,
    0.14,
    0.3427,
    0,
    0.3427,
    0,
    0.0621,
    0.8758,
    0.0621,
    0.8758,
    0.375,
    0.0592,
    0.3813,
    0,
    0.0768,
    0.9112,
    0.375,
    0.14,
    0.375,
    0.14,
    0.375,
    0.14,
    0.375,
    0.14,
    0.4073,
    0,
    0.4073,
    0,
    0.1242,
    0.9379,
    0.1242,
    0.9379,
    0.5827,
    0.75,
    0.5827,
    0.75,
    0.5827,
    0.75,
    0.5827,
    0.75,
    0.2957,
    0.36,
    0.2957,
    0.36,
    0.2957,
    0.36,
    0.2957,
    0.36,
    0.2043,
    0.36,
    0.2043,
    0.36,
    0.2043,
    0.36,
    0.2043,
    0.36,
    0.5282,
    0.7939,
    0.5282,
    0.7939,
    0.2823,
    0.5,
    0.2823,
    0.5,
    0.5135,
    0.7585,
    0.2437,
    0.5,
    0.25,
    0.4408,
    0.25,
    0.36,
    0.25,
    0.36,
    0.25,
    0.36,
    0.25,
    0.36,
    0.5282,
    0.7061,
    0.5282,
    0.7061,
    0.2177,
    0.5,
    0.2177,
    0.5,
    0.0827,
    0.75,
    0.0827,
    0.75,
    0.0827,
    0.75,
    0.0827,
    0.75,
    0.2043,
    0.14,
    0.2043,
    0.14,
    0.2043,
    0.14,
    0.2043,
    0.14,
    0.2957,
    0.14,
    0.2957,
    0.14,
    0.2957,
    0.14,
    0.2957,
    0.14,
    0.2177,
    0,
    0.2177,
    0,
    0.0282,
    0.7061,
    0.0282,
    0.7061,
    0.2563,
    0,
    0.25,
    0.0592,
    0.0135,
    0.7415,
    0.25,
    0.14,
    0.25,
    0.14,
    0.25,
    0.14,
    0.25,
    0.14,
    0.2823,
    0,
    0.2823,
    0,
    0.0282,
    0.7939,
    0.0282,
    0.7939,
    0.6317,
    0.6317,
    0.6317,
    0.6317,
    0.6317,
    0.6317,
    0.6317,
    0.6317,
    0.1707,
    0.36,
    0.1707,
    0.36,
    0.1707,
    0.36,
    0.1707,
    0.36,
    0.0793,
    0.36,
    0.0793,
    0.36,
    0.0793,
    0.36,
    0.0793,
    0.36,
    0.5621,
    0.6242,
    0.5621,
    0.6242,
    0.1573,
    0.5,
    0.1573,
    0.5,
    0.5768,
    0.5888,
    0.1187,
    0.5,
    0.125,
    0.4408,
    0.125,
    0.36,
    0.125,
    0.36,
    0.125,
    0.36,
    0.125,
    0.36,
    0.6242,
    0.5621,
    0.6242,
    0.5621,
    0.0927,
    0.5,
    0.0927,
    0.5,
    0.1317,
    0.6317,
    0.1317,
    0.6317,
    0.1317,
    0.6317,
    0.1317,
    0.6317,
    0.0793,
    0.14,
    0.0793,
    0.14,
    0.0793,
    0.14,
    0.0793,
    0.14,
    0.1707,
    0.14,
    0.1707,
    0.14,
    0.1707,
    0.14,
    0.1707,
    0.14,
    0.0927,
    0,
    0.0927,
    0,
    0.1242,
    0.5621,
    0.1242,
    0.5621,
    0.1313,
    0,
    0.125,
    0.0592,
    0.0888,
    0.5768,
    0.125,
    0.14,
    0.125,
    0.14,
    0.125,
    0.14,
    0.125,
    0.14,
    0.1573,
    0,
    0.1573,
    0,
    0.0621,
    0.6242,
    0.0621,
    0.6242
  ]);
  var weights_arr6 = Float32Array.from([]);
  var index_arr6 = Uint16Array.from([
    378,
    270,
    162,
    162,
    54,
    378,
    378,
    324,
    270,
    270,
    216,
    162,
    162,
    108,
    54,
    54,
    0,
    378,
    29,
    406,
    53,
    406,
    420,
    53,
    51,
    418,
    38,
    418,
    412,
    38,
    380,
    2,
    401,
    2,
    12,
    401,
    403,
    14,
    386,
    14,
    4,
    386,
    414,
    385,
    425,
    385,
    400,
    425,
    424,
    399,
    410,
    399,
    389,
    410,
    407,
    353,
    431,
    353,
    366,
    431,
    429,
    364,
    416,
    364,
    358,
    416,
    325,
    379,
    347,
    379,
    390,
    347,
    349,
    392,
    332,
    392,
    382,
    332,
    359,
    330,
    370,
    330,
    345,
    370,
    371,
    346,
    356,
    346,
    335,
    356,
    352,
    299,
    377,
    299,
    312,
    377,
    375,
    310,
    362,
    310,
    304,
    362,
    271,
    326,
    293,
    326,
    336,
    293,
    295,
    338,
    278,
    338,
    328,
    278,
    305,
    276,
    317,
    276,
    292,
    317,
    316,
    291,
    301,
    291,
    280,
    301,
    298,
    245,
    323,
    245,
    258,
    323,
    321,
    256,
    308,
    256,
    250,
    308,
    218,
    272,
    239,
    272,
    282,
    239,
    241,
    284,
    224,
    284,
    274,
    224,
    252,
    223,
    263,
    223,
    238,
    263,
    262,
    237,
    247,
    237,
    226,
    247,
    244,
    190,
    269,
    190,
    204,
    269,
    267,
    202,
    254,
    202,
    196,
    254,
    164,
    217,
    185,
    217,
    228,
    185,
    187,
    230,
    170,
    230,
    220,
    170,
    198,
    169,
    209,
    169,
    184,
    209,
    208,
    183,
    193,
    183,
    172,
    193,
    191,
    137,
    215,
    137,
    150,
    215,
    213,
    148,
    200,
    148,
    142,
    200,
    110,
    163,
    131,
    163,
    174,
    131,
    133,
    176,
    116,
    176,
    166,
    116,
    144,
    115,
    155,
    115,
    130,
    155,
    154,
    129,
    140,
    129,
    119,
    140,
    136,
    83,
    161,
    83,
    96,
    161,
    159,
    94,
    146,
    94,
    88,
    146,
    55,
    109,
    77,
    109,
    120,
    77,
    79,
    122,
    62,
    122,
    112,
    62,
    89,
    60,
    101,
    60,
    76,
    101,
    100,
    75,
    86,
    75,
    65,
    86,
    11,
    32,
    22,
    32,
    47,
    22,
    21,
    46,
    6,
    46,
    35,
    6,
    82,
    28,
    107,
    28,
    42,
    107,
    105,
    40,
    92,
    40,
    34,
    92,
    1,
    56,
    23,
    56,
    66,
    23,
    25,
    68,
    8,
    68,
    58,
    8,
    426,
    421,
    415,
    421,
    428,
    415,
    417,
    422,
    411,
    422,
    427,
    411,
    430,
    423,
    405,
    423,
    419,
    405,
    397,
    395,
    387,
    395,
    404,
    387,
    393,
    396,
    383,
    396,
    398,
    383,
    402,
    394,
    381,
    394,
    391,
    381,
    372,
    367,
    361,
    367,
    374,
    361,
    363,
    368,
    357,
    368,
    373,
    357,
    376,
    369,
    351,
    369,
    365,
    351,
    343,
    341,
    333,
    341,
    350,
    333,
    339,
    342,
    329,
    342,
    344,
    329,
    348,
    340,
    327,
    340,
    337,
    327,
    319,
    314,
    307,
    314,
    320,
    307,
    309,
    313,
    303,
    313,
    318,
    303,
    322,
    315,
    297,
    315,
    311,
    297,
    290,
    288,
    279,
    288,
    296,
    279,
    285,
    287,
    275,
    287,
    289,
    275,
    294,
    286,
    273,
    286,
    283,
    273,
    264,
    259,
    253,
    259,
    266,
    253,
    255,
    260,
    249,
    260,
    265,
    249,
    268,
    261,
    243,
    261,
    257,
    243,
    235,
    233,
    225,
    233,
    242,
    225,
    231,
    234,
    221,
    234,
    236,
    221,
    240,
    232,
    219,
    232,
    229,
    219,
    210,
    205,
    199,
    205,
    212,
    199,
    201,
    206,
    195,
    206,
    211,
    195,
    214,
    207,
    189,
    207,
    203,
    189,
    182,
    180,
    171,
    180,
    188,
    171,
    177,
    179,
    167,
    179,
    181,
    167,
    186,
    178,
    165,
    178,
    175,
    165,
    157,
    152,
    145,
    152,
    158,
    145,
    147,
    151,
    141,
    151,
    156,
    141,
    160,
    153,
    135,
    153,
    149,
    135,
    128,
    126,
    117,
    126,
    134,
    117,
    123,
    125,
    113,
    125,
    127,
    113,
    132,
    124,
    111,
    124,
    121,
    111,
    103,
    98,
    91,
    98,
    104,
    91,
    93,
    97,
    87,
    97,
    102,
    87,
    106,
    99,
    81,
    99,
    95,
    81,
    74,
    72,
    63,
    72,
    80,
    63,
    69,
    71,
    59,
    71,
    73,
    59,
    78,
    70,
    57,
    70,
    67,
    57,
    49,
    44,
    37,
    44,
    50,
    37,
    39,
    43,
    33,
    43,
    48,
    33,
    52,
    45,
    27,
    45,
    41,
    27,
    19,
    17,
    9,
    17,
    26,
    9,
    15,
    18,
    5,
    18,
    20,
    5,
    24,
    16,
    3,
    16,
    13,
    3,
    61,
    90,
    10,
    90,
    31,
    10,
    138,
    246,
    354,
    354,
    30,
    138,
    138,
    192,
    246,
    246,
    300,
    354,
    354,
    408,
    30,
    30,
    84,
    138,
    114,
    143,
    64,
    143,
    85,
    64,
    384,
    413,
    334,
    413,
    355,
    334,
    331,
    360,
    281,
    360,
    302,
    281,
    277,
    306,
    227,
    306,
    248,
    227,
    222,
    251,
    173,
    251,
    194,
    173,
    168,
    197,
    118,
    197,
    139,
    118,
    7,
    36,
    388,
    36,
    409,
    388
  ]);

  // ../common/math.ts
  var EPSILON = 1e-6;
  var DEG_TO_RAD = Math.PI / 180;
  var RAD_TO_DEG = 180 / Math.PI;

  // ../common/number.ts
  function clamp(min, max, num) {
    return Math.max(min, Math.min(max, num));
  }

  // ../common/vec3.ts
  function set(out, x, y, z) {
    out[0] = x;
    out[1] = y;
    out[2] = z;
    return out;
  }
  function copy(out, a2) {
    out[0] = a2[0];
    out[1] = a2[1];
    out[2] = a2[2];
    return out;
  }
  function add(out, a2, b) {
    out[0] = a2[0] + b[0];
    out[1] = a2[1] + b[1];
    out[2] = a2[2] + b[2];
    return out;
  }
  function subtract(out, a2, b) {
    out[0] = a2[0] - b[0];
    out[1] = a2[1] - b[1];
    out[2] = a2[2] - b[2];
    return out;
  }
  function scale(out, a2, b) {
    out[0] = a2[0] * b;
    out[1] = a2[1] * b;
    out[2] = a2[2] * b;
    return out;
  }
  function negate(out, a2) {
    out[0] = -a2[0];
    out[1] = -a2[1];
    out[2] = -a2[2];
    return out;
  }
  function normalize(out, a2) {
    let x = a2[0];
    let y = a2[1];
    let z = a2[2];
    let len = x * x + y * y + z * z;
    if (len > 0) {
      len = 1 / Math.sqrt(len);
    }
    out[0] = a2[0] * len;
    out[1] = a2[1] * len;
    out[2] = a2[2] * len;
    return out;
  }
  function dot(a2, b) {
    return a2[0] * b[0] + a2[1] * b[1] + a2[2] * b[2];
  }
  function cross(out, a2, b) {
    let ax = a2[0], ay = a2[1], az = a2[2];
    let bx = b[0], by = b[1], bz = b[2];
    out[0] = ay * bz - az * by;
    out[1] = az * bx - ax * bz;
    out[2] = ax * by - ay * bx;
    return out;
  }
  function transform_position(out, a2, m) {
    let x = a2[0];
    let y = a2[1];
    let z = a2[2];
    let w = m[3] * x + m[7] * y + m[11] * z + m[15] || 1;
    out[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) / w;
    out[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) / w;
    out[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) / w;
    return out;
  }
  function transform_direction(out, a2, m) {
    let x = a2[0];
    let y = a2[1];
    let z = a2[2];
    out[0] = m[0] * x + m[4] * y + m[8] * z;
    out[1] = m[1] * x + m[5] * y + m[9] * z;
    out[2] = m[2] * x + m[6] * y + m[10] * z;
    return out;
  }
  function length(a2) {
    let x = a2[0];
    let y = a2[1];
    let z = a2[2];
    return Math.hypot(x, y, z);
  }
  function lerp(out, a2, b, t) {
    let ax = a2[0];
    let ay = a2[1];
    let az = a2[2];
    out[0] = ax + t * (b[0] - ax);
    out[1] = ay + t * (b[1] - ay);
    out[2] = az + t * (b[2] - az);
    return out;
  }

  // ../common/quat.ts
  function set2(out, x, y, z, w) {
    out[0] = x;
    out[1] = y;
    out[2] = z;
    out[3] = w;
    return out;
  }
  function normalize2(out, a2) {
    let x = a2[0];
    let y = a2[1];
    let z = a2[2];
    let w = a2[3];
    let len = x * x + y * y + z * z + w * w;
    if (len > 0) {
      len = 1 / Math.sqrt(len);
    }
    out[0] = x * len;
    out[1] = y * len;
    out[2] = z * len;
    out[3] = w * len;
    return out;
  }
  function multiply(out, a2, b) {
    let ax = a2[0], ay = a2[1], az = a2[2], aw = a2[3];
    let bx = b[0], by = b[1], bz = b[2], bw = b[3];
    out[0] = ax * bw + aw * bx + ay * bz - az * by;
    out[1] = ay * bw + aw * by + az * bx - ax * bz;
    out[2] = az * bw + aw * bz + ax * by - ay * bx;
    out[3] = aw * bw - ax * bx - ay * by - az * bz;
    return out;
  }
  function from_euler(out, x, y, z) {
    let sx = Math.sin(x / 2 * DEG_TO_RAD);
    let cx = Math.cos(x / 2 * DEG_TO_RAD);
    let sy = Math.sin(y / 2 * DEG_TO_RAD);
    let cy = Math.cos(y / 2 * DEG_TO_RAD);
    let sz = Math.sin(z / 2 * DEG_TO_RAD);
    let cz = Math.cos(z / 2 * DEG_TO_RAD);
    out[0] = sx * cy * cz + cx * sy * sz;
    out[1] = cx * sy * cz - sx * cy * sz;
    out[2] = cx * cy * sz - sx * sy * cz;
    out[3] = cx * cy * cz + sx * sy * sz;
    return out;
  }
  function get_pitch(quat) {
    let x = quat[0];
    let y = quat[1];
    let z = quat[2];
    let w = quat[3];
    let m23 = 2 * (y * z - w * x);
    return Math.asin(-clamp(-1, 1, m23)) * RAD_TO_DEG;
  }
  function from_axis(out, axis, angle) {
    let half = angle / 2;
    out[0] = Math.sin(half) * axis[0];
    out[1] = Math.sin(half) * axis[1];
    out[2] = Math.sin(half) * axis[2];
    out[3] = Math.cos(half);
    return out;
  }
  var rotation_to = function() {
    let tmpvec3 = [0, 0, 0];
    let xUnitVec3 = [1, 0, 0];
    let yUnitVec3 = [0, 1, 0];
    return function(out, a2, b) {
      let d = dot(a2, b);
      if (d < -0.999999) {
        cross(tmpvec3, xUnitVec3, a2);
        if (length(tmpvec3) < 1e-6)
          cross(tmpvec3, yUnitVec3, a2);
        normalize(tmpvec3, tmpvec3);
        from_axis(out, tmpvec3, Math.PI);
        return out;
      } else if (d > 0.999999) {
        out[0] = 0;
        out[1] = 0;
        out[2] = 0;
        out[3] = 1;
        return out;
      } else {
        cross(tmpvec3, a2, b);
        out[0] = tmpvec3[0];
        out[1] = tmpvec3[1];
        out[2] = tmpvec3[2];
        out[3] = 1 + d;
        return normalize2(out, out);
      }
    };
  }();
  function slerp(out, a2, b, t) {
    let ax = a2[0], ay = a2[1], az = a2[2], aw = a2[3];
    let bx = b[0], by = b[1], bz = b[2], bw = b[3];
    let omega, cosom, sinom, scale0, scale1;
    cosom = ax * bx + ay * by + az * bz + aw * bw;
    if (cosom < 0) {
      cosom = -cosom;
      bx = -bx;
      by = -by;
      bz = -bz;
      bw = -bw;
    }
    if (1 - cosom > EPSILON) {
      omega = Math.acos(cosom);
      sinom = Math.sin(omega);
      scale0 = Math.sin((1 - t) * omega) / sinom;
      scale1 = Math.sin(t * omega) / sinom;
    } else {
      scale0 = 1 - t;
      scale1 = t;
    }
    out[0] = scale0 * ax + scale1 * bx;
    out[1] = scale0 * ay + scale1 * by;
    out[2] = scale0 * az + scale1 * bz;
    out[3] = scale0 * aw + scale1 * bw;
    return out;
  }

  // ../src/components/com_animate.ts
  function animate(clips) {
    return (game2, entity) => {
      let States = {};
      for (let name in clips) {
        let { Keyframes, Flags = AnimationFlag.Default } = clips[name];
        let duration = Keyframes[Keyframes.length - 1].Timestamp;
        States[name] = {
          Keyframes: Keyframes.map((keyframe) => ({ ...keyframe })),
          Flags,
          Duration: duration,
          Time: 0
        };
      }
      game2.World.Signature[entity] |= 1 /* Animate */;
      game2.World.Animate[entity] = {
        States,
        Current: States["idle"]
      };
    };
  }
  var AnimationFlag = /* @__PURE__ */ ((AnimationFlag2) => {
    AnimationFlag2[AnimationFlag2["None"] = 0] = "None";
    AnimationFlag2[AnimationFlag2["EarlyExit"] = 1] = "EarlyExit";
    AnimationFlag2[AnimationFlag2["Loop"] = 2] = "Loop";
    AnimationFlag2[AnimationFlag2["Alternate"] = 4] = "Alternate";
    AnimationFlag2[AnimationFlag2["Default"] = 7] = "Default";
    return AnimationFlag2;
  })(AnimationFlag || {});

  // ../src/systems/sys_animate.ts
  var QUERY = 8388608 /* Transform */ | 1 /* Animate */;
  function sys_animate(game2, delta) {
    for (let i = 0; i < game2.World.Signature.length; i++) {
      if ((game2.World.Signature[i] & QUERY) === QUERY) {
        update(game2, i, delta);
      }
    }
  }
  function update(game2, entity, delta) {
    let transform2 = game2.World.Transform[entity];
    let animate2 = game2.World.Animate[entity];
    if (animate2.Trigger) {
      let next = animate2.States[animate2.Trigger];
      if (next && next !== animate2.Current) {
        if (animate2.Current.Time === 0) {
          animate2.Current = next;
        } else if (animate2.Current.Flags & 1 /* EarlyExit */) {
          animate2.Current.Time = 0;
          animate2.Current = next;
        }
      }
      animate2.Trigger = void 0;
    }
    let current_keyframe = null;
    let next_keyframe = null;
    for (let keyframe of animate2.Current.Keyframes) {
      if (animate2.Current.Time < keyframe.Timestamp) {
        next_keyframe = keyframe;
        break;
      } else {
        current_keyframe = keyframe;
      }
    }
    if (current_keyframe && next_keyframe) {
      let keyframe_duration = next_keyframe.Timestamp - current_keyframe.Timestamp;
      let current_keyframe_time = animate2.Current.Time - current_keyframe.Timestamp;
      let interpolant = current_keyframe_time / keyframe_duration;
      if (next_keyframe.Ease) {
        interpolant = next_keyframe.Ease(interpolant);
      }
      if (current_keyframe.Translation && next_keyframe.Translation) {
        lerp(transform2.Translation, current_keyframe.Translation, next_keyframe.Translation, interpolant);
        game2.World.Signature[entity] |= 512 /* Dirty */;
      }
      if (current_keyframe.Rotation && next_keyframe.Rotation) {
        slerp(transform2.Rotation, current_keyframe.Rotation, next_keyframe.Rotation, interpolant);
        game2.World.Signature[entity] |= 512 /* Dirty */;
      }
      if (current_keyframe.Scale && next_keyframe.Scale) {
        lerp(transform2.Scale, current_keyframe.Scale, next_keyframe.Scale, interpolant);
        game2.World.Signature[entity] |= 512 /* Dirty */;
      }
    }
    let new_time = animate2.Current.Time + delta;
    if (new_time < animate2.Current.Duration) {
      animate2.Current.Time = new_time;
      return;
    } else {
      animate2.Current.Time = 0;
    }
    if (animate2.Current.Flags & 4 /* Alternate */) {
      for (let keyframe of animate2.Current.Keyframes.reverse()) {
        keyframe.Timestamp = animate2.Current.Duration - keyframe.Timestamp;
      }
    }
    if (!(animate2.Current.Flags & 2 /* Loop */)) {
      animate2.Current = animate2.States["idle"];
    }
  }

  // ../common/mat4.ts
  function create() {
    return [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1];
  }
  function copy2(out, a2) {
    out[0] = a2[0];
    out[1] = a2[1];
    out[2] = a2[2];
    out[3] = a2[3];
    out[4] = a2[4];
    out[5] = a2[5];
    out[6] = a2[6];
    out[7] = a2[7];
    out[8] = a2[8];
    out[9] = a2[9];
    out[10] = a2[10];
    out[11] = a2[11];
    out[12] = a2[12];
    out[13] = a2[13];
    out[14] = a2[14];
    out[15] = a2[15];
    return out;
  }
  function invert(out, a2) {
    let a00 = a2[0], a01 = a2[1], a02 = a2[2], a03 = a2[3];
    let a10 = a2[4], a11 = a2[5], a12 = a2[6], a13 = a2[7];
    let a20 = a2[8], a21 = a2[9], a22 = a2[10], a23 = a2[11];
    let a30 = a2[12], a31 = a2[13], a32 = a2[14], a33 = a2[15];
    let b00 = a00 * a11 - a01 * a10;
    let b01 = a00 * a12 - a02 * a10;
    let b02 = a00 * a13 - a03 * a10;
    let b03 = a01 * a12 - a02 * a11;
    let b04 = a01 * a13 - a03 * a11;
    let b05 = a02 * a13 - a03 * a12;
    let b06 = a20 * a31 - a21 * a30;
    let b07 = a20 * a32 - a22 * a30;
    let b08 = a20 * a33 - a23 * a30;
    let b09 = a21 * a32 - a22 * a31;
    let b10 = a21 * a33 - a23 * a31;
    let b11 = a22 * a33 - a23 * a32;
    let det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;
    if (!det) {
      return null;
    }
    det = 1 / det;
    out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;
    out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;
    out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;
    out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;
    out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;
    out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;
    out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;
    out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;
    out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;
    out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;
    out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;
    out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;
    out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;
    out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;
    out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;
    out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;
    return out;
  }
  function multiply2(out, a2, b) {
    let a00 = a2[0], a01 = a2[1], a02 = a2[2], a03 = a2[3];
    let a10 = a2[4], a11 = a2[5], a12 = a2[6], a13 = a2[7];
    let a20 = a2[8], a21 = a2[9], a22 = a2[10], a23 = a2[11];
    let a30 = a2[12], a31 = a2[13], a32 = a2[14], a33 = a2[15];
    let b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3];
    out[0] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
    out[1] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
    out[2] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
    out[3] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
    b0 = b[4];
    b1 = b[5];
    b2 = b[6];
    b3 = b[7];
    out[4] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
    out[5] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
    out[6] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
    out[7] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
    b0 = b[8];
    b1 = b[9];
    b2 = b[10];
    b3 = b[11];
    out[8] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
    out[9] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
    out[10] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
    out[11] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
    b0 = b[12];
    b1 = b[13];
    b2 = b[14];
    b3 = b[15];
    out[12] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
    out[13] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
    out[14] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
    out[15] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
    return out;
  }
  function from_rotation_translation_scale(out, q, v, s) {
    let x = q[0], y = q[1], z = q[2], w = q[3];
    let x2 = x + x;
    let y2 = y + y;
    let z2 = z + z;
    let xx = x * x2;
    let xy = x * y2;
    let xz = x * z2;
    let yy = y * y2;
    let yz = y * z2;
    let zz = z * z2;
    let wx = w * x2;
    let wy = w * y2;
    let wz = w * z2;
    let sx = s[0];
    let sy = s[1];
    let sz = s[2];
    out[0] = (1 - (yy + zz)) * sx;
    out[1] = (xy + wz) * sx;
    out[2] = (xz - wy) * sx;
    out[3] = 0;
    out[4] = (xy - wz) * sy;
    out[5] = (1 - (xx + zz)) * sy;
    out[6] = (yz + wx) * sy;
    out[7] = 0;
    out[8] = (xz + wy) * sz;
    out[9] = (yz - wx) * sz;
    out[10] = (1 - (xx + yy)) * sz;
    out[11] = 0;
    out[12] = v[0];
    out[13] = v[1];
    out[14] = v[2];
    out[15] = 1;
    return out;
  }
  function from_perspective(out, fovy, aspect, near, far) {
    let f = 1 / Math.tan(fovy / 2), nf;
    out[0] = f / aspect;
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[4] = 0;
    out[5] = f;
    out[6] = 0;
    out[7] = 0;
    out[8] = 0;
    out[9] = 0;
    out[11] = -1;
    out[12] = 0;
    out[13] = 0;
    out[15] = 0;
    if (far != null && far !== Infinity) {
      nf = 1 / (near - far);
      out[10] = (far + near) * nf;
      out[14] = 2 * far * near * nf;
    } else {
      out[10] = -1;
      out[14] = -2 * near;
    }
    return out;
  }
  function from_ortho(out, top, right, bottom, left, near, far) {
    let lr = 1 / (left - right);
    let bt = 1 / (bottom - top);
    let nf = 1 / (near - far);
    out[0] = -2 * lr;
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[4] = 0;
    out[5] = -2 * bt;
    out[6] = 0;
    out[7] = 0;
    out[8] = 0;
    out[9] = 0;
    out[10] = 2 * nf;
    out[11] = 0;
    out[12] = (left + right) * lr;
    out[13] = (top + bottom) * bt;
    out[14] = (far + near) * nf;
    out[15] = 1;
    return out;
  }
  function get_translation(out, mat) {
    out[0] = mat[12];
    out[1] = mat[13];
    out[2] = mat[14];
    return out;
  }
  function get_scaling(out, mat) {
    let m11 = mat[0];
    let m12 = mat[1];
    let m13 = mat[2];
    let m21 = mat[4];
    let m22 = mat[5];
    let m23 = mat[6];
    let m31 = mat[8];
    let m32 = mat[9];
    let m33 = mat[10];
    out[0] = Math.hypot(m11, m12, m13);
    out[1] = Math.hypot(m21, m22, m23);
    out[2] = Math.hypot(m31, m32, m33);
    return out;
  }
  function get_rotation(out, mat) {
    let scaling = get_scaling([0, 0, 0], mat);
    let is1 = 1 / scaling[0];
    let is2 = 1 / scaling[1];
    let is3 = 1 / scaling[2];
    let sm11 = mat[0] * is1;
    let sm12 = mat[1] * is2;
    let sm13 = mat[2] * is3;
    let sm21 = mat[4] * is1;
    let sm22 = mat[5] * is2;
    let sm23 = mat[6] * is3;
    let sm31 = mat[8] * is1;
    let sm32 = mat[9] * is2;
    let sm33 = mat[10] * is3;
    let trace = sm11 + sm22 + sm33;
    let S = 0;
    if (trace > 0) {
      S = Math.sqrt(trace + 1) * 2;
      out[3] = 0.25 * S;
      out[0] = (sm23 - sm32) / S;
      out[1] = (sm31 - sm13) / S;
      out[2] = (sm12 - sm21) / S;
    } else if (sm11 > sm22 && sm11 > sm33) {
      S = Math.sqrt(1 + sm11 - sm22 - sm33) * 2;
      out[3] = (sm23 - sm32) / S;
      out[0] = 0.25 * S;
      out[1] = (sm12 + sm21) / S;
      out[2] = (sm31 + sm13) / S;
    } else if (sm22 > sm33) {
      S = Math.sqrt(1 + sm22 - sm11 - sm33) * 2;
      out[3] = (sm31 - sm13) / S;
      out[0] = (sm12 + sm21) / S;
      out[1] = 0.25 * S;
      out[2] = (sm23 + sm32) / S;
    } else {
      S = Math.sqrt(1 + sm33 - sm11 - sm22) * 2;
      out[3] = (sm12 - sm21) / S;
      out[0] = (sm31 + sm13) / S;
      out[1] = (sm23 + sm32) / S;
      out[2] = 0.25 * S;
    }
    return out;
  }
  function distance_squared_from_point(m, v) {
    let x = m[12] - v[0];
    let y = m[13] - v[1];
    let z = m[14] - v[2];
    return x * x + y * y + z * z;
  }

  // ../src/systems/sys_audio_listener.ts
  var QUERY2 = 2 /* AudioListener */ | 8388608 /* Transform */;

  // ../common/random.ts
  var seed = 1;
  function rand() {
    seed = seed * 16807 % 2147483647;
    return (seed - 1) / 2147483646;
  }
  function integer(min = 0, max = 1) {
    return ~~(rand() * (max - min + 1) + min);
  }
  function element(arr) {
    return arr[integer(0, arr.length - 1)];
  }

  // ../src/systems/sys_audio_source.ts
  var QUERY3 = 4 /* AudioSource */ | 8388608 /* Transform */;

  // ../src/components/com_camera.ts
  function camera_canvas(projection, clear_color = [0.9, 0.9, 0.9, 1], clear_mask = GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT) {
    return (game2, entity) => {
      game2.World.Signature[entity] |= 8 /* Camera */;
      game2.World.Camera[entity] = {
        Kind: 0 /* Canvas */,
        Projection: projection,
        View: create(),
        Pv: create(),
        Position: [0, 0, 0],
        FogColor: clear_color,
        FogDistance: projection.Far,
        ClearColor: clear_color,
        ClearMask: clear_mask
      };
    };
  }
  function camera_target(target, projection, clear_color = [0, 0, 0, 1], clear_mask = GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT) {
    return (game2, entity) => {
      game2.World.Signature[entity] |= 8 /* Camera */;
      game2.World.Camera[entity] = {
        Kind: 1 /* Target */,
        Target: target,
        Projection: projection,
        View: create(),
        Pv: create(),
        Position: [0, 0, 0],
        FogColor: clear_color,
        FogDistance: projection.Far,
        ClearColor: clear_color,
        ClearMask: clear_mask
      };
    };
  }

  // ../src/systems/sys_camera.ts
  var QUERY4 = 8388608 /* Transform */ | 8 /* Camera */;
  function sys_camera(game2, delta) {
    for (let i = 0; i < game2.World.Signature.length; i++) {
      if ((game2.World.Signature[i] & QUERY4) === QUERY4) {
        let camera = game2.World.Camera[i];
        switch (camera.Kind) {
          case 0 /* Canvas */:
          case 1 /* Target */:
            update_camera(game2, i, camera);
            game2.Cameras.push(i);
            break;
        }
      }
    }
  }
  function update_camera(game2, entity, camera) {
    let transform2 = game2.World.Transform[entity];
    let projection = camera.Projection;
    copy2(camera.View, transform2.Self);
    multiply2(camera.Pv, projection.Projection, camera.View);
    get_translation(camera.Position, transform2.World);
  }

  // ../common/aabb.ts
  var BOX = [
    [0.5, 0.5, 0.5],
    [0.5, 0.5, -0.5],
    [-0.5, 0.5, -0.5],
    [-0.5, 0.5, 0.5],
    [0.5, -0.5, 0.5],
    [0.5, -0.5, -0.5],
    [-0.5, -0.5, -0.5],
    [-0.5, -0.5, 0.5]
  ];
  function compute_aabb(world, aabb) {
    get_translation(aabb.Center, world);
    let min_x, min_y, min_z, max_x, max_y, max_z;
    min_x = max_x = aabb.Center[0];
    min_y = max_y = aabb.Center[1];
    min_z = max_z = aabb.Center[2];
    let world_vertex = [0, 0, 0];
    for (let i = 0; i < 8; i++) {
      let bb_vertex = BOX[i];
      world_vertex[0] = bb_vertex[0] * aabb.Size[0];
      world_vertex[1] = bb_vertex[1] * aabb.Size[1];
      world_vertex[2] = bb_vertex[2] * aabb.Size[2];
      transform_position(world_vertex, world_vertex, world);
      if (world_vertex[0] < min_x) {
        min_x = world_vertex[0];
      }
      if (world_vertex[0] > max_x) {
        max_x = world_vertex[0];
      }
      if (world_vertex[1] < min_y) {
        min_y = world_vertex[1];
      }
      if (world_vertex[1] > max_y) {
        max_y = world_vertex[1];
      }
      if (world_vertex[2] < min_z) {
        min_z = world_vertex[2];
      }
      if (world_vertex[2] > max_z) {
        max_z = world_vertex[2];
      }
    }
    aabb.Min = [min_x, min_y, min_z];
    aabb.Max = [max_x, max_y, max_z];
    aabb.Half[0] = (max_x - min_x) / 2;
    aabb.Half[1] = (max_y - min_y) / 2;
    aabb.Half[2] = (max_z - min_z) / 2;
  }
  function penetrate_aabb(a2, b) {
    let distance_x = a2.Center[0] - b.Center[0];
    let penetration_x = a2.Half[0] + b.Half[0] - Math.abs(distance_x);
    let distance_y = a2.Center[1] - b.Center[1];
    let penetration_y = a2.Half[1] + b.Half[1] - Math.abs(distance_y);
    let distance_z = a2.Center[2] - b.Center[2];
    let penetration_z = a2.Half[2] + b.Half[2] - Math.abs(distance_z);
    if (penetration_x < penetration_y && penetration_x < penetration_z) {
      return [penetration_x * Math.sign(distance_x), 0, 0];
    } else if (penetration_y < penetration_z) {
      return [0, penetration_y * Math.sign(distance_y), 0];
    } else {
      return [0, 0, penetration_z * Math.sign(distance_z)];
    }
  }
  function intersect_aabb(a2, b) {
    return a2.Min[0] < b.Max[0] && a2.Max[0] > b.Min[0] && a2.Min[1] < b.Max[1] && a2.Max[1] > b.Min[1] && a2.Min[2] < b.Max[2] && a2.Max[2] > b.Min[2];
  }

  // ../src/systems/sys_collide.ts
  var QUERY5 = 8388608 /* Transform */ | 32 /* Collide */;
  function sys_collide(game2, delta) {
    let static_colliders = [];
    let dynamic_colliders = [];
    for (let i = 0; i < game2.World.Signature.length; i++) {
      if ((game2.World.Signature[i] & QUERY5) === QUERY5) {
        let transform2 = game2.World.Transform[i];
        let collider = game2.World.Collide[i];
        collider.Collisions = [];
        if (collider.New) {
          collider.New = false;
          compute_aabb(transform2.World, collider);
        } else if (collider.Dynamic) {
          compute_aabb(transform2.World, collider);
          dynamic_colliders.push(collider);
        } else {
          static_colliders.push(collider);
        }
      }
    }
    for (let i = 0; i < dynamic_colliders.length; i++) {
      check_collisions(dynamic_colliders[i], static_colliders, static_colliders.length);
      check_collisions(dynamic_colliders[i], dynamic_colliders, i);
    }
  }
  function check_collisions(collider, colliders, length2) {
    for (let i = 0; i < length2; i++) {
      let other = colliders[i];
      let collider_can_intersect = collider.Mask & other.Layers;
      let other_can_intersect = other.Mask & collider.Layers;
      if (collider_can_intersect || other_can_intersect) {
        if (intersect_aabb(collider, other)) {
          let hit = penetrate_aabb(collider, other);
          if (collider_can_intersect) {
            collider.Collisions.push({
              Other: other.EntityId,
              Hit: hit
            });
          }
          if (other_can_intersect) {
            other.Collisions.push({
              Other: collider.EntityId,
              Hit: negate([0, 0, 0], hit)
            });
          }
        }
      }
    }
  }

  // ../src/systems/sys_control_always.ts
  var QUERY6 = 64 /* ControlAlways */ | 32768 /* Move */;
  function sys_control_always(game2, delta) {
    for (let i = 0; i < game2.World.Signature.length; i++) {
      if ((game2.World.Signature[i] & QUERY6) === QUERY6) {
        update2(game2, i);
      }
    }
  }
  function update2(game2, entity) {
    let control = game2.World.ControlAlways[entity];
    let move2 = game2.World.Move[entity];
    if (control.Direction) {
      add(move2.Direction, move2.Direction, control.Direction);
    }
    if (control.Rotation) {
      multiply(move2.LocalRotation, move2.LocalRotation, control.Rotation);
    }
    if (control.Animation) {
      for (let ent of query_down(game2.World, entity, 1 /* Animate */)) {
        let animate2 = game2.World.Animate[ent];
        animate2.Trigger = control.Animation;
      }
    }
  }

  // ../src/sounds/snd_jump.ts
  var snd_jump = {
    Kind: 1 /* Synth */,
    Tracks: [
      {
        Instrument: [
          8,
          false,
          7,
          8,
          false,
          false,
          8,
          8,
          [
            ["triangle", 8, 8, 8, 6, 8, false, true, 2, 3, 7],
            ["square", 3, 1, 2, 2, 8, false, false, 0, 0, 0]
          ]
        ],
        Notes: [72]
      }
    ],
    Exit: 0.4
  };

  // ../src/systems/sys_control_jump.ts
  var QUERY7 = 128 /* ControlPlayer */ | 262144 /* RigidBody */;
  function sys_control_jump(game2, delta) {
    for (let i = 0; i < game2.World.Signature.length; i++) {
      if ((game2.World.Signature[i] & QUERY7) === QUERY7) {
        update3(game2, i);
      }
    }
  }
  function update3(game2, entity) {
    let control = game2.World.ControlPlayer[entity];
    let rigid_body2 = game2.World.RigidBody[entity];
    if (control.Jump) {
      if (game2.InputState["ArrowUp"] || game2.InputDelta["Touch0"] === -1 && game2.InputDistance["Touch0"] < 10) {
        if (!rigid_body2.IsAirborne) {
          rigid_body2.Acceleration[1] += 200;
          for (let ent of query_down(game2.World, entity, 1 /* Animate */)) {
            game2.World.Animate[ent].Trigger = "jump";
          }
          let audio = game2.World.AudioSource[entity];
          audio.Trigger = snd_jump;
        }
      }
    }
  }

  // ../src/systems/sys_control_keyboard.ts
  var QUERY8 = 32768 /* Move */ | 128 /* ControlPlayer */;
  function sys_control_keyboard(game2, delta) {
    for (let i = 0; i < game2.World.Signature.length; i++) {
      if ((game2.World.Signature[i] & QUERY8) === QUERY8) {
        update4(game2, i);
      }
    }
  }
  function update4(game2, entity) {
    let control = game2.World.ControlPlayer[entity];
    if (control.Yaw) {
      let move2 = game2.World.Move[entity];
      if (game2.InputState["ArrowLeft"]) {
        multiply(move2.LocalRotation, move2.LocalRotation, [0, 1, 0, 0]);
      }
      if (game2.InputState["ArrowRight"]) {
        multiply(move2.LocalRotation, move2.LocalRotation, [0, -1, 0, 0]);
      }
    }
    if (control.Pitch) {
      let transform2 = game2.World.Transform[entity];
      let move2 = game2.World.Move[entity];
      let current_pitch = get_pitch(transform2.Rotation);
      if (game2.InputState["ArrowDown"] && current_pitch > control.MinPitch) {
        multiply(move2.SelfRotation, move2.SelfRotation, [-1, 0, 0, 0]);
      } else if (current_pitch < control.MaxPitch) {
        multiply(move2.SelfRotation, move2.SelfRotation, [1, 0, 0, 0]);
      }
    }
  }

  // ../src/systems/sys_control_touch_move.ts
  var QUERY9 = 32768 /* Move */ | 128 /* ControlPlayer */;
  var AXIS_X = [1, 0, 0];
  var DEAD_ZONE = 0.1;
  var TOUCH_SENSITIVITY = 10;
  var joystick = [0, 0];
  var rotation = [0, 0, 0, 0];
  function sys_control_touch_move(game2, delta) {
    if (game2.InputDelta["Touch0"] === 1) {
      joystick[0] = game2.InputState["Touch0X"];
      joystick[1] = game2.InputState["Touch0Y"];
    }
    for (let i = 0; i < game2.World.Signature.length; i++) {
      if ((game2.World.Signature[i] & QUERY9) === QUERY9) {
        update5(game2, i);
      }
    }
  }
  function update5(game2, entity) {
    let transform2 = game2.World.Transform[entity];
    let control = game2.World.ControlPlayer[entity];
    let move2 = game2.World.Move[entity];
    if (control.Yaw && game2.InputState["Touch0"] === 1) {
      let divisor = Math.min(game2.ViewportWidth, game2.ViewportHeight) / 4;
      let amount_x = (game2.InputState["Touch0X"] - joystick[0]) / divisor;
      if (Math.abs(amount_x) > DEAD_ZONE) {
        multiply(move2.LocalRotation, move2.LocalRotation, [0, -clamp(-1, 1, amount_x), 0, 0]);
      }
    }
    if (control.Pitch && game2.InputDelta["Touch0Y"]) {
      let current_pitch = get_pitch(transform2.Rotation);
      let min_amount = control.MinPitch - current_pitch;
      let max_amount = control.MaxPitch - current_pitch;
      let amount = clamp(min_amount, max_amount, game2.InputDelta["Touch0Y"] * control.Pitch * TOUCH_SENSITIVITY);
      from_axis(rotation, AXIS_X, amount * DEG_TO_RAD);
      multiply(transform2.Rotation, transform2.Rotation, rotation);
      game2.World.Signature[entity] |= 512 /* Dirty */;
    }
  }

  // ../src/systems/sys_cull.ts
  var QUERY10 = 8388608 /* Transform */ | 256 /* Cull */;
  function sys_cull(game2, delta) {
    let camera_entity = game2.Cameras[0];
    let pv = game2.World.Camera[camera_entity].Pv;
    for (let i = 0; i < game2.World.Signature.length; i++) {
      if ((game2.World.Signature[i] & QUERY10) === QUERY10) {
        update6(game2, i, pv);
      }
    }
  }
  var position = [0, 0, 0];
  function update6(game2, entity, pv) {
    let cull2 = game2.World.Cull[entity];
    let transform2 = game2.World.Transform[entity];
    get_translation(position, transform2.World);
    transform_position(position, position, pv);
    if (Math.abs(position[2]) > 1) {
      game2.World.Signature[entity] &= ~cull2.Mask;
    } else {
      game2.World.Signature[entity] |= cull2.Mask;
    }
  }

  // ../src/components/com_render.ts
  function render_colored_shadows(material, mesh, diffuse_color) {
    return (game2, entity) => {
      game2.World.Signature[entity] |= 131072 /* Render */;
      game2.World.Render[entity] = {
        Kind: 2 /* ColoredShadows */,
        Material: material,
        Mesh: mesh,
        Phase: diffuse_color[3] < 1 ? 1 /* Transparent */ : 0 /* Opaque */,
        FrontFace: GL_CW,
        DiffuseColor: diffuse_color
      };
    };
  }
  var FLOATS_PER_PARTICLE = 8;

  // ../src/components/com_transform.ts
  function transform(translation = [0, 0, 0], rotation2 = [0, 0, 0, 1], scale2 = [1, 1, 1]) {
    return (game2, entity) => {
      game2.World.Signature[entity] |= 8388608 /* Transform */ | 512 /* Dirty */;
      game2.World.Transform[entity] = {
        World: create(),
        Self: create(),
        Translation: translation,
        Rotation: rotation2,
        Scale: scale2,
        Gyroscope: false
      };
    };
  }

  // ../src/components/com_draw.ts
  function draw_image(Width, Height) {
    return (game2, entity) => {
      game2.World.Signature[entity] |= 1024 /* Draw */;
      game2.World.Draw[entity] = {
        Kind: 2 /* Image */,
        Width,
        Height
      };
    };
  }

  // ../src/systems/sys_draw.ts
  var QUERY11 = 8388608 /* Transform */ | 1024 /* Draw */;

  // ../src/systems/sys_lifespan.ts
  var QUERY12 = 4096 /* Lifespan */;
  function sys_lifespan(game2, delta) {
    for (let i = 0; i < game2.World.Signature.length; i++) {
      if ((game2.World.Signature[i] & QUERY12) == QUERY12) {
        update7(game2, i, delta);
      }
    }
  }
  function update7(game2, entity, delta) {
    let lifespan2 = game2.World.Lifespan[entity];
    lifespan2.Remaining -= delta;
    if (lifespan2.Remaining < 0) {
      if (lifespan2.Action) {
        dispatch(game2, lifespan2.Action, entity);
      }
      destroy_all(game2.World, entity);
    }
  }

  // ../src/systems/sys_mimic.ts
  var QUERY13 = 8388608 /* Transform */ | 16384 /* Mimic */;
  function sys_mimic(game2, delta) {
    for (let ent = 0; ent < game2.World.Signature.length; ent++) {
      if ((game2.World.Signature[ent] & QUERY13) === QUERY13) {
        let follower_transform = game2.World.Transform[ent];
        let follower_mimic = game2.World.Mimic[ent];
        let target_transform = game2.World.Transform[follower_mimic.Target];
        let target_world_position = get_translation([0, 0, 0], target_transform.World);
        let target_world_rotation = get_rotation([0, 0, 0, 0], target_transform.World);
        lerp(follower_transform.Translation, follower_transform.Translation, target_world_position, follower_mimic.Stiffness);
        slerp(follower_transform.Rotation, follower_transform.Rotation, target_world_rotation, follower_mimic.Stiffness);
        game2.World.Signature[ent] |= 512 /* Dirty */;
      }
    }
  }

  // ../src/systems/sys_move.ts
  var QUERY14 = 8388608 /* Transform */ | 32768 /* Move */;
  var NO_ROTATION = [0, 0, 0, 1];
  function sys_move(game2, delta) {
    for (let i = 0; i < game2.World.Signature.length; i++) {
      if ((game2.World.Signature[i] & QUERY14) === QUERY14) {
        update8(game2, i, delta);
      }
    }
  }
  function update8(game2, entity, delta) {
    let transform2 = game2.World.Transform[entity];
    let move2 = game2.World.Move[entity];
    if (move2.Direction[0] !== 0 || move2.Direction[1] !== 0 || move2.Direction[2] !== 0) {
      let amount = Math.min(1, length(move2.Direction));
      transform_direction(move2.Direction, move2.Direction, transform2.World);
      if (transform2.Parent !== void 0) {
        let parent = game2.World.Transform[transform2.Parent];
        transform_direction(move2.Direction, move2.Direction, parent.Self);
      }
      normalize(move2.Direction, move2.Direction);
      scale(move2.Direction, move2.Direction, amount * move2.MoveSpeed * delta);
      add(transform2.Translation, transform2.Translation, move2.Direction);
      game2.World.Signature[entity] |= 512 /* Dirty */;
      set(move2.Direction, 0, 0, 0);
    }
    if (move2.LocalRotation[3] < 1) {
      let t = Math.min(1, move2.RotationSpeed / Math.PI * delta);
      slerp(move2.LocalRotation, NO_ROTATION, move2.LocalRotation, t);
      multiply(transform2.Rotation, move2.LocalRotation, transform2.Rotation);
      game2.World.Signature[entity] |= 512 /* Dirty */;
      set2(move2.LocalRotation, 0, 0, 0, 1);
    }
    if (move2.SelfRotation[3] < 1) {
      let t = Math.min(1, move2.RotationSpeed / Math.PI * delta);
      slerp(move2.SelfRotation, NO_ROTATION, move2.SelfRotation, t);
      multiply(transform2.Rotation, transform2.Rotation, move2.SelfRotation);
      game2.World.Signature[entity] |= 512 /* Dirty */;
      set2(move2.SelfRotation, 0, 0, 0, 1);
    }
  }

  // ../src/systems/sys_particles.ts
  var QUERY15 = 8388608 /* Transform */ | 2048 /* EmitParticles */;

  // ../src/components/com_rigid_body.ts
  function rigid_body(kind, bounciness = 0.5) {
    return (game2, entity) => {
      game2.World.Signature[entity] |= 262144 /* RigidBody */;
      game2.World.RigidBody[entity] = {
        Kind: kind,
        ColliderId: entity,
        Bounciness: bounciness,
        Acceleration: [0, 0, 0],
        VelocityIntegrated: [0, 0, 0],
        VelocityResolved: [0, 0, 0],
        LastPosition: [0, 0, 0],
        IsAirborne: false
      };
    };
  }

  // ../src/systems/sys_physics_integrate.ts
  var QUERY16 = 8388608 /* Transform */ | 262144 /* RigidBody */;
  var GRAVITY = -9.81;
  function sys_physics_integrate(game2, delta) {
    for (let i = 0; i < game2.World.Signature.length; i++) {
      if ((game2.World.Signature[i] & QUERY16) === QUERY16) {
        update9(game2, i, delta);
      }
    }
  }
  function update9(game2, entity, delta) {
    let transform2 = game2.World.Transform[entity];
    let rigid_body2 = game2.World.RigidBody[entity];
    if (rigid_body2.Kind === 1 /* Dynamic */) {
      copy(rigid_body2.VelocityIntegrated, rigid_body2.VelocityResolved);
      scale(rigid_body2.Acceleration, rigid_body2.Acceleration, delta);
      add(rigid_body2.VelocityIntegrated, rigid_body2.VelocityIntegrated, rigid_body2.Acceleration);
      rigid_body2.VelocityIntegrated[1] += GRAVITY * delta;
      let vel_delta = [0, 0, 0];
      scale(vel_delta, rigid_body2.VelocityIntegrated, delta);
      add(transform2.Translation, transform2.Translation, vel_delta);
      game2.World.Signature[entity] |= 512 /* Dirty */;
      set(rigid_body2.Acceleration, 0, 0, 0);
    }
  }

  // ../src/systems/sys_physics_kinematic.ts
  var QUERY17 = 8388608 /* Transform */ | 262144 /* RigidBody */;
  function sys_physics_kinematic(game2, delta) {
    for (let i = 0; i < game2.World.Signature.length; i++) {
      if ((game2.World.Signature[i] & QUERY17) === QUERY17) {
        update10(game2, i, delta);
      }
    }
  }
  var current_position = [0, 0, 0];
  var movement_delta = [0, 0, 0];
  function update10(game2, entity, delta) {
    let transform2 = game2.World.Transform[entity];
    let rigid_body2 = game2.World.RigidBody[entity];
    get_translation(current_position, transform2.World);
    if (rigid_body2.Kind === 2 /* Kinematic */) {
      subtract(movement_delta, current_position, rigid_body2.LastPosition);
      scale(rigid_body2.VelocityIntegrated, movement_delta, 1 / delta);
    }
    copy(rigid_body2.LastPosition, current_position);
  }

  // ../src/systems/sys_physics_resolve.ts
  var QUERY18 = 8388608 /* Transform */ | 32 /* Collide */ | 262144 /* RigidBody */;
  function sys_physics_resolve(game2, delta) {
    for (let i = 0; i < game2.World.Signature.length; i++) {
      if ((game2.World.Signature[i] & QUERY18) === QUERY18) {
        update11(game2, i);
      }
    }
  }
  var a = [0, 0, 0];
  function update11(game2, entity) {
    let transform2 = game2.World.Transform[entity];
    let rigid_body2 = game2.World.RigidBody[entity];
    let collide2 = game2.World.Collide[rigid_body2.ColliderId];
    if (rigid_body2.Kind === 1 /* Dynamic */) {
      rigid_body2.IsAirborne = true;
      let has_collision = false;
      for (let i = 0; i < collide2.Collisions.length; i++) {
        let collision = collide2.Collisions[i];
        if (game2.World.Signature[collision.Other] & 262144 /* RigidBody */) {
          has_collision = true;
          add(transform2.Translation, transform2.Translation, collision.Hit);
          game2.World.Signature[entity] |= 512 /* Dirty */;
          let other_body = game2.World.RigidBody[collision.Other];
          switch (other_body.Kind) {
            case 0 /* Static */:
              normalize(a, collision.Hit);
              scale(a, a, -2 * dot(rigid_body2.VelocityIntegrated, a));
              add(rigid_body2.VelocityResolved, rigid_body2.VelocityIntegrated, a);
              break;
            case 1 /* Dynamic */:
            case 2 /* Kinematic */:
              copy(rigid_body2.VelocityResolved, other_body.VelocityIntegrated);
              break;
          }
          scale(rigid_body2.VelocityResolved, rigid_body2.VelocityResolved, rigid_body2.Bounciness);
          if (collision.Hit[1] > 0 && rigid_body2.VelocityResolved[1] < 1) {
            rigid_body2.VelocityResolved[1] = 0;
            rigid_body2.IsAirborne = false;
          }
        }
      }
      if (!has_collision) {
        copy(rigid_body2.VelocityResolved, rigid_body2.VelocityIntegrated);
      }
    } else if (rigid_body2.Kind === 2 /* Kinematic */) {
      copy(rigid_body2.VelocityResolved, rigid_body2.VelocityIntegrated);
    }
  }

  // ../src/components/com_task.ts
  function task_when(predicate, on_done) {
    return (game2, entity) => {
      game2.World.Signature[entity] |= 2097152 /* Task */;
      game2.World.Task[entity] = {
        Kind: 0 /* When */,
        Predicate: predicate,
        OnDone: on_done
      };
    };
  }
  function task_timeout(duration, on_done) {
    return (game2, entity) => {
      game2.World.Signature[entity] |= 2097152 /* Task */;
      game2.World.Task[entity] = {
        Kind: 1 /* Timeout */,
        Remaining: duration,
        OnDone: on_done
      };
    };
  }

  // ../src/systems/sys_poll.ts
  var QUERY19 = 2097152 /* Task */;
  function sys_poll(game2, delta) {
    let tasks_to_complete = [];
    for (let i = 0; i < game2.World.Signature.length; i++) {
      if ((game2.World.Signature[i] & QUERY19) === QUERY19) {
        if (has_blocking_dependencies(game2.World, i)) {
          continue;
        }
        let task = game2.World.Task[i];
        switch (task.Kind) {
          case 0 /* When */: {
            if (task.Predicate(i)) {
              tasks_to_complete.push(i);
            }
            break;
          }
          case 1 /* Timeout */: {
            task.Remaining -= delta;
            if (task.Remaining < 0) {
              tasks_to_complete.push(i);
            }
            break;
          }
        }
      }
    }
    for (let entity of tasks_to_complete) {
      let task = game2.World.Task[entity];
      if (task.OnDone) {
        task.OnDone(entity);
      }
      game2.World.Signature[entity] &= ~2097152 /* Task */;
      if (game2.World.Signature[entity] === 0 /* None */) {
        game2.World.DestroyEntity(entity);
      }
      delete game2.World.Task[entity];
    }
  }
  function has_blocking_dependencies(world, entity) {
    if (world.Signature[entity] & 16 /* Children */) {
      let children2 = world.Children[entity];
      for (let child of children2.Children) {
        if (world.Signature[child] & 2097152 /* Task */) {
          return true;
        }
      }
    }
    return false;
  }

  // ../src/systems/sys_render_depth.ts
  var QUERY20 = 8388608 /* Transform */ | 131072 /* Render */;
  function sys_render_depth(game2, delta) {
    for (let camera_entity of game2.Cameras) {
      let camera = game2.World.Camera[camera_entity];
      if (camera.Kind === 1 /* Target */) {
        if (camera.Target.Kind === 3 /* Depth */) {
          game2.Gl.bindFramebuffer(GL_FRAMEBUFFER, camera.Target.Framebuffer);
          game2.Gl.viewport(0, 0, camera.Target.Width, camera.Target.Height);
          game2.Gl.clearColor(...camera.ClearColor);
          game2.Gl.clear(camera.ClearMask);
          render_all(game2, camera);
        }
      }
    }
  }
  function render_all(game2, eye) {
    let material = game2.MaterialDepth;
    let current_front_face = null;
    game2.Gl.useProgram(material.Program);
    game2.Gl.uniformMatrix4fv(material.Locations.Pv, false, eye.Pv);
    for (let ent = 0; ent < game2.World.Signature.length; ent++) {
      if ((game2.World.Signature[ent] & QUERY20) === QUERY20) {
        let transform2 = game2.World.Transform[ent];
        let render = game2.World.Render[ent];
        switch (render.Kind) {
          case 7 /* Vertices */:
          case 8 /* ParticlesColored */:
          case 9 /* ParticlesTextured */:
            continue;
        }
        if (render.FrontFace !== current_front_face) {
          current_front_face = render.FrontFace;
          game2.Gl.frontFace(render.FrontFace);
        }
        game2.Gl.uniformMatrix4fv(material.Locations.World, false, transform2.World);
        game2.Gl.bindVertexArray(render.Mesh.Vao);
        game2.Gl.drawElements(material.Mode, render.Mesh.IndexCount, GL_UNSIGNED_SHORT, 0);
        game2.Gl.bindVertexArray(null);
      }
    }
  }

  // ../src/systems/sys_render_forward.ts
  var QUERY21 = 8388608 /* Transform */ | 131072 /* Render */;
  function sys_render_forward(game2, delta) {
    for (let camera_entity of game2.Cameras) {
      let camera = game2.World.Camera[camera_entity];
      switch (camera.Kind) {
        case 0 /* Canvas */:
          game2.Gl.bindFramebuffer(GL_FRAMEBUFFER, null);
          game2.Gl.viewport(0, 0, game2.ViewportWidth, game2.ViewportHeight);
          game2.Gl.clearColor(...camera.ClearColor);
          game2.Gl.clear(camera.ClearMask);
          render_all2(game2, camera);
          break;
        case 1 /* Target */:
          if (camera.Target.Kind === 0 /* Forward */) {
            game2.Gl.bindFramebuffer(GL_FRAMEBUFFER, camera.Target.Framebuffer);
            game2.Gl.viewport(0, 0, camera.Target.Width, camera.Target.Height);
            game2.Gl.clearColor(...camera.ClearColor);
            game2.Gl.clear(camera.ClearMask);
            render_all2(game2, camera, camera.Target.ColorTexture);
          }
          break;
      }
    }
  }
  function render_all2(game2, eye, current_target) {
    let current_material = null;
    let current_front_face = null;
    let transparent_entities = [];
    for (let ent = 0; ent < game2.World.Signature.length; ent++) {
      if ((game2.World.Signature[ent] & QUERY21) === QUERY21) {
        let render = game2.World.Render[ent];
        if (render.Phase === 1 /* Transparent */) {
          transparent_entities.push(ent);
          continue;
        }
        if (render.Material !== current_material) {
          current_material = render.Material;
          use_material(game2, render, eye);
        }
        if (render.FrontFace !== current_front_face) {
          current_front_face = render.FrontFace;
          game2.Gl.frontFace(render.FrontFace);
        }
        draw_entity(game2, ent, current_target);
      }
    }
    transparent_entities.sort((a2, b) => {
      let transform_a = game2.World.Transform[a2];
      let transform_b = game2.World.Transform[b];
      return distance_squared_from_point(transform_b.World, eye.Position) - distance_squared_from_point(transform_a.World, eye.Position);
    });
    game2.Gl.enable(GL_BLEND);
    for (let i = 0; i < transparent_entities.length; i++) {
      let ent = transparent_entities[i];
      let render = game2.World.Render[ent];
      if (render.Material !== current_material) {
        current_material = render.Material;
        use_material(game2, render, eye);
      }
      if (render.FrontFace !== current_front_face) {
        current_front_face = render.FrontFace;
        game2.Gl.frontFace(render.FrontFace);
      }
      draw_entity(game2, ent, current_target);
    }
    game2.Gl.disable(GL_BLEND);
  }
  function use_material(game2, render, eye) {
    switch (render.Kind) {
      case 0 /* ColoredUnlit */:
        game2.Gl.useProgram(render.Material.Program);
        game2.Gl.uniformMatrix4fv(render.Material.Locations.Pv, false, eye.Pv);
        break;
      case 1 /* ColoredShaded */:
        game2.Gl.useProgram(render.Material.Program);
        game2.Gl.uniformMatrix4fv(render.Material.Locations.Pv, false, eye.Pv);
        game2.Gl.uniform3fv(render.Material.Locations.Eye, eye.Position);
        game2.Gl.uniform4fv(render.Material.Locations.LightPositions, game2.LightPositions);
        game2.Gl.uniform4fv(render.Material.Locations.LightDetails, game2.LightDetails);
        break;
      case 2 /* ColoredShadows */:
        game2.Gl.useProgram(render.Material.Program);
        game2.Gl.uniformMatrix4fv(render.Material.Locations.Pv, false, eye.Pv);
        game2.Gl.activeTexture(GL_TEXTURE0);
        game2.Gl.bindTexture(GL_TEXTURE_2D, game2.Targets.Sun.DepthTexture);
        game2.Gl.uniform1i(render.Material.Locations.ShadowMap, 0);
        let light_entity = first_having(game2.World, 8 /* Camera */ | 8192 /* Light */);
        if (light_entity) {
          let light_camera = game2.World.Camera[light_entity];
          if (light_camera.Kind === 2 /* Xr */) {
            throw new Error("XR cameras cannot be shadow sources.");
          }
          game2.Gl.uniformMatrix4fv(render.Material.Locations.ShadowSpace, false, light_camera.Pv);
        }
        break;
      case 4 /* TexturedUnlit */:
        game2.Gl.useProgram(render.Material.Program);
        game2.Gl.uniformMatrix4fv(render.Material.Locations.Pv, false, eye.Pv);
        break;
      case 5 /* TexturedShaded */:
        game2.Gl.useProgram(render.Material.Program);
        game2.Gl.uniformMatrix4fv(render.Material.Locations.Pv, false, eye.Pv);
        game2.Gl.uniform3fv(render.Material.Locations.Eye, eye.Position);
        game2.Gl.uniform4fv(render.Material.Locations.LightPositions, game2.LightPositions);
        game2.Gl.uniform4fv(render.Material.Locations.LightDetails, game2.LightDetails);
        break;
      case 6 /* MappedShaded */:
        game2.Gl.useProgram(render.Material.Program);
        game2.Gl.uniformMatrix4fv(render.Material.Locations.Pv, false, eye.Pv);
        game2.Gl.uniform3fv(render.Material.Locations.Eye, eye.Position);
        game2.Gl.uniform4fv(render.Material.Locations.LightPositions, game2.LightPositions);
        game2.Gl.uniform4fv(render.Material.Locations.LightDetails, game2.LightDetails);
        break;
      case 7 /* Vertices */:
      case 8 /* ParticlesColored */:
      case 9 /* ParticlesTextured */:
        game2.Gl.useProgram(render.Material.Program);
        game2.Gl.uniformMatrix4fv(render.Material.Locations.Pv, false, eye.Pv);
        break;
    }
  }
  function draw_entity(game2, entity, current_target) {
    let transform2 = game2.World.Transform[entity];
    let render = game2.World.Render[entity];
    switch (render.Kind) {
      case 0 /* ColoredUnlit */:
        game2.Gl.uniformMatrix4fv(render.Material.Locations.World, false, transform2.World);
        game2.Gl.uniform4fv(render.Material.Locations.Color, render.Color);
        game2.Gl.bindVertexArray(render.Mesh.Vao);
        game2.Gl.drawElements(render.Material.Mode, render.Mesh.IndexCount, GL_UNSIGNED_SHORT, 0);
        game2.Gl.bindVertexArray(null);
        break;
      case 1 /* ColoredShaded */:
        game2.Gl.uniformMatrix4fv(render.Material.Locations.World, false, transform2.World);
        game2.Gl.uniformMatrix4fv(render.Material.Locations.Self, false, transform2.Self);
        game2.Gl.uniform4fv(render.Material.Locations.DiffuseColor, render.DiffuseColor);
        game2.Gl.uniform4fv(render.Material.Locations.SpecularColor, render.SpecularColor);
        game2.Gl.uniform4fv(render.Material.Locations.EmissiveColor, render.EmissiveColor);
        game2.Gl.bindVertexArray(render.Mesh.Vao);
        game2.Gl.drawElements(render.Material.Mode, render.Mesh.IndexCount, GL_UNSIGNED_SHORT, 0);
        game2.Gl.bindVertexArray(null);
        break;
      case 2 /* ColoredShadows */:
        game2.Gl.uniformMatrix4fv(render.Material.Locations.World, false, transform2.World);
        game2.Gl.uniform4fv(render.Material.Locations.Color, render.DiffuseColor);
        game2.Gl.bindVertexArray(render.Mesh.Vao);
        game2.Gl.drawElements(render.Material.Mode, render.Mesh.IndexCount, GL_UNSIGNED_SHORT, 0);
        game2.Gl.bindVertexArray(null);
        break;
      case 4 /* TexturedUnlit */:
        if (render.Texture === current_target) {
          break;
        }
        game2.Gl.uniformMatrix4fv(render.Material.Locations.World, false, transform2.World);
        game2.Gl.uniform4fv(render.Material.Locations.Color, render.Color);
        game2.Gl.activeTexture(GL_TEXTURE0);
        game2.Gl.bindTexture(GL_TEXTURE_2D, render.Texture);
        game2.Gl.uniform1i(render.Material.Locations.TextureMap, 0);
        game2.Gl.bindVertexArray(render.Mesh.Vao);
        game2.Gl.drawElements(render.Material.Mode, render.Mesh.IndexCount, GL_UNSIGNED_SHORT, 0);
        game2.Gl.bindVertexArray(null);
        break;
      case 5 /* TexturedShaded */:
        if (render.Texture === current_target) {
          break;
        }
        game2.Gl.uniformMatrix4fv(render.Material.Locations.World, false, transform2.World);
        game2.Gl.uniformMatrix4fv(render.Material.Locations.Self, false, transform2.Self);
        game2.Gl.uniform4fv(render.Material.Locations.DiffuseColor, render.DiffuseColor);
        game2.Gl.uniform4fv(render.Material.Locations.SpecularColor, render.SpecularColor);
        game2.Gl.uniform4fv(render.Material.Locations.EmissiveColor, render.EmissiveColor);
        game2.Gl.activeTexture(GL_TEXTURE0);
        game2.Gl.bindTexture(GL_TEXTURE_2D, render.Texture);
        game2.Gl.uniform1i(render.Material.Locations.DiffuseMap, 0);
        game2.Gl.bindVertexArray(render.Mesh.Vao);
        game2.Gl.drawElements(render.Material.Mode, render.Mesh.IndexCount, GL_UNSIGNED_SHORT, 0);
        game2.Gl.bindVertexArray(null);
        break;
      case 6 /* MappedShaded */:
        if (render.DiffuseMap === current_target) {
          break;
        }
        game2.Gl.uniformMatrix4fv(render.Material.Locations.World, false, transform2.World);
        game2.Gl.uniformMatrix4fv(render.Material.Locations.Self, false, transform2.Self);
        game2.Gl.uniform4fv(render.Material.Locations.DiffuseColor, render.DiffuseColor);
        game2.Gl.activeTexture(GL_TEXTURE1);
        game2.Gl.bindTexture(GL_TEXTURE_2D, render.DiffuseMap);
        game2.Gl.uniform1i(render.Material.Locations.DiffuseMap, 1);
        game2.Gl.activeTexture(GL_TEXTURE2);
        game2.Gl.bindTexture(GL_TEXTURE_2D, render.NormalMap);
        game2.Gl.uniform1i(render.Material.Locations.NormalMap, 2);
        game2.Gl.activeTexture(GL_TEXTURE3);
        game2.Gl.bindTexture(GL_TEXTURE_2D, render.RoughnessMap);
        game2.Gl.uniform1i(render.Material.Locations.RoughnessMap, 3);
        game2.Gl.bindVertexArray(render.Mesh.Vao);
        game2.Gl.drawElements(render.Material.Mode, render.Mesh.IndexCount, GL_UNSIGNED_SHORT, 0);
        game2.Gl.bindVertexArray(null);
        break;
      case 7 /* Vertices */:
        game2.Gl.uniformMatrix4fv(render.Material.Locations.World, false, transform2.World);
        game2.Gl.uniform4fv(render.Material.Locations.Color, render.Color);
        game2.Gl.bindBuffer(GL_ARRAY_BUFFER, render.VertexBuffer);
        game2.Gl.enableVertexAttribArray(0 /* Position */);
        game2.Gl.vertexAttribPointer(0 /* Position */, 3, GL_FLOAT, false, 0, 0);
        game2.Gl.drawArrays(render.Material.Mode, 0, render.IndexCount);
        break;
      case 8 /* ParticlesColored */: {
        let emitter = game2.World.EmitParticles[entity];
        game2.Gl.uniform4fv(render.Material.Locations.ColorStart, render.ColorStart);
        game2.Gl.uniform4fv(render.Material.Locations.ColorEnd, render.ColorEnd);
        game2.Gl.uniform4f(render.Material.Locations.Details, emitter.Lifespan, emitter.Speed, ...render.Size);
        let instances = Float32Array.from(emitter.Instances);
        game2.Gl.bindBuffer(GL_ARRAY_BUFFER, render.Buffer);
        game2.Gl.bufferSubData(GL_ARRAY_BUFFER, 0, instances);
        game2.Gl.enableVertexAttribArray(render.Material.Locations.OriginAge);
        game2.Gl.vertexAttribPointer(render.Material.Locations.OriginAge, 4, GL_FLOAT, false, FLOATS_PER_PARTICLE * 4, 0);
        game2.Gl.enableVertexAttribArray(render.Material.Locations.Direction);
        game2.Gl.vertexAttribPointer(render.Material.Locations.Direction, 3, GL_FLOAT, false, FLOATS_PER_PARTICLE * 4, 4 * 4);
        game2.Gl.drawArrays(render.Material.Mode, 0, emitter.Instances.length / FLOATS_PER_PARTICLE);
        break;
      }
    }
  }

  // ../common/projection.ts
  function perspective(fovy, near, far) {
    return {
      Kind: 0 /* Perspective */,
      FovY: fovy,
      Near: near,
      Far: far,
      Projection: create(),
      Inverse: create()
    };
  }
  function resize_perspective(projection, aspect) {
    if (aspect > 1) {
      from_perspective(projection.Projection, projection.FovY, aspect, projection.Near, projection.Far);
    } else {
      from_perspective(projection.Projection, projection.FovY / aspect, aspect, projection.Near, projection.Far);
    }
    invert(projection.Inverse, projection.Projection);
  }
  function orthographic(radius, near, far) {
    return {
      Kind: 1 /* Orthographic */,
      Radius: radius,
      Near: near,
      Far: far,
      Projection: create(),
      Inverse: create()
    };
  }
  function resize_ortho(projection, aspect) {
    if (aspect > 1) {
      from_ortho(projection.Projection, projection.Radius / aspect, projection.Radius, -projection.Radius / aspect, -projection.Radius, projection.Near, projection.Far);
    } else {
      from_ortho(projection.Projection, projection.Radius, projection.Radius * aspect, -projection.Radius, -projection.Radius * aspect, projection.Near, projection.Far);
    }
    invert(projection.Inverse, projection.Projection);
  }

  // ../src/systems/sys_resize.ts
  var QUERY22 = 8 /* Camera */;
  function sys_resize(game2, delta) {
    if (game2.ViewportWidth != window.innerWidth || game2.ViewportHeight != window.innerHeight) {
      game2.ViewportResized = true;
    }
    if (game2.ViewportResized) {
      game2.ViewportWidth = game2.Canvas3D.width = game2.Canvas2D.width = window.innerWidth;
      game2.ViewportHeight = game2.Canvas3D.height = game2.Canvas2D.height = window.innerHeight;
      for (let target of Object.values(game2.Targets)) {
        if (target.ResizeToViewport) {
          switch (target.Kind) {
            case 0 /* Forward */:
              resize_forward_target(game2.Gl, target, game2.ViewportWidth, game2.ViewportHeight);
              break;
            case 1 /* Hdr */:
              resize_hdr_target(game2.Gl, target, game2.ViewportWidth, game2.ViewportHeight);
              break;
            case 2 /* Deferred */:
              resize_deferred_target(game2.Gl, target, game2.ViewportWidth, game2.ViewportHeight);
              break;
          }
        }
      }
      for (let i = 0; i < game2.World.Signature.length; i++) {
        if ((game2.World.Signature[i] & QUERY22) === QUERY22) {
          let camera = game2.World.Camera[i];
          switch (camera.Kind) {
            case 0 /* Canvas */:
              update_projection(camera.Projection, game2.ViewportWidth / game2.ViewportHeight);
              break;
            case 1 /* Target */:
              update_projection(camera.Projection, camera.Target.Width / camera.Target.Height);
              break;
            case 2 /* Xr */:
              break;
          }
        }
      }
    }
  }
  function update_projection(projection, aspect) {
    switch (projection.Kind) {
      case 0 /* Perspective */: {
        resize_perspective(projection, aspect);
        break;
      }
      case 1 /* Orthographic */:
        resize_ortho(projection, aspect);
        break;
    }
  }

  // ../src/systems/sys_shake.ts
  var QUERY23 = 8388608 /* Transform */ | 524288 /* Shake */;
  function sys_shake(game2, delta) {
    for (let i = 0; i < game2.World.Signature.length; i++) {
      if ((game2.World.Signature[i] & QUERY23) == QUERY23) {
        update12(game2, i);
      }
    }
  }
  function update12(game2, entity) {
    let shake2 = game2.World.Shake[entity];
    let transform2 = game2.World.Transform[entity];
    transform2.Translation = [Math.random() - 0.5, Math.random() - 0.5, Math.random() - 0.5];
    scale(transform2.Translation, transform2.Translation, shake2.Magnitude * 2);
    game2.World.Signature[entity] |= 512 /* Dirty */;
  }

  // ../src/systems/sys_spawn.ts
  var QUERY24 = 8388608 /* Transform */ | 1048576 /* Spawn */;
  function sys_spawn(game2, delta) {
    for (let i = 0; i < game2.World.Signature.length; i++) {
      if ((game2.World.Signature[i] & QUERY24) == QUERY24) {
        update13(game2, i, delta);
      }
    }
  }
  function update13(game2, entity, delta) {
    let spawn2 = game2.World.Spawn[entity];
    spawn2.SinceLast += delta;
    if (spawn2.SinceLast > spawn2.Interval) {
      spawn2.SinceLast = 0;
      let entity_transform = game2.World.Transform[entity];
      let world_position2 = [0, 0, 0];
      get_translation(world_position2, entity_transform.World);
      let world_rotation = [0, 0, 0, 0];
      get_rotation(world_rotation, entity_transform.World);
      instantiate(game2, [...spawn2.Creator(game2), transform(world_position2, world_rotation)]);
    }
  }

  // ../src/systems/sys_toggle.ts
  var QUERY25 = 4194304 /* Toggle */;
  function sys_toggle(game2, delta) {
    for (let i = 0; i < game2.World.Signature.length; i++) {
      if ((game2.World.Signature[i] & QUERY25) == QUERY25) {
        update14(game2, i, delta);
      }
    }
  }
  function update14(game2, entity, delta) {
    let toggle2 = game2.World.Toggle[entity];
    toggle2.SinceLast += delta;
    if (toggle2.SinceLast > toggle2.Frequency) {
      toggle2.SinceLast = 0;
      if (toggle2.CurrentlyEnabled) {
        toggle2.CurrentlyEnabled = false;
        game2.World.Signature[entity] &= ~toggle2.Mask;
      } else {
        toggle2.CurrentlyEnabled = true;
        game2.World.Signature[entity] |= toggle2.Mask;
      }
    }
  }

  // ../src/systems/sys_transform.ts
  var QUERY26 = 8388608 /* Transform */ | 512 /* Dirty */;
  function sys_transform(game2, delta) {
    for (let ent = 0; ent < game2.World.Signature.length; ent++) {
      if ((game2.World.Signature[ent] & QUERY26) === QUERY26) {
        let transform2 = game2.World.Transform[ent];
        update_transform(game2.World, ent, transform2);
      }
    }
  }
  var world_position = [0, 0, 0];
  function update_transform(world, entity, transform2) {
    world.Signature[entity] &= ~512 /* Dirty */;
    from_rotation_translation_scale(transform2.World, transform2.Rotation, transform2.Translation, transform2.Scale);
    if (transform2.Parent !== void 0) {
      let parent_transform = world.Transform[transform2.Parent];
      multiply2(transform2.World, parent_transform.World, transform2.World);
      if (transform2.Gyroscope) {
        get_translation(world_position, transform2.World);
        from_rotation_translation_scale(transform2.World, transform2.Rotation, world_position, transform2.Scale);
      }
    }
    invert(transform2.Self, transform2.World);
    if (world.Signature[entity] & 16 /* Children */) {
      let children2 = world.Children[entity];
      for (let i = 0; i < children2.Children.length; i++) {
        let child = children2.Children[i];
        if (world.Signature[child] & 8388608 /* Transform */) {
          let child_transform = world.Transform[child];
          child_transform.Parent = entity;
          update_transform(world, child, child_transform);
        }
      }
    }
  }

  // ../src/systems/sys_trigger.ts
  var QUERY27 = 8388608 /* Transform */ | 32 /* Collide */ | 16777216 /* Trigger */;
  function sys_trigger(game2, delta) {
    for (let i = 0; i < game2.World.Signature.length; i++) {
      if ((game2.World.Signature[i] & QUERY27) === QUERY27) {
        update15(game2, i);
      }
    }
  }
  function update15(game2, entity) {
    let collide2 = game2.World.Collide[entity];
    let trigger2 = game2.World.Trigger[entity];
    for (let collision of collide2.Collisions) {
      let other_collide = game2.World.Collide[collision.Other];
      if (trigger2.Mask & other_collide.Layers) {
        dispatch(game2, trigger2.Action, [entity, collision.Other]);
      }
    }
  }

  // ../common/html.ts
  function shift(values) {
    let value = values.shift();
    if (typeof value === "boolean" || value == void 0) {
      return "";
    } else if (Array.isArray(value)) {
      return value.join("");
    } else {
      return value;
    }
  }
  function html(strings, ...values) {
    return strings.reduce((out, cur) => out + shift(values) + cur);
  }

  // ../src/ui/App.ts
  function App(game2) {
    switch (game2.PlayState) {
      case "title":
        return Title(game2);
      case "playing":
        return Overlay(game2);
      case "win":
        return Win(game2);
      case "lose":
        return Lose(game2);
      default:
        return "";
    }
  }
  function Title(game2) {
    return html`
        <div
            style="
                padding: 1vmin;
                font-family: Helvetica, Arial, sans-serif;
                text-transform: uppercase;
                color: white;
            "
        >
            <div
                style="
                    font-size: 15vmin;
                    font-weight: 800;
                "
            >
                You are the snooze button.
                <button
                    onclick="$(${2 /* GameStart */})"
                    style="
                        font-size: 5vmin;
                        font-weight: 800;
                        text-transform: uppercase;
                        color: white;
                        background: none;
                        padding: 1vmin 3vmin;
                        vertical-align: 4vmin;
                        border: 2vmin solid white;
                        border-radius: 50px;
                    "
                >
                    Let's go
                </button>
            </div>
        </div>
    `;
  }
  function Overlay(game2) {
    return html`
        <div
            style="
                position: absolute;
                bottom: 0;
                padding: 1vmin;
                font-family: Helvetica, Arial, sans-serif;
                text-transform: uppercase;
                color: white;
            "
        >
            <div
                style="
                    font-size: 15vmin;
                    font-weight: 800;
                "
            >
                ${game2.Sleepiness > 2 ? "The human is still asleep." : game2.Sleepiness > 1 ? "The human is waking up." : "The human is almost awake."}
            </div>
        </div>
    `;
  }
  function Win(game2) {
    return html`
        <div
            style="
                padding: 1vmin;
                font-family: Helvetica, Arial, sans-serif;
                text-transform: uppercase;
                color: white;
            "
        >
            <div
                style="
                    font-size: 15vmin;
                    font-weight: 800;
                "
            >
                You win! The human is awake.
                <button
                    onclick="$(${1 /* GameTitle */})"
                    style="
                        font-size: 5vmin;
                        font-weight: 800;
                        text-transform: uppercase;
                        color: white;
                        background: none;
                        padding: 1vmin 3vmin;
                        vertical-align: 4vmin;
                        border: 2vmin solid white;
                        border-radius: 50px;
                    "
                >
                    Play again
                </button>
            </div>
        </div>
    `;
  }
  function Lose(game2) {
    return html`
        <div
            style="
                padding: 1vmin;
                font-family: Helvetica, Arial, sans-serif;
                text-transform: uppercase;
                color: white;
            "
        >
            <div
                style="
                    font-size: 15vmin;
                    font-weight: 800;
                "
            >
                You lose! The human goes back to sleep.
                <button
                    onclick="$(${1 /* GameTitle */})"
                    style="
                        font-size: 5vmin;
                        font-weight: 800;
                        text-transform: uppercase;
                        color: white;
                        background: none;
                        padding: 1vmin 3vmin;
                        vertical-align: 4vmin;
                        border: 2vmin solid white;
                        border-radius: 50px;
                    "
                >
                    Try again
                </button>
            </div>
        </div>
    `;
  }

  // ../src/systems/sys_ui.ts
  var prev;
  function sys_ui(game2, delta) {
    let next = App(game2);
    if (next !== prev) {
      game2.Ui.innerHTML = prev = next;
    }
  }

  // ../src/game.ts
  var Game = class extends Game3D {
    constructor() {
      super(...arguments);
      this.World = new World();
      this.MaterialWireframe = mat_forward_colored_wireframe(this.Gl);
      this.MaterialColoredShadows = mat_forward_colored_shadows(this.Gl);
      this.MaterialParticlesColored = mat_forward_particles_colored(this.Gl);
      this.MaterialDepth = mat_forward_depth(this.Gl);
      this.MeshCube = mesh_cube(this.Gl);
      this.MeshCylinder = mesh_cylinder(this.Gl);
      this.MeshBody = mesh_body(this.Gl);
      this.MeshWheel = mesh_wheel(this.Gl);
      this.MeshHand = mesh_hand(this.Gl);
      this.MeshNote = mesh_note(this.Gl);
      this.LightPositions = new Float32Array(4 * MAX_FORWARD_LIGHTS);
      this.LightDetails = new Float32Array(4 * MAX_FORWARD_LIGHTS);
      this.Targets = {
        Sun: create_depth_target(this.Gl, 4096, 4096)
      };
      this.PlayState = "title";
      this.Sleepiness = 3;
      this.DistanceTraveled = 0;
      this.PlatformsTraveled = 0;
    }
    FixedUpdate(delta) {
      sys_physics_integrate(this, delta);
      sys_transform(this, delta);
      sys_physics_kinematic(this, delta);
      sys_collide(this, delta);
      sys_physics_resolve(this, delta);
      sys_transform(this, delta);
      sys_trigger(this, delta);
    }
    FrameUpdate(delta) {
      sys_poll(this, delta);
      sys_resize(this, delta);
      sys_camera(this, delta);
      sys_cull(this, delta);
      sys_control_always(this, delta);
      sys_control_keyboard(this, delta);
      sys_control_jump(this, delta);
      sys_control_touch_move(this, delta);
      sys_animate(this, delta);
      sys_move(this, delta);
      sys_mimic(this, delta);
      sys_lifespan(this, delta);
      sys_shake(this, delta);
      sys_toggle(this, delta);
      sys_spawn(this, delta);
      false;
      sys_transform(this, delta);
      if (false) {
        sys_debug(this, delta);
      }
      false;
      false;
      sys_render_depth(this, delta);
      sys_render_forward(this, delta);
      false;
      sys_ui(this, delta);
    }
  };

  // ../src/components/com_audio_source.ts
  function audio_source(spatial, idle) {
    return (game2, entity) => {
      let panner = spatial ? game2.Audio.createPanner() : void 0;
      game2.World.Signature[entity] |= 4 /* AudioSource */;
      game2.World.AudioSource[entity] = {
        Panner: panner,
        Idle: idle,
        Time: 0
      };
    };
  }

  // ../src/components/com_callback.ts
  function callback(fn) {
    return (game2, entity) => {
      fn(game2, entity);
    };
  }

  // ../src/components/com_mimic.ts
  function mimic(Target, Stiffness = 0.1) {
    return (game2, entity) => {
      game2.World.Signature[entity] |= 16384 /* Mimic */;
      game2.World.Mimic[entity] = {
        Target,
        Stiffness
      };
    };
  }

  // ../src/components/com_named.ts
  function named(Name) {
    return (game2, entity) => {
      game2.World.Signature[entity] |= 65536 /* Named */;
      game2.World.Named[entity] = { Name };
    };
  }
  function first_named(world, name, start_at = 0) {
    for (let i = start_at; i < world.Signature.length; i++) {
      if (world.Signature[i] & 65536 /* Named */ && world.Named[i].Name === name) {
        return i;
      }
    }
    throw `No entity named ${name}.`;
  }

  // ../src/sounds/snd_piano.ts
  function snd_piano() {
    return {
      Kind: 1 /* Synth */,
      Tracks: [
        {
          Instrument: [
            8,
            false,
            8,
            8,
            false,
            false,
            8,
            8,
            [
              ["sine", 8, 4, 4, 5, 8, false, false, 8, 8, 8],
              [false, 2, 2, 2, 4],
              ["sine", 5, 0, 2, 3, 11, false, false, 8, 8, 8]
            ]
          ],
          Notes: [element([53, 55, 57, 59, 60])]
        }
      ],
      Exit: element([0.2, 0.2, 0.2, 0.4]),
      Next: snd_piano
    };
  }

  // ../src/blueprints/blu_camera_follow.ts
  function blueprint_camera_follow(game2) {
    let camera;
    return [
      callback((game3, entity) => camera = entity),
      mimic(first_named(game2.World, "title camera anchor")),
      audio_source(false),
      children([
        transform([0, 0.1, -1], [0, 1, 0, 0]),
        camera_canvas(perspective(1, 0.1, 1e3), [170 / 255, 199 / 255, 172 / 255, 1])
      ], [
        task_when(() => game2.PlayState === "playing", (entity) => {
          mimic(first_named(game2.World, "player camera anchor"))(game2, camera);
          let audio = game2.World.AudioSource[camera];
          audio.Trigger = snd_piano();
        })
      ], [
        task_when(() => game2.PlayState === "win", (entity) => {
          mimic(first_named(game2.World, "title camera anchor"))(game2, camera);
          let audio = game2.World.AudioSource[camera];
          audio.Trigger = void 0;
        })
      ], [
        task_when(() => game2.PlayState === "lose", (entity) => {
          mimic(first_named(game2.World, "lose camera anchor"))(game2, camera);
          let audio = game2.World.AudioSource[camera];
          audio.Trigger = void 0;
        })
      ])
    ];
  }

  // ../src/components/com_collide.ts
  function collide(dynamic, layers, mask, size = [1, 1, 1]) {
    return (game2, entity) => {
      game2.World.Signature[entity] |= 32 /* Collide */;
      game2.World.Collide[entity] = {
        EntityId: entity,
        New: true,
        Dynamic: dynamic,
        Layers: layers,
        Mask: mask,
        Size: size,
        Min: [0, 0, 0],
        Max: [0, 0, 0],
        Center: [0, 0, 0],
        Half: [0, 0, 0],
        Collisions: []
      };
    };
  }

  // ../src/components/com_control_always.ts
  function control_always(direction, rotation2, animation) {
    return (game2, entity) => {
      game2.World.Signature[entity] |= 64 /* ControlAlways */;
      game2.World.ControlAlways[entity] = {
        Direction: direction,
        Rotation: rotation2,
        Animation: animation
      };
    };
  }

  // ../src/components/com_disable.ts
  function disable(mask) {
    return (game2, entity) => {
      game2.World.Signature[entity] &= ~mask;
    };
  }

  // ../src/components/com_lifespan.ts
  function lifespan(remaining, action) {
    return (game2, entity) => {
      game2.World.Signature[entity] |= 4096 /* Lifespan */;
      game2.World.Lifespan[entity] = {
        Remaining: remaining,
        Action: action
      };
    };
  }

  // ../src/components/com_move.ts
  function move(move_speed, rotation_speed) {
    return (game2, entity) => {
      game2.World.Signature[entity] |= 32768 /* Move */;
      game2.World.Move[entity] = {
        MoveSpeed: move_speed,
        RotationSpeed: rotation_speed,
        Direction: [0, 0, 0],
        LocalRotation: [0, 0, 0, 1],
        SelfRotation: [0, 0, 0, 1]
      };
    };
  }

  // ../src/components/com_shake.ts
  function shake(magnitude) {
    return (game2, entity) => {
      game2.World.Signature[entity] |= 524288 /* Shake */;
      game2.World.Shake[entity] = {
        Magnitude: magnitude
      };
    };
  }

  // ../src/components/com_toggle.ts
  function toggle(mask, frequency, init) {
    return (game2, entity) => {
      game2.World.Signature[entity] |= 4194304 /* Toggle */;
      game2.World.Toggle[entity] = {
        Mask: mask,
        Frequency: frequency,
        SinceLast: frequency,
        CurrentlyEnabled: !init
      };
    };
  }

  // ../src/components/com_trigger.ts
  function trigger(mask, action) {
    return (game2, entity) => {
      game2.World.Signature[entity] |= 16777216 /* Trigger */;
      game2.World.Trigger[entity] = {
        Mask: mask,
        Action: action
      };
    };
  }

  // ../src/blueprints/blu_note.ts
  function blueprint_note(game2) {
    let shaker_entity;
    return [
      collide(true, 8 /* Collectable */, 2 /* Ground */ | 1 /* Player */ | 4 /* Obstacle */, [0.3, 0.3, 0.3]),
      trigger(1 /* Player */ | 4 /* Obstacle */, 3 /* CollectItem */),
      rigid_body(1 /* Dynamic */, 0.1),
      audio_source(true),
      lifespan(15),
      children([
        transform(),
        callback((game3, entity) => shaker_entity = entity),
        shake(0.01),
        toggle(524288 /* Shake */, 1, true),
        disable(524288 /* Shake */ | 4194304 /* Toggle */),
        children([
          transform([0, 0, 0], void 0, [0.3, 0.3, 0.3]),
          control_always(null, [0, 1, 0, 0]),
          move(0, 2),
          render_colored_shadows(game2.MaterialColoredShadows, game2.MeshNote, [
            118 / 255,
            188 / 255,
            255 / 255,
            1
          ])
        ])
      ]),
      task_timeout(10, (entity) => {
        game2.World.Signature[shaker_entity] |= 524288 /* Shake */ | 4194304 /* Toggle */;
      })
    ];
  }

  // ../src/components/com_light.ts
  function light_directional(color = [1, 1, 1], intensity = 1) {
    return (game2, entity) => {
      game2.World.Signature[entity] |= 8192 /* Light */;
      game2.World.Light[entity] = {
        Kind: 2 /* Directional */,
        Color: color,
        Intensity: intensity
      };
    };
  }

  // ../src/blueprints/blu_sun.ts
  function blueprint_sun(game2) {
    return [
      children([
        transform([0, 0, 10]),
        camera_target(game2.Targets.Sun, orthographic(8, 3, 15)),
        light_directional([1, 1, 1], 0.3)
      ])
    ];
  }

  // ../src/components/com_spawn.ts
  function spawn(creator, interval) {
    return (game2, entity) => {
      game2.World.Signature[entity] |= 1048576 /* Spawn */;
      game2.World.Spawn[entity] = {
        Creator: creator,
        Interval: interval,
        SinceLast: 0
      };
    };
  }

  // ../src/components/com_cull.ts
  function cull(mask) {
    return (game2, entity) => {
      game2.World.Signature[entity] |= 256 /* Cull */;
      game2.World.Cull[entity] = {
        Mask: mask
      };
    };
  }

  // ../common/easing.ts
  function ease_in_quad(t) {
    return t * t;
  }
  function ease_out_quad(t) {
    return 1 - (1 - t) ** 2;
  }
  function ease_in_out_quad(t) {
    return t < 0.5 ? 2 * t * t : 1 - (-2 * t + 2) ** 2 / 2;
  }

  // ../src/components/com_control_player.ts
  function control_player(jump, yaw, pitch, min_pitch = 0, max_pitch = 0) {
    return (game2, entity) => {
      game2.World.Signature[entity] |= 128 /* ControlPlayer */;
      game2.World.ControlPlayer[entity] = {
        Jump: jump,
        Yaw: yaw,
        Pitch: pitch,
        MinPitch: min_pitch,
        MaxPitch: max_pitch
      };
    };
  }

  // ../src/blueprints/blu_hand.ts
  function blueprint_hand(game2) {
    return [
      collide(true, 4 /* Obstacle */, 2 /* Ground */ | 4 /* Obstacle */ | 1 /* Player */, [0.4, 0.2, 0.6]),
      trigger(2 /* Ground */ | 1 /* Player */ | 4 /* Obstacle */, 4 /* Snooze */),
      rigid_body(1 /* Dynamic */, 0.3),
      lifespan(10),
      children([
        transform(void 0, void 0, [5, 5, 5]),
        render_colored_shadows(game2.MaterialColoredShadows, game2.MeshHand, [
          242 / 255,
          194 / 255,
          61 / 255,
          1
        ])
      ])
    ];
  }

  // ../src/blueprints/blu_spawner.ts
  function blueprint_spawner(game2) {
    return [
      children([
        transform(),
        shake(5),
        spawn(blueprint_hand, 2),
        disable(1048576 /* Spawn */),
        task_when(() => game2.PlayState === "playing", (entity) => {
          game2.World.Signature[entity] |= 1048576 /* Spawn */;
        })
      ])
    ];
  }

  // ../src/blueprints/blu_player.ts
  function blueprint_player(game2) {
    let player;
    return [
      callback((game3, entity) => player = entity),
      control_player(true, 0.2, 0),
      control_always([0, 0, 1], null, "move"),
      disable(64 /* ControlAlways */),
      move(1.5, 3),
      collide(true, 1 /* Player */, 2 /* Ground */ | 4 /* Obstacle */, [2.8, 2.6, 2]),
      rigid_body(1 /* Dynamic */),
      audio_source(false),
      children([
        task_when(() => game2.PlayState === "playing", (entity) => {
          game2.World.Signature[player] |= 64 /* ControlAlways */;
        })
      ], [
        task_when(() => game2.PlayState === "win", (entity) => {
          game2.World.Signature[player] &= ~128 /* ControlPlayer */;
          let control_always2 = game2.World.ControlAlways[player];
          control_always2.Direction = null;
          control_always2.Animation = "jump";
        })
      ], [
        task_when(() => game2.PlayState === "lose", (entity) => {
          game2.World.Signature[player] &= ~128 /* ControlPlayer */;
          let control_always2 = game2.World.ControlAlways[player];
          control_always2.Direction = null;
          control_always2.Animation = void 0;
        })
      ], [
        transform(),
        render_colored_shadows(game2.MaterialColoredShadows, game2.MeshBody, [
          224 / 255,
          114 / 255,
          128 / 255,
          1
        ]),
        animate({
          idle: {
            Keyframes: [
              {
                Timestamp: 0,
                Rotation: from_euler([0, 0, 0, 1], 0, -5, 0),
                Ease: ease_in_out_quad
              },
              {
                Timestamp: 1,
                Rotation: from_euler([0, 0, 0, 1], 0, 5, 0),
                Ease: ease_in_out_quad
              }
            ]
          },
          jump: {
            Keyframes: [
              {
                Timestamp: 0,
                Rotation: [0, 0, 0, 1]
              },
              {
                Timestamp: 0.3,
                Rotation: [1, 0, 0, 0],
                Ease: ease_in_quad
              },
              {
                Timestamp: 0.6,
                Rotation: [0, 0, 0, -1],
                Ease: ease_out_quad
              }
            ],
            Flags: 0 /* None */
          }
        }),
        children([
          transform([0, 0, 1], [0.707, 0, 0, 0.707], [0.7, 0.1, 0.6]),
          render_colored_shadows(game2.MaterialColoredShadows, game2.MeshBody, [
            200 / 255,
            231 / 255,
            229 / 255,
            1
          ])
        ], [
          transform([0, 1, 0], [0, 0, 0, 1], [0.6, 0.2, 0.5]),
          render_colored_shadows(game2.MaterialColoredShadows, game2.MeshBody, [
            174 / 255,
            248 / 255,
            181 / 255,
            1
          ])
        ])
      ], [
        transform(),
        animate({
          idle: {
            Flags: 0 /* None */,
            Keyframes: [
              {
                Timestamp: 0,
                Rotation: [0, 0, 0, 1]
              }
            ]
          },
          move: {
            Flags: 2 /* Loop */,
            Keyframes: [
              {
                Timestamp: 0,
                Rotation: [0, 0, 0, 1]
              },
              {
                Timestamp: 0.5,
                Rotation: [1, 0, 0, 0]
              },
              {
                Timestamp: 1,
                Rotation: [0, 0, 0, -1]
              }
            ]
          }
        }),
        children([
          transform([-1.8, 0, 0]),
          render_colored_shadows(game2.MaterialColoredShadows, game2.MeshWheel, [
            240 / 255,
            202 / 255,
            82 / 255,
            1
          ])
        ], [
          transform([1.8, 0, 0]),
          render_colored_shadows(game2.MaterialColoredShadows, game2.MeshWheel, [
            240 / 255,
            202 / 255,
            82 / 255,
            1
          ])
        ])
      ], [
        named("title camera anchor"),
        transform([-3, 0, 0], from_euler([0, 0, 0, 1], 0, -155, 0))
      ], [
        named("player camera anchor"),
        transform(void 0, from_euler([0, 0, 0, 1], 15, 0, 0)),
        move(0, 3),
        control_player(false, 0, 0.2, -2, 15)
      ], [
        named("lose camera anchor"),
        transform([0, 30, 50], from_euler([0, 0, 0, 1], 30, -155, 0))
      ], [named("hand spawner anchor"), transform([0, 50, 30]), ...blueprint_spawner(game2)])
    ];
  }

  // ../src/blueprints/blu_face.ts
  function blueprint_face(game2) {
    return [draw_image(64, 64)];
  }

  // ../src/scenes/map_room1.ts
  function map_room1(game2) {
    instantiate(game2, [
      transform([0, -0.5, 0], void 0, [10, 1, 10]),
      collide(false, 2 /* Ground */, 0 /* None */),
      rigid_body(0 /* Static */),
      render_colored_shadows(game2.MaterialColoredShadows, game2.MeshCube, [
        211.38186204009423 / 255,
        149.14307866403394 / 255,
        103.41486235216583 / 255,
        1
      ])
    ]);
    instantiate(game2, [
      transform([-3.8, 0.37, 3.6], void 0, [1.8, 0.35, 2.2]),
      collide(false, 4 /* Obstacle */, 0 /* None */),
      rigid_body(0 /* Static */),
      render_colored_shadows(game2.MaterialColoredShadows, game2.MeshCube, [
        211.5121983799912 / 255,
        164.08627419128322 / 255,
        108.79210782001286 / 255,
        1
      ]),
      cull(131072 /* Render */)
    ]);
    instantiate(game2, [
      transform([-2.39, 0.45, 4.3], void 0, [0.7, 0.5, 0.7]),
      collide(false, 4 /* Obstacle */, 0 /* None */),
      rigid_body(0 /* Static */),
      render_colored_shadows(game2.MaterialColoredShadows, game2.MeshCube, [
        217.31566937092657 / 255,
        159.881784480034 / 255,
        105.49788767689945 / 255,
        1
      ]),
      cull(131072 /* Render */)
    ]);
    instantiate(game2, [
      transform([-2.5, 1, 4.4], void 0, [0.25, 0.2, 0.25]),
      collide(false, 4 /* Obstacle */, 0 /* None */),
      rigid_body(0 /* Static */),
      render_colored_shadows(game2.MaterialColoredShadows, game2.MeshCube, [
        227.69253223166325 / 255,
        147.41991498941354 / 255,
        116.3335649983421 / 255,
        1
      ]),
      cull(131072 /* Render */)
    ]);
    instantiate(game2, [
      ...blueprint_player(game2),
      transform([-2.2, 1, 4.2], [0, 1, 0, 0], [0.05, 0.05, 0.05])
    ]);
    instantiate(game2, [
      transform([-2.5, 0.8, 4.4], void 0, [0.1, 0.2, 0.1]),
      collide(false, 4 /* Obstacle */, 0 /* None */),
      rigid_body(0 /* Static */),
      render_colored_shadows(game2.MaterialColoredShadows, game2.MeshCylinder, [
        234.75686490806027 / 255,
        142.23070601949337 / 255,
        95.49443311675125 / 255,
        1
      ]),
      cull(131072 /* Render */)
    ]);
    instantiate(game2, [
      transform([-3.1, 0.1, 4.4], void 0, [0.1, 0.24, 0.1]),
      collide(false, 4 /* Obstacle */, 0 /* None */),
      rigid_body(0 /* Static */),
      render_colored_shadows(game2.MaterialColoredShadows, game2.MeshCylinder, [
        210.8445273319966 / 255,
        155.17971158435964 / 255,
        105.34717032460944 / 255,
        1
      ]),
      cull(131072 /* Render */)
    ]);
    instantiate(game2, [
      transform([-4.5, 0.1, 4.4], void 0, [0.1, 0.24, 0.1]),
      collide(false, 4 /* Obstacle */, 0 /* None */),
      rigid_body(0 /* Static */),
      render_colored_shadows(game2.MaterialColoredShadows, game2.MeshCylinder, [
        211.7696918175622 / 255,
        142.59582131273075 / 255,
        99.54512856927484 / 255,
        1
      ]),
      cull(131072 /* Render */)
    ]);
    instantiate(game2, [
      transform([-4.5, 0.1, 2.8], void 0, [0.1, 0.24, 0.1]),
      collide(false, 4 /* Obstacle */, 0 /* None */),
      rigid_body(0 /* Static */),
      render_colored_shadows(game2.MaterialColoredShadows, game2.MeshCylinder, [
        227.00622738457807 / 255,
        147.55800844035224 / 255,
        90.57788585447102 / 255,
        1
      ]),
      cull(131072 /* Render */)
    ]);
    instantiate(game2, [
      transform([-3.1, 0.1, 2.8], void 0, [0.1, 0.24, 0.1]),
      collide(false, 4 /* Obstacle */, 0 /* None */),
      rigid_body(0 /* Static */),
      render_colored_shadows(game2.MaterialColoredShadows, game2.MeshCylinder, [
        208.96264004101354 / 255,
        170.33382579099842 / 255,
        105.37582547956768 / 255,
        1
      ]),
      cull(131072 /* Render */)
    ]);
    instantiate(game2, [
      transform([-2.6, 0.1, 4.5], void 0, [0.1, 0.24, 0.1]),
      collide(false, 4 /* Obstacle */, 0 /* None */),
      rigid_body(0 /* Static */),
      render_colored_shadows(game2.MaterialColoredShadows, game2.MeshCylinder, [
        230.21235347699547 / 255,
        171.2161144255451 / 255,
        112.28993131637952 / 255,
        1
      ]),
      cull(131072 /* Render */)
    ]);
    instantiate(game2, [
      transform([-2.2, 0.1, 4.5], void 0, [0.1, 0.24, 0.1]),
      collide(false, 4 /* Obstacle */, 0 /* None */),
      rigid_body(0 /* Static */),
      render_colored_shadows(game2.MaterialColoredShadows, game2.MeshCylinder, [
        213.86281353398817 / 255,
        151.29104934999904 / 255,
        101.95500403170132 / 255,
        1
      ]),
      cull(131072 /* Render */)
    ]);
    instantiate(game2, [
      transform([-2.2, 0.1, 4.1], void 0, [0.1, 0.24, 0.1]),
      collide(false, 4 /* Obstacle */, 0 /* None */),
      rigid_body(0 /* Static */),
      render_colored_shadows(game2.MaterialColoredShadows, game2.MeshCylinder, [
        214.87463350262715 / 255,
        143.92987528329525 / 255,
        115.64927281447517 / 255,
        1
      ]),
      cull(131072 /* Render */)
    ]);
    instantiate(game2, [
      transform([-2.6, 0.1, 4.1], void 0, [0.1, 0.24, 0.1]),
      collide(false, 4 /* Obstacle */, 0 /* None */),
      rigid_body(0 /* Static */),
      render_colored_shadows(game2.MaterialColoredShadows, game2.MeshCylinder, [
        229.5035682034709 / 255,
        143.39655149046493 / 255,
        91.59565260963832 / 255,
        1
      ]),
      cull(131072 /* Render */)
    ]);
    instantiate(game2, [
      transform([-3.8, 1.1, 0.3], void 0, [1.8, 1.73, -0.44]),
      collide(false, 4 /* Obstacle */, 0 /* None */),
      rigid_body(0 /* Static */),
      render_colored_shadows(game2.MaterialColoredShadows, game2.MeshCube, [
        221.3548080488702 / 255,
        159.27928441827723 / 255,
        107.34770721504464 / 255,
        1
      ]),
      cull(131072 /* Render */)
    ]);
    instantiate(game2, [
      transform([-4.5, 0.1, 0.4], void 0, [0.1, 0.24, 0.1]),
      collide(false, 4 /* Obstacle */, 0 /* None */),
      rigid_body(0 /* Static */),
      render_colored_shadows(game2.MaterialColoredShadows, game2.MeshCylinder, [
        222.47691564469832 / 255,
        162.8780920513936 / 255,
        96.06877703429656 / 255,
        1
      ]),
      cull(131072 /* Render */)
    ]);
    instantiate(game2, [
      transform([-4.5, 0.1, 0.2], void 0, [0.1, 0.24, 0.1]),
      collide(false, 4 /* Obstacle */, 0 /* None */),
      rigid_body(0 /* Static */),
      render_colored_shadows(game2.MaterialColoredShadows, game2.MeshCylinder, [
        207.4537842970836 / 255,
        151.56572090352495 / 255,
        109.01681541706384 / 255,
        1
      ]),
      cull(131072 /* Render */)
    ]);
    instantiate(game2, [
      transform([-3.1, 0.1, 0.2], void 0, [0.1, 0.24, 0.1]),
      collide(false, 4 /* Obstacle */, 0 /* None */),
      rigid_body(0 /* Static */),
      render_colored_shadows(game2.MaterialColoredShadows, game2.MeshCylinder, [
        210.08187443203033 / 255,
        142.25074902959994 / 255,
        112.07346658224577 / 255,
        1
      ]),
      cull(131072 /* Render */)
    ]);
    instantiate(game2, [
      transform([-3.1, 0.1, 0.4], void 0, [0.1, 0.24, 0.1]),
      collide(false, 4 /* Obstacle */, 0 /* None */),
      rigid_body(0 /* Static */),
      render_colored_shadows(game2.MaterialColoredShadows, game2.MeshCylinder, [
        216.72785579539263 / 255,
        161.58132834372043 / 255,
        106.91700848915998 / 255,
        1
      ]),
      cull(131072 /* Render */)
    ]);
    instantiate(game2, [
      transform([0.82, 0.42, 3.27], [0, -0.91, 0, 0.42], [0.72, 0.35, 0.88]),
      collide(false, 4 /* Obstacle */, 0 /* None */),
      rigid_body(0 /* Static */),
      render_colored_shadows(game2.MaterialColoredShadows, game2.MeshCube, [
        208.46228265932123 / 255,
        147.97709791285695 / 255,
        97.50092768120203 / 255,
        1
      ]),
      cull(131072 /* Render */)
    ]);
    instantiate(game2, [
      transform([0.72, 0.12, 2.93], [0, -0.91, 0, 0.42], [0.1, 0.24, 0.1]),
      collide(false, 4 /* Obstacle */, 0 /* None */),
      rigid_body(0 /* Static */),
      render_colored_shadows(game2.MaterialColoredShadows, game2.MeshCylinder, [
        235.15716247359552 / 255,
        151.838818021471 / 255,
        96.02332089606587 / 255,
        1
      ]),
      cull(131072 /* Render */)
    ]);
    instantiate(game2, [
      transform([0.46, 0.12, 3.23], [0, -0.91, 0, 0.42], [0.1, 0.24, 0.1]),
      collide(false, 4 /* Obstacle */, 0 /* None */),
      rigid_body(0 /* Static */),
      render_colored_shadows(game2.MaterialColoredShadows, game2.MeshCylinder, [
        206.51105520887768 / 255,
        142.3560335776035 / 255,
        106.19980055944355 / 255,
        1
      ]),
      cull(131072 /* Render */)
    ]);
    instantiate(game2, [
      transform([0.92, 0.12, 3.62], [0, -0.91, 0, 0.42], [0.1, 0.24, 0.1]),
      collide(false, 4 /* Obstacle */, 0 /* None */),
      rigid_body(0 /* Static */),
      render_colored_shadows(game2.MaterialColoredShadows, game2.MeshCylinder, [
        213.11876765190112 / 255,
        158.36053540052873 / 255,
        110.14017838958864 / 255,
        1
      ]),
      cull(131072 /* Render */)
    ]);
    instantiate(game2, [
      transform([1.18, 0.12, 3.31], [0, -0.91, 0, 0.42], [0.1, 0.24, 0.1]),
      collide(false, 4 /* Obstacle */, 0 /* None */),
      rigid_body(0 /* Static */),
      render_colored_shadows(game2.MaterialColoredShadows, game2.MeshCylinder, [
        211.6229009442033 / 255,
        167.02411360403897 / 255,
        95.3171748181167 / 255,
        1
      ]),
      cull(131072 /* Render */)
    ]);
    instantiate(game2, [
      transform([0.65, 0.77, 3.48], [0, -0.91, 0, 0.42], [0.17, 0.35, 0.88]),
      collide(false, 4 /* Obstacle */, 0 /* None */),
      rigid_body(0 /* Static */),
      render_colored_shadows(game2.MaterialColoredShadows, game2.MeshCube, [
        211.81408424235525 / 255,
        157.011607215628 / 255,
        113.61024667959954 / 255,
        1
      ]),
      cull(131072 /* Render */)
    ]);
    instantiate(game2, [
      transform([0.55, 0.77, 3.04], [0, -0.91, 0, 0.42], [0.72, 0.35, 0.16]),
      collide(false, 4 /* Obstacle */, 0 /* None */),
      rigid_body(0 /* Static */),
      render_colored_shadows(game2.MaterialColoredShadows, game2.MeshCube, [
        226.06932455301805 / 255,
        160.61192698931546 / 255,
        100.3202549019268 / 255,
        1
      ]),
      cull(131072 /* Render */)
    ]);
    instantiate(game2, [
      transform([1.1, 0.77, 3.51], [0, -0.91, 0, 0.42], [0.72, 0.35, 0.16]),
      collide(false, 4 /* Obstacle */, 0 /* None */),
      rigid_body(0 /* Static */),
      render_colored_shadows(game2.MaterialColoredShadows, game2.MeshCube, [
        226.45494582931352 / 255,
        169.86985793114596 / 255,
        104.2324098131126 / 255,
        1
      ]),
      cull(131072 /* Render */)
    ]);
    instantiate(game2, [
      transform([1.62, 0.44, 0.25], [0, 0.84, 0, 0.54], [0.72, 0.35, 1.76]),
      collide(false, 4 /* Obstacle */, 0 /* None */),
      rigid_body(0 /* Static */),
      render_colored_shadows(game2.MaterialColoredShadows, game2.MeshCube, [
        234.78641979331195 / 255,
        150.8386861570277 / 255,
        103.38322091364509 / 255,
        1
      ]),
      cull(131072 /* Render */)
    ]);
    instantiate(game2, [
      transform([2.34, 0.14, 0.13], [0, 0.84, 0, 0.54], [0.1, 0.24, 0.1]),
      collide(false, 4 /* Obstacle */, 0 /* None */),
      rigid_body(0 /* Static */),
      render_colored_shadows(game2.MaterialColoredShadows, game2.MeshCylinder, [
        227.05135873398675 / 255,
        164.53451469160362 / 255,
        116.16971853265458 / 255,
        1
      ]),
      cull(131072 /* Render */)
    ]);
    instantiate(game2, [
      transform([2.15, 0.14, -0.28], [0, 0.84, 0, 0.54], [0.1, 0.24, 0.1]),
      collide(false, 4 /* Obstacle */, 0 /* None */),
      rigid_body(0 /* Static */),
      render_colored_shadows(game2.MaterialColoredShadows, game2.MeshCylinder, [
        220.04158023355524 / 255,
        167.3395740044091 / 255,
        114.93861966508142 / 255,
        1
      ]),
      cull(131072 /* Render */)
    ]);
    instantiate(game2, [
      transform([0.9, 0.14, 0.36], [0, 0.84, 0, 0.54], [0.1, 0.24, 0.1]),
      collide(false, 4 /* Obstacle */, 0 /* None */),
      rigid_body(0 /* Static */),
      render_colored_shadows(game2.MaterialColoredShadows, game2.MeshCylinder, [
        231.22864291077863 / 255,
        148.2279148581857 / 255,
        100.64301868084036 / 255,
        1
      ]),
      cull(131072 /* Render */)
    ]);
    instantiate(game2, [
      transform([1.05, 0.14, 0.68], [0, 0.84, 0, 0.54], [0.1, 0.24, 0.1]),
      collide(false, 4 /* Obstacle */, 0 /* None */),
      rigid_body(0 /* Static */),
      render_colored_shadows(game2.MaterialColoredShadows, game2.MeshCylinder, [
        233.01221062049865 / 255,
        171.98909687249002 / 255,
        95.03099871140836 / 255,
        1
      ]),
      cull(131072 /* Render */)
    ]);
    instantiate(game2, [
      transform([1.54, 0.79, 0.06], [0, 0.84, 0, 0.54], [0.17, 0.35, 1.67]),
      collide(false, 4 /* Obstacle */, 0 /* None */),
      rigid_body(0 /* Static */),
      render_colored_shadows(game2.MaterialColoredShadows, game2.MeshCube, [
        212.92037080479432 / 255,
        146.88283355187957 / 255,
        116.93088400279885 / 255,
        1
      ]),
      cull(131072 /* Render */)
    ]);
    instantiate(game2, [
      transform([4.07, 0.42, 2.28], [0, -0.26, 0, 0.97], [0.72, 0.35, 0.88]),
      collide(false, 4 /* Obstacle */, 0 /* None */),
      rigid_body(0 /* Static */),
      render_colored_shadows(game2.MaterialColoredShadows, game2.MeshCube, [
        211.89621779802252 / 255,
        143.40284846172514 / 255,
        95.56579502537873 / 255,
        1
      ]),
      cull(131072 /* Render */)
    ]);
    instantiate(game2, [
      transform([3.75, 0.12, 2.44], [0, -0.26, 0, 0.97], [0.1, 0.24, 0.1]),
      collide(false, 4 /* Obstacle */, 0 /* None */),
      rigid_body(0 /* Static */),
      render_colored_shadows(game2.MaterialColoredShadows, game2.MeshCylinder, [
        227.43340911329722 / 255,
        159.79548784145732 / 255,
        97.786379055686 / 255,
        1
      ]),
      cull(131072 /* Render */)
    ]);
    instantiate(game2, [
      transform([4.09, 0.12, 2.64], [0, -0.26, 0, 0.97], [0.1, 0.24, 0.1]),
      collide(false, 4 /* Obstacle */, 0 /* None */),
      rigid_body(0 /* Static */),
      render_colored_shadows(game2.MaterialColoredShadows, game2.MeshCylinder, [
        229.9992872445197 / 255,
        152.3006440964042 / 255,
        101.90141914367175 / 255,
        1
      ]),
      cull(131072 /* Render */)
    ]);
    instantiate(game2, [
      transform([4.39, 0.12, 2.12], [0, -0.26, 0, 0.97], [0.1, 0.24, 0.1]),
      collide(false, 4 /* Obstacle */, 0 /* None */),
      rigid_body(0 /* Static */),
      render_colored_shadows(game2.MaterialColoredShadows, game2.MeshCylinder, [
        223.42587799466764 / 255,
        170.45995074005288 / 255,
        101.48209344005812 / 255,
        1
      ]),
      cull(131072 /* Render */)
    ]);
    instantiate(game2, [
      transform([4.05, 0.12, 1.92], [0, -0.26, 0, 0.97], [0.1, 0.24, 0.1]),
      collide(false, 4 /* Obstacle */, 0 /* None */),
      rigid_body(0 /* Static */),
      render_colored_shadows(game2.MaterialColoredShadows, game2.MeshCylinder, [
        211.40138151333954 / 255,
        164.01636893953747 / 255,
        110.7955532437805 / 255,
        1
      ]),
      cull(131072 /* Render */)
    ]);
    instantiate(game2, [
      transform([4.31, 0.77, 2.42], [0, -0.26, 0, 0.97], [0.17, 0.35, 0.88]),
      collide(false, 4 /* Obstacle */, 0 /* None */),
      rigid_body(0 /* Static */),
      render_colored_shadows(game2.MaterialColoredShadows, game2.MeshCube, [
        222.45177791058455 / 255,
        171.1203776758028 / 255,
        118.95265285463189 / 255,
        1
      ]),
      cull(131072 /* Render */)
    ]);
    instantiate(game2, [
      transform([3.89, 0.77, 2.6], [0, -0.26, 0, 0.97], [0.72, 0.35, 0.16]),
      collide(false, 4 /* Obstacle */, 0 /* None */),
      rigid_body(0 /* Static */),
      render_colored_shadows(game2.MaterialColoredShadows, game2.MeshCube, [
        211.644613196167 / 255,
        154.2605193356791 / 255,
        107.00378818911096 / 255,
        1
      ]),
      cull(131072 /* Render */)
    ]);
    instantiate(game2, [
      transform([4.25, 0.77, 1.97], [0, -0.26, 0, 0.97], [0.72, 0.35, 0.16]),
      collide(false, 4 /* Obstacle */, 0 /* None */),
      rigid_body(0 /* Static */),
      render_colored_shadows(game2.MaterialColoredShadows, game2.MeshCube, [
        216.25097614615478 / 255,
        142.17702143476137 / 255,
        110.1290487858703 / 255,
        1
      ]),
      cull(131072 /* Render */)
    ]);
    instantiate(game2, [
      transform([-2.1, 0.3, -2.4], void 0, [0.1, 0.58, 0.1]),
      collide(false, 4 /* Obstacle */, 0 /* None */),
      rigid_body(0 /* Static */),
      render_colored_shadows(game2.MaterialColoredShadows, game2.MeshCylinder, [
        228.15505036452697 / 255,
        146.19807627463732 / 255,
        119.79561702276098 / 255,
        1
      ]),
      cull(131072 /* Render */)
    ]);
    instantiate(game2, [
      transform([-1.8, 0.64, -2.7], void 0, [1.44, 0.1, 1.44]),
      collide(false, 4 /* Obstacle */, 0 /* None */),
      rigid_body(0 /* Static */),
      render_colored_shadows(game2.MaterialColoredShadows, game2.MeshCylinder, [
        223.39080055561988 / 255,
        150.59835078198225 / 255,
        100.24707033696357 / 255,
        1
      ]),
      cull(131072 /* Render */)
    ]);
    instantiate(game2, [
      transform([-1.5, 0.3, -2.4], void 0, [0.1, 0.58, 0.1]),
      collide(false, 4 /* Obstacle */, 0 /* None */),
      rigid_body(0 /* Static */),
      render_colored_shadows(game2.MaterialColoredShadows, game2.MeshCylinder, [
        206.17819210424315 / 255,
        160.58002585086902 / 255,
        105.27025267814791 / 255,
        1
      ]),
      cull(131072 /* Render */)
    ]);
    instantiate(game2, [
      transform([-1.5, 0.3, -3], void 0, [0.1, 0.58, 0.1]),
      collide(false, 4 /* Obstacle */, 0 /* None */),
      rigid_body(0 /* Static */),
      render_colored_shadows(game2.MaterialColoredShadows, game2.MeshCylinder, [
        215.58875903955973 / 255,
        160.93233100985677 / 255,
        119.00633107660987 / 255,
        1
      ]),
      cull(131072 /* Render */)
    ]);
    instantiate(game2, [
      transform([-2.1, 0.3, -3], void 0, [0.1, 0.58, 0.1]),
      collide(false, 4 /* Obstacle */, 0 /* None */),
      rigid_body(0 /* Static */),
      render_colored_shadows(game2.MaterialColoredShadows, game2.MeshCylinder, [
        229.74192933418064 / 255,
        156.02002200597602 / 255,
        90.99884287085209 / 255,
        1
      ]),
      cull(131072 /* Render */)
    ]);
    instantiate(game2, [
      transform([4.2, 0, 0], [0, -0.04, 0, 1], [0.77, 0.32, 0.19]),
      collide(false, 4 /* Obstacle */, 0 /* None */),
      rigid_body(0 /* Static */),
      render_colored_shadows(game2.MaterialColoredShadows, game2.MeshCube, [
        210.55331212840096 / 255,
        149.15500739387966 / 255,
        90.97531226729558 / 255,
        1
      ]),
      cull(131072 /* Render */)
    ]);
    instantiate(game2, [
      transform([0, 0, 1.8], [0, -0.68, 0, 0.74], [0.67, 0.28, 0.17]),
      collide(false, 4 /* Obstacle */, 0 /* None */),
      rigid_body(0 /* Static */),
      render_colored_shadows(game2.MaterialColoredShadows, game2.MeshCube, [
        228.0947129908641 / 255,
        164.12887179178125 / 255,
        109.02880895294976 / 255,
        1
      ]),
      cull(131072 /* Render */)
    ]);
    instantiate(game2, [
      transform([2.8, 0, -2.9], [0, -0.68, 0, 0.74], [0.58, 0.24, 0.14]),
      collide(false, 4 /* Obstacle */, 0 /* None */),
      rigid_body(0 /* Static */),
      render_colored_shadows(game2.MaterialColoredShadows, game2.MeshCube, [
        215.83935583278594 / 255,
        151.9767469527537 / 255,
        94.25064015994997 / 255,
        1
      ]),
      cull(131072 /* Render */)
    ]);
    instantiate(game2, [
      transform([0.8, 0.05, -3.7], [0.71, -0.03, 0.03, 0.71], [0.1, 0.35, 0.1]),
      collide(false, 4 /* Obstacle */, 0 /* None */),
      rigid_body(0 /* Static */),
      render_colored_shadows(game2.MaterialColoredShadows, game2.MeshCylinder, [
        221.52197202680028 / 255,
        167.28940249213707 / 255,
        105.28919513065175 / 255,
        1
      ]),
      cull(131072 /* Render */)
    ]);
    instantiate(game2, [
      transform([1, 0.05, -3.9], [0.71, 0.03, -0.03, 0.71], [0.1, 0.35, 0.1]),
      collide(false, 4 /* Obstacle */, 0 /* None */),
      rigid_body(0 /* Static */),
      render_colored_shadows(game2.MaterialColoredShadows, game2.MeshCylinder, [
        227.26616911162864 / 255,
        147.601876127876 / 255,
        117.49229707065302 / 255,
        1
      ]),
      cull(131072 /* Render */)
    ]);
    instantiate(game2, [...blueprint_face(game2), transform([-3.8, 0.7, 4.1])]);
  }

  // ../src/scenes/sce_room.ts
  function scene_room(game2) {
    game2.World = new World();
    game2.ViewportResized = true;
    map_room1(game2);
    instantiate(game2, [...blueprint_camera_follow(game2), transform([0, 10, 0])]);
    instantiate(game2, [
      ...blueprint_sun(game2),
      transform(void 0, from_euler([0, 0, 0, 0], -45, 45, 0))
    ]);
    instantiate(game2, [
      transform([0, 15, 0]),
      control_always(null, [0, 1, 0, 0]),
      move(0, 1),
      children([
        transform([0, 0, 5]),
        children([transform(), shake(3), spawn(blueprint_note, 1.5)])
      ])
    ]);
    instantiate(game2, [
      transform([0, -15, 0], void 0, [100, 1, 100]),
      collide(false, 0 /* None */, 1 /* Player */),
      trigger(1 /* Player */, 1 /* GameTitle */)
    ]);
  }

  // ../src/actions.ts
  function dispatch(game2, action, payload) {
    switch (action) {
      case 0 /* ToggleFullscreen */: {
        if (document.fullscreenElement) {
          document.exitFullscreen();
        } else {
          document.body.requestFullscreen();
        }
        break;
      }
      case 1 /* GameTitle */: {
        game2.PlayState = "title";
        requestAnimationFrame(() => scene_room(game2));
        break;
      }
      case 2 /* GameStart */: {
        game2.PlayState = "playing";
        break;
      }
      case 3 /* CollectItem */: {
        let [item_entity, other_entity] = payload;
        let other_collide = game2.World.Collide[other_entity];
        if (other_collide.Layers & 1 /* Player */) {
          game2.Sleepiness--;
          if (game2.Sleepiness <= 0) {
            game2.PlayState = "win";
          }
        }
        destroy_all(game2.World, item_entity);
        break;
      }
      case 4 /* Snooze */: {
        let [hand_entity, other_entity] = payload;
        let other_collide = game2.World.Collide[other_entity];
        if (other_collide.Layers & 1 /* Player */) {
          game2.PlayState = "lose";
        } else {
          let hand_collide = game2.World.Collide[hand_entity];
          hand_collide.Mask &= ~1 /* Player */;
        }
        break;
      }
    }
  }

  // ../src/index.ts
  var game = new Game();
  scene_room(game);
  game.Start();
  window.$ = dispatch.bind(null, game);
  window.game = game;
})();
