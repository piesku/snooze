(() => {
  // ../common/webgl.ts
  var GL_DEPTH_BUFFER_BIT = 256;
  var GL_COLOR_BUFFER_BIT = 16384;
  var GL_POINTS = 0;
  var GL_LINE_LOOP = 2;
  var GL_TRIANGLES = 4;
  var GL_SRC_ALPHA = 770;
  var GL_ONE_MINUS_SRC_ALPHA = 771;
  var GL_STATIC_DRAW = 35044;
  var GL_ARRAY_BUFFER = 34962;
  var GL_ELEMENT_ARRAY_BUFFER = 34963;
  var GL_CULL_FACE = 2884;
  var GL_BLEND = 3042;
  var GL_DEPTH_TEST = 2929;
  var GL_CW = 2304;
  var GL_DATA_UNSIGNED_BYTE = 5121;
  var GL_DATA_UNSIGNED_INT = 5125;
  var GL_DATA_FLOAT = 5126;
  var GL_DEPTH_COMPONENT = 6402;
  var GL_RGBA = 6408;
  var GL_FRAGMENT_SHADER = 35632;
  var GL_VERTEX_SHADER = 35633;
  var GL_NEAREST = 9728;
  var GL_LINEAR = 9729;
  var GL_TEXTURE_MAG_FILTER = 10240;
  var GL_TEXTURE_MIN_FILTER = 10241;
  var GL_TEXTURE_WRAP_S = 10242;
  var GL_TEXTURE_WRAP_T = 10243;
  var GL_TEXTURE_2D = 3553;
  var GL_TEXTURE0 = 33984;
  var GL_TEXTURE1 = 33985;
  var GL_TEXTURE2 = 33986;
  var GL_TEXTURE3 = 33987;
  var GL_CLAMP_TO_EDGE = 33071;
  var GL_FRAMEBUFFER = 36160;
  var GL_COLOR_ATTACHMENT0 = 36064;
  var GL_DEPTH_ATTACHMENT = 36096;
  var GL_FRAMEBUFFER_COMPLETE = 36053;
  var GL_RGBA8 = 32856;
  var GL_TEXTURE_COMPARE_MODE = 34892;
  var GL_COMPARE_REF_TO_TEXTURE = 34894;
  var GL_RGBA32F = 34836;
  var GL_RGBA16F = 34842;
  var GL_DEPTH_COMPONENT24 = 33190;
  var GL_UNSIGNED_SHORT = 5123;
  var GL_FLOAT = 5126;

  // ../common/game.ts
  var update_span = document.getElementById("update");
  var delta_span = document.getElementById("delta");
  var fps_span = document.getElementById("fps");
  var step = 1 / 60;
  var GameImpl = class {
    constructor() {
      this.Running = 0;
      this.Now = 0;
      this.ViewportWidth = window.innerWidth;
      this.ViewportHeight = window.innerHeight;
      this.ViewportResized = true;
      this.InputState = {
        MouseX: 0,
        MouseY: 0
      };
      this.InputDelta = {
        MouseX: 0,
        MouseY: 0
      };
      this.InputDistance = {
        Mouse: 0,
        Mouse0: 0,
        Mouse1: 0,
        Mouse2: 0,
        Touch0: 0,
        Touch1: 0
      };
      this.InputTouches = {};
      this.Ui = document.querySelector("main");
      document.addEventListener("visibilitychange", () => document.hidden ? this.Stop() : this.Start());
      this.Ui.addEventListener("contextmenu", (evt) => evt.preventDefault());
      this.Ui.addEventListener("mousedown", (evt) => {
        this.InputState[`Mouse${evt.button}`] = 1;
        this.InputDelta[`Mouse${evt.button}`] = 1;
      });
      this.Ui.addEventListener("mouseup", (evt) => {
        this.InputState[`Mouse${evt.button}`] = 0;
        this.InputDelta[`Mouse${evt.button}`] = -1;
      });
      this.Ui.addEventListener("mousemove", (evt) => {
        this.InputState["MouseX"] = evt.clientX;
        this.InputState["MouseY"] = evt.clientY;
        this.InputDelta["MouseX"] = evt.movementX;
        this.InputDelta["MouseY"] = evt.movementY;
      });
      this.Ui.addEventListener("wheel", (evt) => {
        evt.preventDefault();
        this.InputDelta["WheelY"] = evt.deltaY;
      });
      this.Ui.addEventListener("touchstart", (evt) => {
        if (evt.target === this.Ui) {
          evt.preventDefault();
        }
        if (evt.touches.length === 1) {
          this.InputTouches = {};
        }
        for (let i = 0; i < evt.touches.length; i++) {
          let touch = evt.touches[i];
          this.InputTouches[touch.identifier] = i;
        }
        for (let i = 0; i < evt.changedTouches.length; i++) {
          let touch = evt.changedTouches[i];
          let index = this.InputTouches[touch.identifier];
          this.InputState[`Touch${index}`] = 1;
          this.InputState[`Touch${index}X`] = touch.clientX;
          this.InputState[`Touch${index}Y`] = touch.clientY;
          this.InputDelta[`Touch${index}`] = 1;
          this.InputDelta[`Touch${index}X`] = 0;
          this.InputDelta[`Touch${index}Y`] = 0;
        }
      });
      this.Ui.addEventListener("touchmove", (evt) => {
        if (evt.target === this.Ui) {
          evt.preventDefault();
        }
        for (let i = 0; i < evt.changedTouches.length; i++) {
          let touch = evt.changedTouches[i];
          let index = this.InputTouches[touch.identifier];
          this.InputDelta[`Touch${index}X`] = touch.clientX - this.InputState[`Touch${index}X`];
          this.InputDelta[`Touch${index}Y`] = touch.clientY - this.InputState[`Touch${index}Y`];
          this.InputState[`Touch${index}X`] = touch.clientX;
          this.InputState[`Touch${index}Y`] = touch.clientY;
        }
      });
      this.Ui.addEventListener("touchend", (evt) => {
        if (evt.target === this.Ui) {
          evt.preventDefault();
        }
        for (let i = 0; i < evt.changedTouches.length; i++) {
          let touch = evt.changedTouches[i];
          let index = this.InputTouches[touch.identifier];
          this.InputState[`Touch${index}`] = 0;
          this.InputDelta[`Touch${index}`] = -1;
        }
      });
      this.Ui.addEventListener("touchcancel", (evt) => {
        for (let i = 0; i < evt.changedTouches.length; i++) {
          let touch = evt.changedTouches[i];
          let index = this.InputTouches[touch.identifier];
          this.InputState[`Touch${index}`] = 0;
          this.InputDelta[`Touch${index}`] = -1;
        }
      });
      window.addEventListener("keydown", (evt) => {
        if (!evt.repeat) {
          this.InputState[evt.code] = 1;
          this.InputDelta[evt.code] = 1;
        }
      });
      window.addEventListener("keyup", (evt) => {
        this.InputState[evt.code] = 0;
        this.InputDelta[evt.code] = -1;
      });
    }
    Start() {
      let accumulator = 0;
      let last = performance.now();
      let tick = (now) => {
        let delta = (now - last) / 1e3;
        last = now;
        this.Running = requestAnimationFrame(tick);
        this.FrameSetup(delta);
        accumulator += delta;
        while (accumulator >= step) {
          accumulator -= step;
          this.FixedUpdate(step);
        }
        this.FrameUpdate(delta);
        this.FrameReset(delta);
      };
      this.Stop();
      tick(last);
    }
    Stop() {
      cancelAnimationFrame(this.Running);
      this.Running = 0;
    }
    FrameSetup(delta) {
      this.Now = performance.now();
      let mouse_distance = Math.abs(this.InputDelta["MouseX"]) + Math.abs(this.InputDelta["MouseY"]);
      this.InputDistance["Mouse"] += mouse_distance;
      if (this.InputState["Mouse0"] === 1) {
        this.InputDistance["Mouse0"] += mouse_distance;
      }
      if (this.InputState["Mouse1"] === 1) {
        this.InputDistance["Mouse1"] += mouse_distance;
      }
      if (this.InputState["Mouse2"] === 1) {
        this.InputDistance["Mouse2"] += mouse_distance;
      }
      if (this.InputState["Touch0"] === 1) {
        this.InputDistance["Touch0"] += Math.abs(this.InputDelta["Touch0X"]) + Math.abs(this.InputDelta["Touch0Y"]);
      }
      if (this.InputState["Touch1"] === 1) {
        this.InputDistance["Touch1"] += Math.abs(this.InputDelta["Touch1X"]) + Math.abs(this.InputDelta["Touch1Y"]);
      }
    }
    FixedUpdate(step2) {
    }
    FrameUpdate(delta) {
    }
    FrameReset(delta) {
      this.ViewportResized = false;
      if (this.InputDelta["Mouse0"] === -1) {
        this.InputDistance["Mouse0"] = 0;
      }
      if (this.InputDelta["Mouse1"] === -1) {
        this.InputDistance["Mouse1"] = 0;
      }
      if (this.InputDelta["Mouse2"] === -1) {
        this.InputDistance["Mouse2"] = 0;
      }
      if (this.InputDelta["Touch0"] === -1) {
        this.InputDistance["Touch0"] = 0;
      }
      if (this.InputDelta["Touch1"] === -1) {
        this.InputDistance["Touch1"] = 0;
      }
      for (let name in this.InputDelta) {
        this.InputDelta[name] = 0;
      }
      let update18 = performance.now() - this.Now;
      if (update_span) {
        update_span.textContent = update18.toFixed(1);
      }
      if (delta_span) {
        delta_span.textContent = (delta * 1e3).toFixed(1);
      }
      if (fps_span) {
        fps_span.textContent = (1 / delta).toFixed();
      }
    }
  };
  var Game3D = class extends GameImpl {
    constructor() {
      super();
      this.Canvas2D = document.querySelector("#billboard");
      this.Context2D = this.Canvas2D.getContext("2d");
      this.Canvas3D = document.querySelector("#scene");
      this.Gl = this.Canvas3D.getContext("webgl2");
      this.Audio = new AudioContext();
      this.Cameras = [];
      this.Targets = {};
      this.Gl.enable(GL_DEPTH_TEST);
      this.Gl.enable(GL_CULL_FACE);
      this.Gl.blendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);
    }
    FrameSetup(delta) {
      super.FrameSetup(delta);
      this.Cameras = [];
    }
  };
  function instantiate(game2, blueprint) {
    let entity = game2.World.CreateEntity();
    for (let mixin of blueprint) {
      mixin(game2, entity);
    }
    return entity;
  }

  // ../common/world.ts
  var WorldImpl = class {
    constructor(capacity = 1e4) {
      this.Signature = [];
      this.Graveyard = [];
      this.Capacity = capacity;
    }
    CreateEntity() {
      if (this.Graveyard.length > 0) {
        return this.Graveyard.pop();
      }
      if (false) {
        throw new Error("No more entities available.");
      }
      return this.Signature.push(0) - 1;
    }
    DestroyEntity(entity) {
      this.Signature[entity] = 0;
      if (false) {
        throw new Error("Entity already in graveyard.");
      }
      this.Graveyard.push(entity);
    }
  };
  function first_having(world, query, start_at = 0) {
    for (let i = start_at; i < world.Signature.length; i++) {
      if ((world.Signature[i] & query) === query) {
        return i;
      }
    }
  }

  // ../src/world.ts
  var World = class extends WorldImpl {
    constructor() {
      super(...arguments);
      this.Animate = [];
      this.AudioSource = [];
      this.Camera = [];
      this.Children = [];
      this.Collide = [];
      this.ControlAlways = [];
      this.ControlPlayer = [];
      this.Draw = [];
      this.EmitParticles = [];
      this.Lifespan = [];
      this.Light = [];
      this.Mimic = [];
      this.Move = [];
      this.Named = [];
      this.Render = [];
      this.RigidBody = [];
      this.Shake = [];
      this.Spawn = [];
      this.Task = [];
      this.Toggle = [];
      this.Transform = [];
      this.Trigger = [];
    }
  };

  // ../src/components/com_children.ts
  function children(...blueprints) {
    return (game2, entity) => {
      if (game2.World.Signature[entity] & 16 /* Children */) {
      } else {
        game2.World.Signature[entity] |= 16 /* Children */;
        game2.World.Children[entity] = {
          Children: []
        };
      }
      let child_entities = game2.World.Children[entity].Children;
      for (let blueprint of blueprints) {
        let child = instantiate(game2, blueprint);
        child_entities.push(child);
      }
    };
  }
  function* query_down(world, entity, mask) {
    if ((world.Signature[entity] & mask) === mask) {
      yield entity;
    }
    if (world.Signature[entity] & 16 /* Children */) {
      for (let child of world.Children[entity].Children) {
        yield* query_down(world, child, mask);
      }
    }
  }
  function destroy_all(world, entity) {
    if (world.Signature[entity] & 16 /* Children */) {
      for (let child of world.Children[entity].Children) {
        destroy_all(world, child);
      }
    }
    world.DestroyEntity(entity);
  }

  // ../src/actions.ts
  function dispatch(game2, action, payload) {
    switch (action) {
      case 0 /* ToggleFullscreen */: {
        if (document.fullscreenElement) {
          document.exitFullscreen();
        } else {
          document.body.requestFullscreen();
        }
        break;
      }
      case 1 /* GameStart */: {
        game2.PlayState = "playing";
        break;
      }
      case 2 /* CollectItem */: {
        let [item_entity] = payload;
        destroy_all(game2.World, item_entity);
        game2.ItemsCollected++;
        break;
      }
    }
  }

  // ../common/texture.ts
  function resize_texture_rgba8(gl, texture, width, height) {
    gl.bindTexture(GL_TEXTURE_2D, texture);
    gl.texImage2D(GL_TEXTURE_2D, 0, GL_RGBA8, width, height, 0, GL_RGBA, GL_DATA_UNSIGNED_BYTE, null);
    gl.texParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);
    gl.texParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);
    return texture;
  }
  function resize_texture_rgba16f(gl, texture, width, height) {
    gl.bindTexture(GL_TEXTURE_2D, texture);
    gl.texImage2D(GL_TEXTURE_2D, 0, GL_RGBA16F, width, height, 0, GL_RGBA, GL_DATA_FLOAT, null);
    gl.texParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);
    gl.texParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);
    return texture;
  }
  function resize_texture_rgba32f(gl, texture, width, height) {
    gl.bindTexture(GL_TEXTURE_2D, texture);
    gl.texImage2D(GL_TEXTURE_2D, 0, GL_RGBA32F, width, height, 0, GL_RGBA, GL_DATA_FLOAT, null);
    gl.texParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_NEAREST);
    gl.texParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_NEAREST);
    return texture;
  }
  function resize_texture_depth24(gl, texture, width, height) {
    gl.bindTexture(GL_TEXTURE_2D, texture);
    gl.texImage2D(GL_TEXTURE_2D, 0, GL_DEPTH_COMPONENT24, width, height, 0, GL_DEPTH_COMPONENT, GL_DATA_UNSIGNED_INT, null);
    gl.texParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);
    gl.texParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);
    gl.texParameteri(GL_TEXTURE_2D, GL_TEXTURE_COMPARE_MODE, GL_COMPARE_REF_TO_TEXTURE);
    gl.texParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_CLAMP_TO_EDGE);
    gl.texParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_CLAMP_TO_EDGE);
    return texture;
  }

  // ../common/framebuffer.ts
  function resize_forward_target(gl, target, width, height) {
    target.Width = width;
    target.Height = height;
    resize_texture_rgba8(gl, target.ColorTexture, target.Width, target.Height);
    resize_texture_depth24(gl, target.DepthTexture, target.Width, target.Height);
  }
  function resize_hdr_target(gl, target, width, height) {
    target.Width = width;
    target.Height = height;
    resize_texture_rgba16f(gl, target.ColorTexture, target.Width, target.Height);
    resize_texture_depth24(gl, target.DepthTexture, target.Width, target.Height);
  }
  function resize_deferred_target(gl, target, width, height) {
    target.Width = width;
    target.Height = height;
    resize_texture_rgba32f(gl, target.DiffuseTexture, target.Width, target.Height);
    resize_texture_rgba32f(gl, target.SpecularTexture, target.Width, target.Height);
    resize_texture_rgba32f(gl, target.PositionTexture, target.Width, target.Height);
    resize_texture_rgba32f(gl, target.NormalTexture, target.Width, target.Height);
    resize_texture_depth24(gl, target.DepthTexture, target.Width, target.Height);
  }
  function create_depth_target(gl, width, height) {
    let target = {
      Kind: 3 /* Depth */,
      Framebuffer: gl.createFramebuffer(),
      Width: width,
      Height: height,
      ResizeToViewport: false,
      ColorTexture: resize_texture_rgba8(gl, gl.createTexture(), width, height),
      DepthTexture: resize_texture_depth24(gl, gl.createTexture(), width, height)
    };
    gl.bindFramebuffer(GL_FRAMEBUFFER, target.Framebuffer);
    gl.framebufferTexture2D(GL_FRAMEBUFFER, GL_DEPTH_ATTACHMENT, GL_TEXTURE_2D, target.DepthTexture, 0);
    gl.framebufferTexture2D(GL_FRAMEBUFFER, GL_COLOR_ATTACHMENT0, GL_TEXTURE_2D, target.ColorTexture, 0);
    let status = gl.checkFramebufferStatus(GL_FRAMEBUFFER);
    if (status != GL_FRAMEBUFFER_COMPLETE) {
      throw new Error(`Failed to set up the framebuffer (${status}).`);
    }
    return target;
  }

  // ../materials/light.ts
  var MAX_FORWARD_LIGHTS = 8;
  var INCLUDE_GAMMA_CORRECTION = `
    // Expand (decode) an sRGB color to linear color space, similar to how the
    // monitor does it when displaying pixels to the user.

    // Convert ~sRGB to linear.
    vec3 GAMMA_DECODE(vec3 rgb) {
        return pow(rgb, vec3(2.2));
    }

    // Convert ~sRGBA to linear.
    vec4 GAMMA_DECODE(vec4 color) {
        return vec4(pow(color.rgb, vec3(2.2)), color.a);
    }

    // Compress (encode) a linear RGB color to sRGB. Usually this is done after
    // lighting computations and just before sending the color to the canvas, to
    // compensate for the loss in brightness caused by the monitor.

    // Convert linear to ~sRGB.
    vec3 GAMMA_ENCODE(vec3 rgb) {
        return pow(rgb, vec3(1.0 / 2.2));
    }

    // Convert linear to ~sRGBA.
    vec4 GAMMA_ENCODE(vec4 color) {
        return vec4(pow(color.rgb, vec3(1.0 / 2.2)), color.a);
    }
`;

  // ../common/material.ts
  function link(gl, vertex5, fragment5) {
    let program = gl.createProgram();
    gl.attachShader(program, compile(gl, GL_VERTEX_SHADER, vertex5));
    gl.attachShader(program, compile(gl, GL_FRAGMENT_SHADER, fragment5));
    gl.linkProgram(program);
    if (false) {
      throw new Error(gl.getProgramInfoLog(program));
    }
    return program;
  }
  function compile(gl, type, source) {
    let shader = gl.createShader(type);
    gl.shaderSource(shader, source);
    gl.compileShader(shader);
    if (false) {
      throw new Error(gl.getShaderInfoLog(shader));
    }
    return shader;
  }

  // ../materials/mat_forward_colored_shadows.ts
  var vertex = `#version 300 es

    uniform mat4 pv;
    uniform mat4 world;
    uniform mat4 self;

    layout(location=${0 /* Position */}) in vec4 attr_position;
    layout(location=${1 /* Normal */}) in vec3 attr_normal;

    out vec4 vert_position;
    out vec3 vert_normal;

    void main() {
        vert_position = world * attr_position;
        vert_normal = (vec4(attr_normal, 0.0) * self).xyz;
        gl_Position = pv * vert_position;
    }
`;
  var fragment = `#version 300 es

    precision mediump float;
    precision lowp sampler2DShadow;

    uniform vec3 eye;
    uniform vec4 diffuse_color;
    uniform vec4 specular_color;
    uniform vec4 emissive_color;
    uniform vec4 light_positions[${MAX_FORWARD_LIGHTS}];
    uniform vec4 light_details[${MAX_FORWARD_LIGHTS}];
    uniform mat4 shadow_space;
    uniform sampler2DShadow shadow_map;

    in vec4 vert_position;
    in vec3 vert_normal;

    out vec4 frag_color;

    ${INCLUDE_GAMMA_CORRECTION}

    // How much shadow to apply at world_pos, expressed as [min, 1]:
    // min = completely in shadow, 1 = completely not in shadow
    float shadow_factor(vec4 world_pos, float min) {
        vec4 shadow_space_pos = shadow_space * world_pos;
        vec3 shadow_space_ndc = shadow_space_pos.xyz / shadow_space_pos.w;
        // Transform the [-1, 1] NDC to [0, 1] to match the shadow texture data.
        shadow_space_ndc = shadow_space_ndc * 0.5 + 0.5;

        // Add shadow bias to avoid shadow acne.
        shadow_space_ndc.z -= 0.001;

        return texture(shadow_map, shadow_space_ndc) * (1.0 - min) + min;
    }

    void main() {
        vec3 world_normal = normalize(vert_normal);

        vec3 view_dir = eye - vert_position.xyz;
        vec3 view_normal = normalize(view_dir);

        // Ambient light.
        vec3 light_acc = GAMMA_DECODE(diffuse_color.rgb);

        for (int i = 0; i < 0; i++) {
            int light_kind = int(light_positions[i].w);
            if (light_kind == ${0 /* Inactive */}) {
                break;
            }

            vec3 light_rgb = GAMMA_DECODE(light_details[i].rgb);
            float light_intensity = light_details[i].a;

            vec3 light_normal;
            if (light_kind == ${2 /* Directional */}) {
                light_normal = light_positions[i].xyz;
            } else if (light_kind == ${3 /* Point */}) {
                vec3 light_dir = light_positions[i].xyz - vert_position.xyz;
                float light_dist = length(light_dir);
                light_normal = light_dir / light_dist;
                // Distance attenuation.
                light_intensity /= (light_dist * light_dist);
            }

            float diffuse_factor = dot(world_normal, light_normal);
            if (diffuse_factor > 0.0) {
                // Diffuse color.
                light_acc += GAMMA_DECODE(diffuse_color.rgb) * diffuse_factor * light_rgb * light_intensity;

                if (specular_color.a > 0.0) {
                    // Phong reflection model.
                    // vec3 r = reflect(-light_normal, world_normal);
                    // float specular_angle = max(dot(r, view_normal), 0.0);
                    // float specular_factor = pow(specular_angle, specular_color.a);

                    // Blinn-Phong reflection model.
                    vec3 h = normalize(light_normal + view_normal);
                    float specular_angle = max(dot(h, world_normal), 0.0);
                    float specular_factor = pow(specular_angle, specular_color.a);

                    // Specular color.
                    light_acc += GAMMA_DECODE(specular_color.rgb) * specular_factor * light_rgb * light_intensity;
                }
            }
        }

        vec3 emissive_rgb = GAMMA_DECODE(emissive_color.rgb) * emissive_color.a;
        vec3 shaded_rgb = light_acc * shadow_factor(vert_position, 0.5);
        frag_color= vec4(GAMMA_ENCODE(shaded_rgb + emissive_rgb), diffuse_color.a);
    }
`;
  function mat_forward_colored_shadows(gl) {
    let program = link(gl, vertex, fragment);
    return {
      Mode: GL_TRIANGLES,
      Program: program,
      Locations: {
        Pv: gl.getUniformLocation(program, "pv"),
        World: gl.getUniformLocation(program, "world"),
        Self: gl.getUniformLocation(program, "self"),
        DiffuseColor: gl.getUniformLocation(program, "diffuse_color"),
        SpecularColor: gl.getUniformLocation(program, "specular_color"),
        EmissiveColor: gl.getUniformLocation(program, "emissive_color"),
        Eye: gl.getUniformLocation(program, "eye"),
        LightPositions: gl.getUniformLocation(program, "light_positions"),
        LightDetails: gl.getUniformLocation(program, "light_details"),
        ShadowSpace: gl.getUniformLocation(program, "shadow_space"),
        ShadowMap: gl.getUniformLocation(program, "shadow_map")
      }
    };
  }

  // ../materials/mat_forward_colored_unlit.ts
  var vertex2 = `#version 300 es

    uniform mat4 pv;
    uniform mat4 world;

    layout(location=${0 /* Position */}) in vec4 attr_position;

    void main() {
        gl_Position = pv * world * attr_position;
    }
`;
  var fragment2 = `#version 300 es

    precision mediump float;

    uniform vec4 color;

    out vec4 frag_color;

    void main() {
        frag_color = color;
    }
`;
  function mat_forward_colored_unlit(gl, mode = GL_TRIANGLES) {
    let program = link(gl, vertex2, fragment2);
    return {
      Mode: mode,
      Program: program,
      Locations: {
        Pv: gl.getUniformLocation(program, "pv"),
        World: gl.getUniformLocation(program, "world"),
        Color: gl.getUniformLocation(program, "color")
      }
    };
  }
  function mat_forward_colored_wireframe(gl) {
    return mat_forward_colored_unlit(gl, GL_LINE_LOOP);
  }

  // ../materials/mat_forward_depth.ts
  var vertex3 = `#version 300 es


    uniform mat4 pv;
    uniform mat4 world;

    layout(location=${0 /* Position */}) in vec4 attr_position;

    void main() {
        gl_Position = pv * world * attr_position;
    }
`;
  var fragment3 = `#version 300 es

    precision mediump float;

    out vec4 frag_color;

    void main() {
        // Visualization only. Actual z is saved in the depth buffer.
        float z = gl_FragCoord.z * 10.0;
        frag_color = vec4(z, z, z, 1.0);
    }
`;
  function mat_forward_depth(gl) {
    let program = link(gl, vertex3, fragment3);
    return {
      Mode: GL_TRIANGLES,
      Program: program,
      Locations: {
        Pv: gl.getUniformLocation(program, "pv"),
        World: gl.getUniformLocation(program, "world")
      }
    };
  }

  // ../materials/mat_forward_particles_colored.ts
  var vertex4 = `#version 300 es

    uniform mat4 pv;
    uniform vec4 color_start;
    uniform vec4 color_end;
    // [x: lifespan, y: speed, z: size_start, w: size_end];
    uniform vec4 details;

    // [x, y, z, w: age]
    in vec4 attr_origin_age;
    in vec3 attr_direction;

    out vec4 vert_color;

    void main() {
        // Move the particle along the direction axis.
        vec3 velocity = attr_direction * details.y;
        gl_Position = pv * vec4(attr_origin_age.xyz + velocity * attr_origin_age.w, 1.0);

        // Interpolate color and size.
        float t = attr_origin_age.w / details.x;
        gl_PointSize = mix(details.z, details.w, t);
        vert_color = mix(color_start, color_end, t);
    }
`;
  var fragment4 = `#version 300 es

    precision mediump float;

    in vec4 vert_color;

    out vec4 frag_color;

    void main() {
        frag_color = vert_color;
    }
`;
  function mat_forward_particles_colored(gl) {
    let program = link(gl, vertex4, fragment4);
    return {
      Mode: GL_POINTS,
      Program: program,
      Locations: {
        Pv: gl.getUniformLocation(program, "pv"),
        ColorStart: gl.getUniformLocation(program, "color_start"),
        ColorEnd: gl.getUniformLocation(program, "color_end"),
        Details: gl.getUniformLocation(program, "details"),
        OriginAge: gl.getAttribLocation(program, "attr_origin_age"),
        Direction: gl.getAttribLocation(program, "attr_direction")
      }
    };
  }

  // ../meshes/body.ts
  function mesh_body(gl) {
    let vao = gl.createVertexArray();
    gl.bindVertexArray(vao);
    let vertex_buf = gl.createBuffer();
    gl.bindBuffer(GL_ARRAY_BUFFER, vertex_buf);
    gl.bufferData(GL_ARRAY_BUFFER, vertex_arr, GL_STATIC_DRAW);
    gl.enableVertexAttribArray(0 /* Position */);
    gl.vertexAttribPointer(0 /* Position */, 3, GL_FLOAT, false, 0, 0);
    let normal_buf = gl.createBuffer();
    gl.bindBuffer(GL_ARRAY_BUFFER, normal_buf);
    gl.bufferData(GL_ARRAY_BUFFER, normal_arr, GL_STATIC_DRAW);
    gl.enableVertexAttribArray(1 /* Normal */);
    gl.vertexAttribPointer(1 /* Normal */, 3, GL_FLOAT, false, 0, 0);
    let texcoord_buf = gl.createBuffer();
    gl.bindBuffer(GL_ARRAY_BUFFER, texcoord_buf);
    gl.bufferData(GL_ARRAY_BUFFER, texcoord_arr, GL_STATIC_DRAW);
    gl.enableVertexAttribArray(2 /* TexCoord */);
    gl.vertexAttribPointer(2 /* TexCoord */, 2, GL_FLOAT, false, 0, 0);
    let weights_buf = gl.createBuffer();
    gl.bindBuffer(GL_ARRAY_BUFFER, weights_buf);
    gl.bufferData(GL_ARRAY_BUFFER, weights_arr, GL_STATIC_DRAW);
    gl.enableVertexAttribArray(5 /* Weights */);
    gl.vertexAttribPointer(5 /* Weights */, 4, GL_FLOAT, false, 0, 0);
    let index_buf = gl.createBuffer();
    gl.bindBuffer(GL_ELEMENT_ARRAY_BUFFER, index_buf);
    gl.bufferData(GL_ELEMENT_ARRAY_BUFFER, index_arr, GL_STATIC_DRAW);
    gl.bindVertexArray(null);
    return {
      Vao: vao,
      VertexBuffer: vertex_buf,
      VertexArray: vertex_arr,
      NormalBuffer: normal_buf,
      NormalArray: normal_arr,
      TexCoordBuffer: texcoord_buf,
      TexCoordArray: texcoord_arr,
      WeightsBuffer: weights_buf,
      WeightsArray: weights_arr,
      IndexBuffer: index_buf,
      IndexArray: index_arr,
      IndexCount: index_arr.length
    };
  }
  var vertex_arr = Float32Array.from([
    0.62,
    0.44,
    -1,
    0.62,
    0.44,
    -1,
    0.62,
    0.44,
    -1,
    0.62,
    0.44,
    -1,
    0.62,
    1,
    -0.44,
    0.62,
    1,
    -0.44,
    0.62,
    1,
    -0.44,
    0.62,
    1,
    -0.44,
    1.4,
    0.44,
    -0.44,
    1.4,
    0.44,
    -0.44,
    1.4,
    0.44,
    -0.44,
    1.4,
    0.44,
    -0.44,
    0.62,
    0.72,
    -0.93,
    0.62,
    0.72,
    -0.93,
    0.62,
    0.72,
    -0.93,
    0.62,
    0.72,
    -0.93,
    1.01,
    0.44,
    -0.93,
    1.01,
    0.44,
    -0.93,
    1.01,
    0.44,
    -0.93,
    1.01,
    0.44,
    -0.93,
    0.99,
    0.71,
    -0.85,
    0.99,
    0.71,
    -0.85,
    0.99,
    0.71,
    -0.85,
    0.99,
    0.71,
    -0.85,
    1.01,
    0.93,
    -0.44,
    1.01,
    0.93,
    -0.44,
    1.01,
    0.93,
    -0.44,
    1.01,
    0.93,
    -0.44,
    0.62,
    0.93,
    -0.72,
    0.62,
    0.93,
    -0.72,
    0.62,
    0.93,
    -0.72,
    0.62,
    0.93,
    -0.72,
    0.99,
    0.85,
    -0.71,
    0.99,
    0.85,
    -0.71,
    0.99,
    0.85,
    -0.71,
    0.99,
    0.85,
    -0.71,
    1.3,
    0.44,
    -0.72,
    1.3,
    0.44,
    -0.72,
    1.3,
    0.44,
    -0.72,
    1.3,
    0.44,
    -0.72,
    1.3,
    0.72,
    -0.44,
    1.3,
    0.72,
    -0.44,
    1.3,
    0.72,
    -0.44,
    1.3,
    0.72,
    -0.44,
    1.19,
    0.71,
    -0.71,
    1.19,
    0.71,
    -0.71,
    1.19,
    0.71,
    -0.71,
    1.19,
    0.71,
    -0.71,
    0.62,
    -1,
    -0.44,
    0.62,
    -1,
    -0.44,
    0.62,
    -1,
    -0.44,
    0.62,
    -1,
    -0.44,
    0.62,
    -0.44,
    -1,
    0.62,
    -0.44,
    -1,
    0.62,
    -0.44,
    -1,
    0.62,
    -0.44,
    -1,
    1.4,
    -0.44,
    -0.44,
    1.4,
    -0.44,
    -0.44,
    1.4,
    -0.44,
    -0.44,
    1.4,
    -0.44,
    -0.44,
    0.62,
    -0.93,
    -0.72,
    0.62,
    -0.93,
    -0.72,
    0.62,
    -0.93,
    -0.72,
    0.62,
    -0.93,
    -0.72,
    1.01,
    -0.93,
    -0.44,
    1.01,
    -0.93,
    -0.44,
    1.01,
    -0.93,
    -0.44,
    1.01,
    -0.93,
    -0.44,
    0.99,
    -0.85,
    -0.71,
    0.99,
    -0.85,
    -0.71,
    0.99,
    -0.85,
    -0.71,
    0.99,
    -0.85,
    -0.71,
    1.01,
    -0.44,
    -0.93,
    1.01,
    -0.44,
    -0.93,
    1.01,
    -0.44,
    -0.93,
    1.01,
    -0.44,
    -0.93,
    0.62,
    -0.72,
    -0.93,
    0.62,
    -0.72,
    -0.93,
    0.62,
    -0.72,
    -0.93,
    0.62,
    -0.72,
    -0.93,
    0.99,
    -0.71,
    -0.85,
    0.99,
    -0.71,
    -0.85,
    0.99,
    -0.71,
    -0.85,
    0.99,
    -0.71,
    -0.85,
    1.3,
    -0.72,
    -0.44,
    1.3,
    -0.72,
    -0.44,
    1.3,
    -0.72,
    -0.44,
    1.3,
    -0.72,
    -0.44,
    1.3,
    -0.44,
    -0.72,
    1.3,
    -0.44,
    -0.72,
    1.3,
    -0.44,
    -0.72,
    1.3,
    -0.44,
    -0.72,
    1.19,
    -0.71,
    -0.71,
    1.19,
    -0.71,
    -0.71,
    1.19,
    -0.71,
    -0.71,
    1.19,
    -0.71,
    -0.71,
    1.4,
    0.44,
    0.44,
    1.4,
    0.44,
    0.44,
    1.4,
    0.44,
    0.44,
    1.4,
    0.44,
    0.44,
    0.62,
    1,
    0.44,
    0.62,
    1,
    0.44,
    0.62,
    1,
    0.44,
    0.62,
    1,
    0.44,
    0.62,
    0.44,
    1,
    0.62,
    0.44,
    1,
    0.62,
    0.44,
    1,
    0.62,
    0.44,
    1,
    1.3,
    0.72,
    0.44,
    1.3,
    0.72,
    0.44,
    1.3,
    0.72,
    0.44,
    1.3,
    0.72,
    0.44,
    1.3,
    0.44,
    0.72,
    1.3,
    0.44,
    0.72,
    1.3,
    0.44,
    0.72,
    1.3,
    0.44,
    0.72,
    1.19,
    0.71,
    0.71,
    1.19,
    0.71,
    0.71,
    1.19,
    0.71,
    0.71,
    1.19,
    0.71,
    0.71,
    0.62,
    0.93,
    0.72,
    0.62,
    0.93,
    0.72,
    0.62,
    0.93,
    0.72,
    0.62,
    0.93,
    0.72,
    1.01,
    0.93,
    0.44,
    1.01,
    0.93,
    0.44,
    1.01,
    0.93,
    0.44,
    1.01,
    0.93,
    0.44,
    0.99,
    0.85,
    0.71,
    0.99,
    0.85,
    0.71,
    0.99,
    0.85,
    0.71,
    0.99,
    0.85,
    0.71,
    1.01,
    0.44,
    0.93,
    1.01,
    0.44,
    0.93,
    1.01,
    0.44,
    0.93,
    1.01,
    0.44,
    0.93,
    0.62,
    0.72,
    0.93,
    0.62,
    0.72,
    0.93,
    0.62,
    0.72,
    0.93,
    0.62,
    0.72,
    0.93,
    0.99,
    0.71,
    0.85,
    0.99,
    0.71,
    0.85,
    0.99,
    0.71,
    0.85,
    0.99,
    0.71,
    0.85,
    1.4,
    -0.44,
    0.44,
    1.4,
    -0.44,
    0.44,
    1.4,
    -0.44,
    0.44,
    1.4,
    -0.44,
    0.44,
    0.62,
    -0.44,
    1,
    0.62,
    -0.44,
    1,
    0.62,
    -0.44,
    1,
    0.62,
    -0.44,
    1,
    0.62,
    -1,
    0.44,
    0.62,
    -1,
    0.44,
    0.62,
    -1,
    0.44,
    0.62,
    -1,
    0.44,
    1.3,
    -0.44,
    0.72,
    1.3,
    -0.44,
    0.72,
    1.3,
    -0.44,
    0.72,
    1.3,
    -0.44,
    0.72,
    1.3,
    -0.72,
    0.44,
    1.3,
    -0.72,
    0.44,
    1.3,
    -0.72,
    0.44,
    1.3,
    -0.72,
    0.44,
    1.19,
    -0.71,
    0.71,
    1.19,
    -0.71,
    0.71,
    1.19,
    -0.71,
    0.71,
    1.19,
    -0.71,
    0.71,
    0.62,
    -0.72,
    0.93,
    0.62,
    -0.72,
    0.93,
    0.62,
    -0.72,
    0.93,
    0.62,
    -0.72,
    0.93,
    1.01,
    -0.44,
    0.93,
    1.01,
    -0.44,
    0.93,
    1.01,
    -0.44,
    0.93,
    1.01,
    -0.44,
    0.93,
    0.99,
    -0.71,
    0.85,
    0.99,
    -0.71,
    0.85,
    0.99,
    -0.71,
    0.85,
    0.99,
    -0.71,
    0.85,
    1.01,
    -0.93,
    0.44,
    1.01,
    -0.93,
    0.44,
    1.01,
    -0.93,
    0.44,
    1.01,
    -0.93,
    0.44,
    0.62,
    -0.93,
    0.72,
    0.62,
    -0.93,
    0.72,
    0.62,
    -0.93,
    0.72,
    0.62,
    -0.93,
    0.72,
    0.99,
    -0.85,
    0.71,
    0.99,
    -0.85,
    0.71,
    0.99,
    -0.85,
    0.71,
    0.99,
    -0.85,
    0.71,
    -0.62,
    0.44,
    -1,
    -0.62,
    0.44,
    -1,
    -0.62,
    0.44,
    -1,
    -0.62,
    0.44,
    -1,
    -1.4,
    0.44,
    -0.44,
    -1.4,
    0.44,
    -0.44,
    -1.4,
    0.44,
    -0.44,
    -1.4,
    0.44,
    -0.44,
    -0.62,
    1,
    -0.44,
    -0.62,
    1,
    -0.44,
    -0.62,
    1,
    -0.44,
    -0.62,
    1,
    -0.44,
    -1.01,
    0.44,
    -0.93,
    -1.01,
    0.44,
    -0.93,
    -1.01,
    0.44,
    -0.93,
    -1.01,
    0.44,
    -0.93,
    -0.62,
    0.72,
    -0.93,
    -0.62,
    0.72,
    -0.93,
    -0.62,
    0.72,
    -0.93,
    -0.62,
    0.72,
    -0.93,
    -0.99,
    0.71,
    -0.85,
    -0.99,
    0.71,
    -0.85,
    -0.99,
    0.71,
    -0.85,
    -0.99,
    0.71,
    -0.85,
    -1.3,
    0.72,
    -0.44,
    -1.3,
    0.72,
    -0.44,
    -1.3,
    0.72,
    -0.44,
    -1.3,
    0.72,
    -0.44,
    -1.3,
    0.44,
    -0.72,
    -1.3,
    0.44,
    -0.72,
    -1.3,
    0.44,
    -0.72,
    -1.3,
    0.44,
    -0.72,
    -1.19,
    0.71,
    -0.71,
    -1.19,
    0.71,
    -0.71,
    -1.19,
    0.71,
    -0.71,
    -1.19,
    0.71,
    -0.71,
    -0.62,
    0.93,
    -0.72,
    -0.62,
    0.93,
    -0.72,
    -0.62,
    0.93,
    -0.72,
    -0.62,
    0.93,
    -0.72,
    -1.01,
    0.93,
    -0.44,
    -1.01,
    0.93,
    -0.44,
    -1.01,
    0.93,
    -0.44,
    -1.01,
    0.93,
    -0.44,
    -0.99,
    0.85,
    -0.71,
    -0.99,
    0.85,
    -0.71,
    -0.99,
    0.85,
    -0.71,
    -0.99,
    0.85,
    -0.71,
    -1.4,
    -0.44,
    -0.44,
    -1.4,
    -0.44,
    -0.44,
    -1.4,
    -0.44,
    -0.44,
    -1.4,
    -0.44,
    -0.44,
    -0.62,
    -0.44,
    -1,
    -0.62,
    -0.44,
    -1,
    -0.62,
    -0.44,
    -1,
    -0.62,
    -0.44,
    -1,
    -0.62,
    -1,
    -0.44,
    -0.62,
    -1,
    -0.44,
    -0.62,
    -1,
    -0.44,
    -0.62,
    -1,
    -0.44,
    -1.3,
    -0.44,
    -0.72,
    -1.3,
    -0.44,
    -0.72,
    -1.3,
    -0.44,
    -0.72,
    -1.3,
    -0.44,
    -0.72,
    -1.3,
    -0.72,
    -0.44,
    -1.3,
    -0.72,
    -0.44,
    -1.3,
    -0.72,
    -0.44,
    -1.3,
    -0.72,
    -0.44,
    -1.19,
    -0.71,
    -0.71,
    -1.19,
    -0.71,
    -0.71,
    -1.19,
    -0.71,
    -0.71,
    -1.19,
    -0.71,
    -0.71,
    -0.62,
    -0.72,
    -0.93,
    -0.62,
    -0.72,
    -0.93,
    -0.62,
    -0.72,
    -0.93,
    -0.62,
    -0.72,
    -0.93,
    -1.01,
    -0.44,
    -0.93,
    -1.01,
    -0.44,
    -0.93,
    -1.01,
    -0.44,
    -0.93,
    -1.01,
    -0.44,
    -0.93,
    -0.99,
    -0.71,
    -0.85,
    -0.99,
    -0.71,
    -0.85,
    -0.99,
    -0.71,
    -0.85,
    -0.99,
    -0.71,
    -0.85,
    -1.01,
    -0.93,
    -0.44,
    -1.01,
    -0.93,
    -0.44,
    -1.01,
    -0.93,
    -0.44,
    -1.01,
    -0.93,
    -0.44,
    -0.62,
    -0.93,
    -0.72,
    -0.62,
    -0.93,
    -0.72,
    -0.62,
    -0.93,
    -0.72,
    -0.62,
    -0.93,
    -0.72,
    -0.99,
    -0.85,
    -0.71,
    -0.99,
    -0.85,
    -0.71,
    -0.99,
    -0.85,
    -0.71,
    -0.99,
    -0.85,
    -0.71,
    -1.4,
    0.44,
    0.44,
    -1.4,
    0.44,
    0.44,
    -1.4,
    0.44,
    0.44,
    -1.4,
    0.44,
    0.44,
    -0.62,
    0.44,
    1,
    -0.62,
    0.44,
    1,
    -0.62,
    0.44,
    1,
    -0.62,
    0.44,
    1,
    -0.62,
    1,
    0.44,
    -0.62,
    1,
    0.44,
    -0.62,
    1,
    0.44,
    -0.62,
    1,
    0.44,
    -1.3,
    0.44,
    0.72,
    -1.3,
    0.44,
    0.72,
    -1.3,
    0.44,
    0.72,
    -1.3,
    0.44,
    0.72,
    -1.3,
    0.72,
    0.44,
    -1.3,
    0.72,
    0.44,
    -1.3,
    0.72,
    0.44,
    -1.3,
    0.72,
    0.44,
    -1.19,
    0.71,
    0.71,
    -1.19,
    0.71,
    0.71,
    -1.19,
    0.71,
    0.71,
    -1.19,
    0.71,
    0.71,
    -0.62,
    0.72,
    0.93,
    -0.62,
    0.72,
    0.93,
    -0.62,
    0.72,
    0.93,
    -0.62,
    0.72,
    0.93,
    -1.01,
    0.44,
    0.93,
    -1.01,
    0.44,
    0.93,
    -1.01,
    0.44,
    0.93,
    -1.01,
    0.44,
    0.93,
    -0.99,
    0.71,
    0.85,
    -0.99,
    0.71,
    0.85,
    -0.99,
    0.71,
    0.85,
    -0.99,
    0.71,
    0.85,
    -1.01,
    0.93,
    0.44,
    -1.01,
    0.93,
    0.44,
    -1.01,
    0.93,
    0.44,
    -1.01,
    0.93,
    0.44,
    -0.62,
    0.93,
    0.72,
    -0.62,
    0.93,
    0.72,
    -0.62,
    0.93,
    0.72,
    -0.62,
    0.93,
    0.72,
    -0.99,
    0.85,
    0.71,
    -0.99,
    0.85,
    0.71,
    -0.99,
    0.85,
    0.71,
    -0.99,
    0.85,
    0.71,
    -0.62,
    -1,
    0.44,
    -0.62,
    -1,
    0.44,
    -0.62,
    -1,
    0.44,
    -0.62,
    -1,
    0.44,
    -0.62,
    -0.44,
    1,
    -0.62,
    -0.44,
    1,
    -0.62,
    -0.44,
    1,
    -0.62,
    -0.44,
    1,
    -1.4,
    -0.44,
    0.44,
    -1.4,
    -0.44,
    0.44,
    -1.4,
    -0.44,
    0.44,
    -1.4,
    -0.44,
    0.44,
    -0.62,
    -0.93,
    0.72,
    -0.62,
    -0.93,
    0.72,
    -0.62,
    -0.93,
    0.72,
    -0.62,
    -0.93,
    0.72,
    -1.01,
    -0.93,
    0.44,
    -1.01,
    -0.93,
    0.44,
    -1.01,
    -0.93,
    0.44,
    -1.01,
    -0.93,
    0.44,
    -0.99,
    -0.85,
    0.71,
    -0.99,
    -0.85,
    0.71,
    -0.99,
    -0.85,
    0.71,
    -0.99,
    -0.85,
    0.71,
    -1.01,
    -0.44,
    0.93,
    -1.01,
    -0.44,
    0.93,
    -1.01,
    -0.44,
    0.93,
    -1.01,
    -0.44,
    0.93,
    -0.62,
    -0.72,
    0.93,
    -0.62,
    -0.72,
    0.93,
    -0.62,
    -0.72,
    0.93,
    -0.62,
    -0.72,
    0.93,
    -0.99,
    -0.71,
    0.85,
    -0.99,
    -0.71,
    0.85,
    -0.99,
    -0.71,
    0.85,
    -0.99,
    -0.71,
    0.85,
    -1.3,
    -0.72,
    0.44,
    -1.3,
    -0.72,
    0.44,
    -1.3,
    -0.72,
    0.44,
    -1.3,
    -0.72,
    0.44,
    -1.3,
    -0.44,
    0.72,
    -1.3,
    -0.44,
    0.72,
    -1.3,
    -0.44,
    0.72,
    -1.3,
    -0.44,
    0.72,
    -1.19,
    -0.71,
    0.71,
    -1.19,
    -0.71,
    0.71,
    -1.19,
    -0.71,
    0.71,
    -1.19,
    -0.71,
    0.71
  ]);
  var normal_arr = Float32Array.from([
    0,
    0,
    -1,
    0,
    0.26,
    -0.97,
    0.19,
    0.26,
    -0.95,
    0.19,
    0,
    -0.98,
    0,
    0.97,
    -0.26,
    0,
    1,
    0,
    0.19,
    0.95,
    -0.26,
    0.19,
    0.98,
    0,
    0.88,
    0.34,
    -0.34,
    0.94,
    0,
    -0.35,
    0.94,
    0.35,
    0,
    1,
    0,
    0,
    0,
    0.26,
    -0.97,
    0,
    0.71,
    -0.71,
    0.16,
    0.7,
    -0.7,
    0.19,
    0.26,
    -0.95,
    0.19,
    0.26,
    -0.95,
    0.19,
    0,
    -0.98,
    0.56,
    0.25,
    -0.79,
    0.58,
    0,
    -0.81,
    0.16,
    0.7,
    -0.7,
    0.19,
    0.26,
    -0.95,
    0.45,
    0.63,
    -0.63,
    0.56,
    0.25,
    -0.79,
    0.19,
    0.95,
    -0.26,
    0.19,
    0.98,
    0,
    0.56,
    0.79,
    -0.25,
    0.58,
    0.81,
    0,
    0,
    0.71,
    -0.71,
    0,
    0.97,
    -0.26,
    0.16,
    0.7,
    -0.7,
    0.19,
    0.95,
    -0.26,
    0.16,
    0.7,
    -0.7,
    0.19,
    0.95,
    -0.26,
    0.45,
    0.63,
    -0.63,
    0.56,
    0.79,
    -0.25,
    0.56,
    0.25,
    -0.79,
    0.58,
    0,
    -0.81,
    0.88,
    0.34,
    -0.34,
    0.94,
    0,
    -0.35,
    0.56,
    0.79,
    -0.25,
    0.58,
    0.81,
    0,
    0.88,
    0.34,
    -0.34,
    0.94,
    0.35,
    0,
    0.45,
    0.63,
    -0.63,
    0.56,
    0.79,
    -0.25,
    0.56,
    0.25,
    -0.79,
    0.88,
    0.34,
    -0.34,
    0,
    -1,
    0,
    0,
    -0.97,
    -0.26,
    0.19,
    -0.95,
    -0.26,
    0.19,
    -0.98,
    0,
    0,
    -0.26,
    -0.97,
    0,
    0,
    -1,
    0.19,
    -0.26,
    -0.95,
    0.19,
    0,
    -0.98,
    0.88,
    -0.34,
    -0.34,
    0.94,
    0,
    -0.35,
    0.94,
    -0.35,
    0,
    1,
    0,
    0,
    0,
    -0.97,
    -0.26,
    0,
    -0.71,
    -0.71,
    0.16,
    -0.7,
    -0.7,
    0.19,
    -0.95,
    -0.26,
    0.19,
    -0.95,
    -0.26,
    0.19,
    -0.98,
    0,
    0.56,
    -0.79,
    -0.25,
    0.58,
    -0.81,
    0,
    0.16,
    -0.7,
    -0.7,
    0.19,
    -0.95,
    -0.26,
    0.45,
    -0.63,
    -0.63,
    0.56,
    -0.79,
    -0.25,
    0.19,
    -0.26,
    -0.95,
    0.19,
    0,
    -0.98,
    0.56,
    -0.25,
    -0.79,
    0.58,
    0,
    -0.81,
    0,
    -0.71,
    -0.71,
    0,
    -0.26,
    -0.97,
    0.16,
    -0.7,
    -0.7,
    0.19,
    -0.26,
    -0.95,
    0.16,
    -0.7,
    -0.7,
    0.19,
    -0.26,
    -0.95,
    0.45,
    -0.63,
    -0.63,
    0.56,
    -0.25,
    -0.79,
    0.56,
    -0.79,
    -0.25,
    0.58,
    -0.81,
    0,
    0.88,
    -0.34,
    -0.34,
    0.94,
    -0.35,
    0,
    0.56,
    -0.25,
    -0.79,
    0.58,
    0,
    -0.81,
    0.88,
    -0.34,
    -0.34,
    0.94,
    0,
    -0.35,
    0.45,
    -0.63,
    -0.63,
    0.56,
    -0.79,
    -0.25,
    0.56,
    -0.25,
    -0.79,
    0.88,
    -0.34,
    -0.34,
    0.88,
    0.34,
    0.34,
    0.94,
    0,
    0.35,
    0.94,
    0.35,
    0,
    1,
    0,
    0,
    0,
    0.97,
    0.26,
    0,
    1,
    0,
    0.19,
    0.95,
    0.26,
    0.19,
    0.98,
    0,
    0,
    0,
    1,
    0,
    0.26,
    0.97,
    0.19,
    0.26,
    0.95,
    0.19,
    0,
    0.98,
    0.56,
    0.79,
    0.25,
    0.58,
    0.81,
    0,
    0.88,
    0.34,
    0.34,
    0.94,
    0.35,
    0,
    0.56,
    0.25,
    0.79,
    0.58,
    0,
    0.81,
    0.88,
    0.34,
    0.34,
    0.94,
    0,
    0.35,
    0.45,
    0.63,
    0.63,
    0.56,
    0.79,
    0.25,
    0.56,
    0.25,
    0.79,
    0.88,
    0.34,
    0.34,
    0,
    0.71,
    0.71,
    0,
    0.97,
    0.26,
    0.16,
    0.7,
    0.7,
    0.19,
    0.95,
    0.26,
    0.19,
    0.95,
    0.26,
    0.19,
    0.98,
    0,
    0.56,
    0.79,
    0.25,
    0.58,
    0.81,
    0,
    0.16,
    0.7,
    0.7,
    0.19,
    0.95,
    0.26,
    0.45,
    0.63,
    0.63,
    0.56,
    0.79,
    0.25,
    0.19,
    0.26,
    0.95,
    0.19,
    0,
    0.98,
    0.56,
    0.25,
    0.79,
    0.58,
    0,
    0.81,
    0,
    0.26,
    0.97,
    0,
    0.71,
    0.71,
    0.16,
    0.7,
    0.7,
    0.19,
    0.26,
    0.95,
    0.16,
    0.7,
    0.7,
    0.19,
    0.26,
    0.95,
    0.45,
    0.63,
    0.63,
    0.56,
    0.25,
    0.79,
    0.88,
    -0.34,
    0.34,
    0.94,
    0,
    0.35,
    0.94,
    -0.35,
    0,
    1,
    0,
    0,
    0,
    -0.26,
    0.97,
    0,
    0,
    1,
    0.19,
    -0.26,
    0.95,
    0.19,
    0,
    0.98,
    0,
    -1,
    0,
    0,
    -0.97,
    0.26,
    0.19,
    -0.95,
    0.26,
    0.19,
    -0.98,
    0,
    0.56,
    -0.25,
    0.79,
    0.58,
    0,
    0.81,
    0.88,
    -0.34,
    0.34,
    0.94,
    0,
    0.35,
    0.56,
    -0.79,
    0.25,
    0.58,
    -0.81,
    0,
    0.88,
    -0.34,
    0.34,
    0.94,
    -0.35,
    0,
    0.45,
    -0.63,
    0.63,
    0.56,
    -0.79,
    0.25,
    0.56,
    -0.25,
    0.79,
    0.88,
    -0.34,
    0.34,
    0,
    -0.71,
    0.71,
    0,
    -0.26,
    0.97,
    0.16,
    -0.7,
    0.7,
    0.19,
    -0.26,
    0.95,
    0.19,
    -0.26,
    0.95,
    0.19,
    0,
    0.98,
    0.56,
    -0.25,
    0.79,
    0.58,
    0,
    0.81,
    0.16,
    -0.7,
    0.7,
    0.19,
    -0.26,
    0.95,
    0.45,
    -0.63,
    0.63,
    0.56,
    -0.25,
    0.79,
    0.19,
    -0.95,
    0.26,
    0.19,
    -0.98,
    0,
    0.56,
    -0.79,
    0.25,
    0.58,
    -0.81,
    0,
    0,
    -0.97,
    0.26,
    0,
    -0.71,
    0.71,
    0.16,
    -0.7,
    0.7,
    0.19,
    -0.95,
    0.26,
    0.16,
    -0.7,
    0.7,
    0.19,
    -0.95,
    0.26,
    0.45,
    -0.63,
    0.63,
    0.56,
    -0.79,
    0.25,
    -0.19,
    0,
    -0.98,
    -0.19,
    0.26,
    -0.95,
    0,
    0,
    -1,
    0,
    0.26,
    -0.97,
    -1,
    0,
    0,
    -0.94,
    0.35,
    0,
    -0.94,
    0,
    -0.35,
    -0.88,
    0.34,
    -0.34,
    -0.19,
    0.98,
    0,
    -0.19,
    0.95,
    -0.26,
    0,
    0.97,
    -0.26,
    0,
    1,
    0,
    -0.58,
    0,
    -0.81,
    -0.56,
    0.25,
    -0.79,
    -0.19,
    0,
    -0.98,
    -0.19,
    0.26,
    -0.95,
    -0.19,
    0.26,
    -0.95,
    -0.16,
    0.7,
    -0.7,
    0,
    0.26,
    -0.97,
    0,
    0.71,
    -0.71,
    -0.56,
    0.25,
    -0.79,
    -0.45,
    0.63,
    -0.63,
    -0.19,
    0.26,
    -0.95,
    -0.16,
    0.7,
    -0.7,
    -0.94,
    0.35,
    0,
    -0.88,
    0.34,
    -0.34,
    -0.58,
    0.81,
    0,
    -0.56,
    0.79,
    -0.25,
    -0.94,
    0,
    -0.35,
    -0.88,
    0.34,
    -0.34,
    -0.58,
    0,
    -0.81,
    -0.56,
    0.25,
    -0.79,
    -0.88,
    0.34,
    -0.34,
    -0.56,
    0.25,
    -0.79,
    -0.56,
    0.79,
    -0.25,
    -0.45,
    0.63,
    -0.63,
    -0.19,
    0.95,
    -0.26,
    -0.16,
    0.7,
    -0.7,
    0,
    0.71,
    -0.71,
    0,
    0.97,
    -0.26,
    -0.58,
    0.81,
    0,
    -0.56,
    0.79,
    -0.25,
    -0.19,
    0.98,
    0,
    -0.19,
    0.95,
    -0.26,
    -0.56,
    0.79,
    -0.25,
    -0.45,
    0.63,
    -0.63,
    -0.19,
    0.95,
    -0.26,
    -0.16,
    0.7,
    -0.7,
    -1,
    0,
    0,
    -0.94,
    -0.35,
    0,
    -0.94,
    0,
    -0.35,
    -0.88,
    -0.34,
    -0.34,
    -0.19,
    0,
    -0.98,
    -0.19,
    -0.26,
    -0.95,
    0,
    -0.26,
    -0.97,
    0,
    0,
    -1,
    -0.19,
    -0.98,
    0,
    -0.19,
    -0.95,
    -0.26,
    0,
    -1,
    0,
    0,
    -0.97,
    -0.26,
    -0.94,
    0,
    -0.35,
    -0.88,
    -0.34,
    -0.34,
    -0.58,
    0,
    -0.81,
    -0.56,
    -0.25,
    -0.79,
    -0.94,
    -0.35,
    0,
    -0.88,
    -0.34,
    -0.34,
    -0.58,
    -0.81,
    0,
    -0.56,
    -0.79,
    -0.25,
    -0.88,
    -0.34,
    -0.34,
    -0.56,
    -0.25,
    -0.79,
    -0.56,
    -0.79,
    -0.25,
    -0.45,
    -0.63,
    -0.63,
    -0.19,
    -0.26,
    -0.95,
    -0.16,
    -0.7,
    -0.7,
    0,
    -0.71,
    -0.71,
    0,
    -0.26,
    -0.97,
    -0.58,
    0,
    -0.81,
    -0.56,
    -0.25,
    -0.79,
    -0.19,
    0,
    -0.98,
    -0.19,
    -0.26,
    -0.95,
    -0.56,
    -0.25,
    -0.79,
    -0.45,
    -0.63,
    -0.63,
    -0.19,
    -0.26,
    -0.95,
    -0.16,
    -0.7,
    -0.7,
    -0.58,
    -0.81,
    0,
    -0.56,
    -0.79,
    -0.25,
    -0.19,
    -0.98,
    0,
    -0.19,
    -0.95,
    -0.26,
    -0.19,
    -0.95,
    -0.26,
    -0.16,
    -0.7,
    -0.7,
    0,
    -0.97,
    -0.26,
    0,
    -0.71,
    -0.71,
    -0.56,
    -0.79,
    -0.25,
    -0.45,
    -0.63,
    -0.63,
    -0.19,
    -0.95,
    -0.26,
    -0.16,
    -0.7,
    -0.7,
    -1,
    0,
    0,
    -0.94,
    0.35,
    0,
    -0.94,
    0,
    0.35,
    -0.88,
    0.34,
    0.34,
    -0.19,
    0,
    0.98,
    -0.19,
    0.26,
    0.95,
    0,
    0,
    1,
    0,
    0.26,
    0.97,
    -0.19,
    0.98,
    0,
    -0.19,
    0.95,
    0.26,
    0,
    0.97,
    0.26,
    0,
    1,
    0,
    -0.94,
    0,
    0.35,
    -0.88,
    0.34,
    0.34,
    -0.58,
    0,
    0.81,
    -0.56,
    0.25,
    0.79,
    -0.94,
    0.35,
    0,
    -0.88,
    0.34,
    0.34,
    -0.58,
    0.81,
    0,
    -0.56,
    0.79,
    0.25,
    -0.88,
    0.34,
    0.34,
    -0.56,
    0.25,
    0.79,
    -0.56,
    0.79,
    0.25,
    -0.45,
    0.63,
    0.63,
    -0.19,
    0.26,
    0.95,
    -0.16,
    0.7,
    0.7,
    0,
    0.26,
    0.97,
    0,
    0.71,
    0.71,
    -0.58,
    0,
    0.81,
    -0.56,
    0.25,
    0.79,
    -0.19,
    0,
    0.98,
    -0.19,
    0.26,
    0.95,
    -0.56,
    0.25,
    0.79,
    -0.45,
    0.63,
    0.63,
    -0.19,
    0.26,
    0.95,
    -0.16,
    0.7,
    0.7,
    -0.58,
    0.81,
    0,
    -0.56,
    0.79,
    0.25,
    -0.19,
    0.98,
    0,
    -0.19,
    0.95,
    0.26,
    -0.19,
    0.95,
    0.26,
    -0.16,
    0.7,
    0.7,
    0,
    0.71,
    0.71,
    0,
    0.97,
    0.26,
    -0.56,
    0.79,
    0.25,
    -0.45,
    0.63,
    0.63,
    -0.19,
    0.95,
    0.26,
    -0.16,
    0.7,
    0.7,
    -0.19,
    -0.98,
    0,
    -0.19,
    -0.95,
    0.26,
    0,
    -1,
    0,
    0,
    -0.97,
    0.26,
    -0.19,
    0,
    0.98,
    -0.19,
    -0.26,
    0.95,
    0,
    -0.26,
    0.97,
    0,
    0,
    1,
    -1,
    0,
    0,
    -0.94,
    -0.35,
    0,
    -0.94,
    0,
    0.35,
    -0.88,
    -0.34,
    0.34,
    -0.19,
    -0.95,
    0.26,
    -0.16,
    -0.7,
    0.7,
    0,
    -0.97,
    0.26,
    0,
    -0.71,
    0.71,
    -0.58,
    -0.81,
    0,
    -0.56,
    -0.79,
    0.25,
    -0.19,
    -0.98,
    0,
    -0.19,
    -0.95,
    0.26,
    -0.56,
    -0.79,
    0.25,
    -0.45,
    -0.63,
    0.63,
    -0.19,
    -0.95,
    0.26,
    -0.16,
    -0.7,
    0.7,
    -0.58,
    0,
    0.81,
    -0.56,
    -0.25,
    0.79,
    -0.19,
    0,
    0.98,
    -0.19,
    -0.26,
    0.95,
    -0.19,
    -0.26,
    0.95,
    -0.16,
    -0.7,
    0.7,
    0,
    -0.71,
    0.71,
    0,
    -0.26,
    0.97,
    -0.56,
    -0.25,
    0.79,
    -0.45,
    -0.63,
    0.63,
    -0.19,
    -0.26,
    0.95,
    -0.16,
    -0.7,
    0.7,
    -0.94,
    -0.35,
    0,
    -0.88,
    -0.34,
    0.34,
    -0.58,
    -0.81,
    0,
    -0.56,
    -0.79,
    0.25,
    -0.94,
    0,
    0.35,
    -0.88,
    -0.34,
    0.34,
    -0.58,
    0,
    0.81,
    -0.56,
    -0.25,
    0.79,
    -0.88,
    -0.34,
    0.34,
    -0.56,
    -0.25,
    0.79,
    -0.56,
    -0.79,
    0.25,
    -0.45,
    -0.63,
    0.63
  ]);
  var texcoord_arr = Float32Array.from([
    0.56,
    0.57,
    0.56,
    0.57,
    0.56,
    0.57,
    0.56,
    0.57,
    0.69,
    0.43,
    0.69,
    0.43,
    0.69,
    0.43,
    0.69,
    0.43,
    0.56,
    0.43,
    0.56,
    0.43,
    0.56,
    0.43,
    0.56,
    0.43,
    0.59,
    0.57,
    0.59,
    0.57,
    0.59,
    0.57,
    0.59,
    0.57,
    0.56,
    0.54,
    0.56,
    0.54,
    0.56,
    0.5,
    0.56,
    0.54,
    0.59,
    0.54,
    0.59,
    0.54,
    0.59,
    0.54,
    0.59,
    0.5,
    0.66,
    0.43,
    0.66,
    0.43,
    0.66,
    0.43,
    0.66,
    0.43,
    0.63,
    0.57,
    0.69,
    0.46,
    0.63,
    0.57,
    0.69,
    0.46,
    0.63,
    0.54,
    0.66,
    0.46,
    0.63,
    0.54,
    0.66,
    0.46,
    0.56,
    0.46,
    0.56,
    0.46,
    0.56,
    0.46,
    0.56,
    0.46,
    0.63,
    0.43,
    0.59,
    0.43,
    0.59,
    0.43,
    0.59,
    0.43,
    0.59,
    0.5,
    0.63,
    0.46,
    0.59,
    0.46,
    0.59,
    0.46,
    0.31,
    0.43,
    0.31,
    0.43,
    0.31,
    0.43,
    0.31,
    0.43,
    0.44,
    0.57,
    0.44,
    0.57,
    0.44,
    0.57,
    0.44,
    0.57,
    0.44,
    0.43,
    0.44,
    0.43,
    0.44,
    0.43,
    0.44,
    0.43,
    0.31,
    0.46,
    0.31,
    0.46,
    0.31,
    0.46,
    0.31,
    0.46,
    0.34,
    0.43,
    0.34,
    0.43,
    0.38,
    0.43,
    0.34,
    0.43,
    0.34,
    0.46,
    0.34,
    0.46,
    0.34,
    0.46,
    0.38,
    0.46,
    0.44,
    0.54,
    0.44,
    0.54,
    0.44,
    0.54,
    0.44,
    0.54,
    0.31,
    0.5,
    0.41,
    0.57,
    0.31,
    0.5,
    0.41,
    0.57,
    0.34,
    0.5,
    0.41,
    0.54,
    0.34,
    0.5,
    0.41,
    0.54,
    0.41,
    0.43,
    0.41,
    0.43,
    0.41,
    0.43,
    0.41,
    0.43,
    0.44,
    0.5,
    0.44,
    0.46,
    0.44,
    0.46,
    0.44,
    0.46,
    0.38,
    0.46,
    0.41,
    0.46,
    0.41,
    0.5,
    0.41,
    0.46,
    0.56,
    0.32,
    0.56,
    0.32,
    0.56,
    0.32,
    0.56,
    0.32,
    0.69,
    0.32,
    0.69,
    0.32,
    0.69,
    0.32,
    0.69,
    0.32,
    0.56,
    0.18,
    0.56,
    0.18,
    0.56,
    0.18,
    0.56,
    0.18,
    0.59,
    0.32,
    0.59,
    0.32,
    0.59,
    0.32,
    0.59,
    0.32,
    0.56,
    0.25,
    0.56,
    0.29,
    0.56,
    0.29,
    0.56,
    0.29,
    0.59,
    0.29,
    0.59,
    0.29,
    0.59,
    0.25,
    0.59,
    0.29,
    0.63,
    0.18,
    0.69,
    0.29,
    0.62,
    0.18,
    0.69,
    0.29,
    0.66,
    0.32,
    0.66,
    0.32,
    0.63,
    0.32,
    0.66,
    0.32,
    0.61,
    0.21,
    0.66,
    0.29,
    0.63,
    0.29,
    0.63,
    0.29,
    0.56,
    0.21,
    0.56,
    0.21,
    0.56,
    0.21,
    0.56,
    0.21,
    0.59,
    0.18,
    0.59,
    0.18,
    0.63,
    0.18,
    0.59,
    0.18,
    0.63,
    0.21,
    0.59,
    0.21,
    0.59,
    0.25,
    0.59,
    0.21,
    0.44,
    0.32,
    0.44,
    0.32,
    0.44,
    0.32,
    0.44,
    0.32,
    0.44,
    0.18,
    0.44,
    0.18,
    0.44,
    0.18,
    0.44,
    0.18,
    0.31,
    0.32,
    0.31,
    0.32,
    0.31,
    0.32,
    0.31,
    0.32,
    0.44,
    0.29,
    0.44,
    0.29,
    0.44,
    0.29,
    0.44,
    0.29,
    0.38,
    0.32,
    0.41,
    0.32,
    0.41,
    0.32,
    0.41,
    0.32,
    0.41,
    0.23,
    0.38,
    0.29,
    0.41,
    0.29,
    0.41,
    0.29,
    0.31,
    0.25,
    0.41,
    0.18,
    0.3,
    0.26,
    0.41,
    0.18,
    0.44,
    0.21,
    0.44,
    0.21,
    0.44,
    0.25,
    0.44,
    0.21,
    0.34,
    0.27,
    0.41,
    0.21,
    0.38,
    0.21,
    0.41,
    0.25,
    0.34,
    0.32,
    0.34,
    0.32,
    0.34,
    0.32,
    0.34,
    0.32,
    0.31,
    0.29,
    0.31,
    0.29,
    0.31,
    0.25,
    0.31,
    0.29,
    0.34,
    0.25,
    0.34,
    0.29,
    0.38,
    0.21,
    0.34,
    0.29,
    0.56,
    0.68,
    0.56,
    0.68,
    0.56,
    0.68,
    0.56,
    0.68,
    0.56,
    0.82,
    0.56,
    0.82,
    0.56,
    0.82,
    0.56,
    0.82,
    0.8,
    0.43,
    0.8,
    0.43,
    0.8,
    0.43,
    0.8,
    0.43,
    0.56,
    0.71,
    0.56,
    0.71,
    0.56,
    0.71,
    0.56,
    0.71,
    0.59,
    0.68,
    0.63,
    0.68,
    0.59,
    0.68,
    0.59,
    0.68,
    0.59,
    0.71,
    0.59,
    0.77,
    0.59,
    0.71,
    0.63,
    0.71,
    0.59,
    0.82,
    0.59,
    0.82,
    0.59,
    0.82,
    0.59,
    0.82,
    0.56,
    0.79,
    0.56,
    0.79,
    0.56,
    0.79,
    0.56,
    0.75,
    0.59,
    0.79,
    0.59,
    0.75,
    0.59,
    0.79,
    0.59,
    0.75,
    0.81,
    0.46,
    0.62,
    0.68,
    0.63,
    0.68,
    0.81,
    0.46,
    0.63,
    0.82,
    0.63,
    0.82,
    0.84,
    0.43,
    0.84,
    0.43,
    0.63,
    0.79,
    0.63,
    0.79,
    0.84,
    0.46,
    0.61,
    0.71,
    0.44,
    0.82,
    0.44,
    0.82,
    0.44,
    0.82,
    0.44,
    0.82,
    0.44,
    0.68,
    0.44,
    0.68,
    0.44,
    0.68,
    0.44,
    0.68,
    0.19,
    0.43,
    0.19,
    0.43,
    0.19,
    0.43,
    0.19,
    0.43,
    0.44,
    0.79,
    0.44,
    0.79,
    0.44,
    0.79,
    0.44,
    0.79,
    0.41,
    0.82,
    0.41,
    0.82,
    0.13,
    0.43,
    0.13,
    0.43,
    0.41,
    0.79,
    0.41,
    0.79,
    0.13,
    0.46,
    0.41,
    0.79,
    0.41,
    0.68,
    0.19,
    0.49,
    0.19,
    0.5,
    0.41,
    0.68,
    0.44,
    0.71,
    0.44,
    0.75,
    0.44,
    0.71,
    0.44,
    0.71,
    0.41,
    0.75,
    0.41,
    0.75,
    0.41,
    0.71,
    0.16,
    0.48,
    0.16,
    0.43,
    0.16,
    0.43,
    0.16,
    0.43,
    0.16,
    0.43,
    0.19,
    0.46,
    0.19,
    0.5,
    0.19,
    0.46,
    0.19,
    0.46,
    0.16,
    0.46,
    0.38,
    0.79,
    0.16,
    0.46,
    0.16,
    0.5,
    0.56,
    0.93,
    0.56,
    0.93,
    0.56,
    0.93,
    0.56,
    0.93,
    0.56,
    0.07,
    0.56,
    0.07,
    0.56,
    0.07,
    0.56,
    0.07,
    0.8,
    0.32,
    0.8,
    0.32,
    0.8,
    0.32,
    0.8,
    0.32,
    0.56,
    0.96,
    0.56,
    0.96,
    0.56,
    0.96,
    0.56,
    0.96,
    0.59,
    0.93,
    0.59,
    0.93,
    0.59,
    0.93,
    0.63,
    0.93,
    0.59,
    0.96,
    0.59,
    0.96,
    0.63,
    0.96,
    0.59,
    0.96,
    0.59,
    0.07,
    0.59,
    0.07,
    0.59,
    0.07,
    0.59,
    0.07,
    0.56,
    1,
    0.56,
    1,
    0.56,
    0.04,
    0.56,
    0.04,
    0.59,
    1,
    0.59,
    1,
    0.59,
    0.04,
    0.59,
    0.04,
    0.63,
    0.93,
    0.62,
    0.93,
    0.84,
    0.32,
    0.84,
    0.32,
    0.81,
    0.29,
    0.63,
    0.07,
    0.63,
    0.07,
    0.81,
    0.29,
    0.61,
    0.96,
    0.63,
    0.96,
    0.84,
    0.29,
    0.63,
    0.04,
    0.19,
    0.32,
    0.19,
    0.32,
    0.19,
    0.32,
    0.19,
    0.32,
    0.44,
    0.07,
    0.44,
    0.07,
    0.44,
    0.07,
    0.44,
    0.07,
    0.44,
    0.93,
    0.44,
    0.93,
    0.44,
    0.93,
    0.44,
    0.93,
    0.19,
    0.29,
    0.19,
    0.29,
    0.19,
    0.29,
    0.19,
    0.29,
    0.16,
    0.32,
    0.13,
    0.32,
    0.16,
    0.32,
    0.16,
    0.32,
    0.13,
    0.29,
    0.16,
    0.29,
    0.16,
    0.29,
    0.16,
    0.29,
    0.44,
    1,
    0.44,
    0.99,
    0.44,
    0.04,
    0.44,
    0.04,
    0.41,
    0.07,
    0.19,
    0.25,
    0.19,
    0.25,
    0.41,
    0.07,
    0.41,
    0.98,
    0.16,
    0.25,
    0.41,
    0.04,
    0.16,
    0.25,
    0.41,
    0.93,
    0.41,
    0.93,
    0.13,
    0.32,
    0.13,
    0.32,
    0.44,
    0.96,
    0.44,
    0.96,
    0.44,
    0.96,
    0.44,
    1,
    0.41,
    0.96,
    0.41,
    1,
    0.14,
    0.29,
    0.13,
    0.29
  ]);
  var weights_arr = Float32Array.from([]);
  var index_arr = Uint16Array.from([
    53,
    0,
    247,
    0,
    194,
    247,
    146,
    58,
    163,
    58,
    87,
    163,
    161,
    85,
    183,
    85,
    67,
    183,
    181,
    65,
    155,
    65,
    51,
    155,
    195,
    1,
    210,
    1,
    12,
    210,
    211,
    13,
    230,
    13,
    28,
    230,
    231,
    29,
    202,
    29,
    4,
    202,
    289,
    197,
    304,
    197,
    216,
    304,
    306,
    218,
    324,
    218,
    232,
    324,
    326,
    234,
    296,
    234,
    200,
    296,
    342,
    148,
    367,
    148,
    169,
    367,
    366,
    168,
    351,
    168,
    185,
    351,
    350,
    184,
    339,
    184,
    153,
    339,
    10,
    98,
    43,
    98,
    111,
    43,
    41,
    109,
    27,
    109,
    127,
    27,
    25,
    125,
    7,
    125,
    103,
    7,
    105,
    295,
    136,
    295,
    314,
    136,
    137,
    315,
    120,
    315,
    330,
    120,
    121,
    331,
    100,
    331,
    298,
    100,
    198,
    242,
    220,
    242,
    252,
    220,
    222,
    254,
    204,
    254,
    268,
    204,
    206,
    270,
    192,
    270,
    244,
    192,
    97,
    145,
    115,
    145,
    159,
    115,
    113,
    157,
    135,
    157,
    175,
    135,
    133,
    173,
    107,
    173,
    151,
    107,
    346,
    290,
    376,
    290,
    300,
    376,
    378,
    302,
    360,
    302,
    316,
    360,
    362,
    318,
    340,
    318,
    292,
    340,
    3,
    55,
    17,
    55,
    73,
    17,
    19,
    75,
    37,
    75,
    89,
    37,
    39,
    91,
    9,
    91,
    57,
    9,
    52,
    246,
    77,
    246,
    267,
    77,
    76,
    266,
    61,
    266,
    283,
    61,
    60,
    282,
    49,
    282,
    251,
    49,
    241,
    345,
    256,
    345,
    372,
    256,
    258,
    374,
    276,
    374,
    352,
    276,
    278,
    354,
    248,
    354,
    336,
    248,
    383,
    369,
    357,
    382,
    356,
    375,
    356,
    353,
    375,
    377,
    380,
    347,
    380,
    373,
    347,
    368,
    381,
    361,
    381,
    379,
    361,
    364,
    370,
    341,
    370,
    363,
    341,
    359,
    371,
    349,
    371,
    365,
    349,
    355,
    358,
    337,
    358,
    348,
    337,
    333,
    321,
    311,
    332,
    310,
    325,
    310,
    307,
    325,
    328,
    334,
    297,
    334,
    327,
    297,
    323,
    335,
    313,
    335,
    329,
    313,
    319,
    322,
    293,
    322,
    312,
    293,
    309,
    320,
    303,
    320,
    317,
    303,
    305,
    308,
    291,
    308,
    301,
    291,
    285,
    273,
    263,
    284,
    262,
    277,
    262,
    259,
    277,
    280,
    286,
    249,
    286,
    279,
    249,
    275,
    287,
    265,
    287,
    281,
    265,
    271,
    274,
    245,
    274,
    264,
    245,
    261,
    272,
    255,
    272,
    269,
    255,
    257,
    260,
    243,
    260,
    253,
    243,
    237,
    227,
    213,
    239,
    215,
    229,
    215,
    209,
    229,
    235,
    238,
    201,
    238,
    228,
    201,
    226,
    236,
    219,
    236,
    233,
    219,
    221,
    224,
    199,
    224,
    217,
    199,
    212,
    225,
    205,
    225,
    223,
    205,
    208,
    214,
    193,
    214,
    207,
    193,
    190,
    178,
    164,
    191,
    165,
    182,
    165,
    160,
    182,
    187,
    189,
    154,
    189,
    180,
    154,
    176,
    188,
    170,
    188,
    186,
    170,
    172,
    177,
    150,
    177,
    171,
    150,
    166,
    179,
    156,
    179,
    174,
    156,
    162,
    167,
    144,
    167,
    158,
    144,
    142,
    130,
    116,
    143,
    118,
    134,
    118,
    112,
    134,
    139,
    141,
    106,
    141,
    132,
    106,
    128,
    140,
    122,
    140,
    138,
    122,
    124,
    129,
    102,
    129,
    123,
    102,
    117,
    131,
    108,
    131,
    126,
    108,
    114,
    119,
    96,
    119,
    110,
    96,
    92,
    82,
    70,
    93,
    71,
    84,
    71,
    66,
    84,
    90,
    95,
    56,
    95,
    86,
    56,
    83,
    94,
    74,
    94,
    88,
    74,
    79,
    81,
    54,
    81,
    72,
    54,
    68,
    80,
    62,
    80,
    78,
    62,
    64,
    69,
    50,
    69,
    63,
    50,
    44,
    34,
    22,
    46,
    23,
    36,
    23,
    18,
    36,
    42,
    47,
    8,
    47,
    38,
    8,
    35,
    45,
    26,
    45,
    40,
    26,
    31,
    33,
    6,
    33,
    24,
    6,
    20,
    32,
    14,
    32,
    30,
    14,
    16,
    21,
    2,
    21,
    15,
    2,
    147,
    99,
    59,
    99,
    11,
    59,
    101,
    299,
    5,
    299,
    203,
    5,
    343,
    294,
    149,
    294,
    104,
    149,
    240,
    196,
    344,
    196,
    288,
    344,
    338,
    152,
    250,
    152,
    48,
    250
  ]);

  // ../meshes/cube.ts
  function mesh_cube(gl) {
    let vao = gl.createVertexArray();
    gl.bindVertexArray(vao);
    let vertex_buf = gl.createBuffer();
    gl.bindBuffer(GL_ARRAY_BUFFER, vertex_buf);
    gl.bufferData(GL_ARRAY_BUFFER, vertex_arr2, GL_STATIC_DRAW);
    gl.enableVertexAttribArray(0 /* Position */);
    gl.vertexAttribPointer(0 /* Position */, 3, GL_FLOAT, false, 0, 0);
    let normal_buf = gl.createBuffer();
    gl.bindBuffer(GL_ARRAY_BUFFER, normal_buf);
    gl.bufferData(GL_ARRAY_BUFFER, normal_arr2, GL_STATIC_DRAW);
    gl.enableVertexAttribArray(1 /* Normal */);
    gl.vertexAttribPointer(1 /* Normal */, 3, GL_FLOAT, false, 0, 0);
    let texcoord_buf = gl.createBuffer();
    gl.bindBuffer(GL_ARRAY_BUFFER, texcoord_buf);
    gl.bufferData(GL_ARRAY_BUFFER, texcoord_arr2, GL_STATIC_DRAW);
    gl.enableVertexAttribArray(2 /* TexCoord */);
    gl.vertexAttribPointer(2 /* TexCoord */, 2, GL_FLOAT, false, 0, 0);
    let weights_buf = gl.createBuffer();
    gl.bindBuffer(GL_ARRAY_BUFFER, weights_buf);
    gl.bufferData(GL_ARRAY_BUFFER, weights_arr2, GL_STATIC_DRAW);
    gl.enableVertexAttribArray(5 /* Weights */);
    gl.vertexAttribPointer(5 /* Weights */, 4, GL_FLOAT, false, 0, 0);
    let index_buf = gl.createBuffer();
    gl.bindBuffer(GL_ELEMENT_ARRAY_BUFFER, index_buf);
    gl.bufferData(GL_ELEMENT_ARRAY_BUFFER, index_arr2, GL_STATIC_DRAW);
    gl.bindVertexArray(null);
    return {
      Vao: vao,
      VertexBuffer: vertex_buf,
      VertexArray: vertex_arr2,
      NormalBuffer: normal_buf,
      NormalArray: normal_arr2,
      TexCoordBuffer: texcoord_buf,
      TexCoordArray: texcoord_arr2,
      WeightsBuffer: weights_buf,
      WeightsArray: weights_arr2,
      IndexBuffer: index_buf,
      IndexArray: index_arr2,
      IndexCount: index_arr2.length
    };
  }
  var vertex_arr2 = Float32Array.from([
    -0.5,
    -0.5,
    0.5,
    -0.5,
    -0.5,
    0.5,
    -0.5,
    -0.5,
    0.5,
    -0.5,
    0.5,
    0.5,
    -0.5,
    0.5,
    0.5,
    -0.5,
    0.5,
    0.5,
    -0.5,
    -0.5,
    -0.5,
    -0.5,
    -0.5,
    -0.5,
    -0.5,
    -0.5,
    -0.5,
    -0.5,
    0.5,
    -0.5,
    -0.5,
    0.5,
    -0.5,
    -0.5,
    0.5,
    -0.5,
    0.5,
    -0.5,
    0.5,
    0.5,
    -0.5,
    0.5,
    0.5,
    -0.5,
    0.5,
    0.5,
    0.5,
    0.5,
    0.5,
    0.5,
    0.5,
    0.5,
    0.5,
    0.5,
    0.5,
    -0.5,
    -0.5,
    0.5,
    -0.5,
    -0.5,
    0.5,
    -0.5,
    -0.5,
    0.5,
    0.5,
    -0.5,
    0.5,
    0.5,
    -0.5,
    0.5,
    0.5,
    -0.5
  ]);
  var normal_arr2 = Float32Array.from([
    -1,
    0,
    0,
    0,
    -1,
    0,
    0,
    0,
    1,
    -1,
    0,
    0,
    0,
    0,
    1,
    0,
    1,
    0,
    -1,
    0,
    0,
    0,
    -1,
    0,
    0,
    0,
    -1,
    -1,
    0,
    0,
    0,
    0,
    -1,
    0,
    1,
    0,
    0,
    -1,
    0,
    0,
    0,
    1,
    1,
    0,
    0,
    0,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    0,
    0,
    -1,
    0,
    0,
    0,
    -1,
    1,
    0,
    0,
    0,
    0,
    -1,
    0,
    1,
    0,
    1,
    0,
    0
  ]);
  var texcoord_arr2 = Float32Array.from([]);
  var weights_arr2 = Float32Array.from([]);
  var index_arr2 = Uint16Array.from([
    16,
    5,
    22,
    5,
    11,
    22,
    1,
    12,
    7,
    12,
    18,
    7,
    2,
    4,
    13,
    4,
    15,
    13,
    14,
    17,
    20,
    17,
    23,
    20,
    19,
    21,
    8,
    21,
    10,
    8,
    6,
    9,
    0,
    9,
    3,
    0
  ]);

  // ../meshes/hand.ts
  function mesh_hand(gl) {
    let vao = gl.createVertexArray();
    gl.bindVertexArray(vao);
    let vertex_buf = gl.createBuffer();
    gl.bindBuffer(GL_ARRAY_BUFFER, vertex_buf);
    gl.bufferData(GL_ARRAY_BUFFER, vertex_arr3, GL_STATIC_DRAW);
    gl.enableVertexAttribArray(0 /* Position */);
    gl.vertexAttribPointer(0 /* Position */, 3, GL_FLOAT, false, 0, 0);
    let normal_buf = gl.createBuffer();
    gl.bindBuffer(GL_ARRAY_BUFFER, normal_buf);
    gl.bufferData(GL_ARRAY_BUFFER, normal_arr3, GL_STATIC_DRAW);
    gl.enableVertexAttribArray(1 /* Normal */);
    gl.vertexAttribPointer(1 /* Normal */, 3, GL_FLOAT, false, 0, 0);
    let texcoord_buf = gl.createBuffer();
    gl.bindBuffer(GL_ARRAY_BUFFER, texcoord_buf);
    gl.bufferData(GL_ARRAY_BUFFER, texcoord_arr3, GL_STATIC_DRAW);
    gl.enableVertexAttribArray(2 /* TexCoord */);
    gl.vertexAttribPointer(2 /* TexCoord */, 2, GL_FLOAT, false, 0, 0);
    let weights_buf = gl.createBuffer();
    gl.bindBuffer(GL_ARRAY_BUFFER, weights_buf);
    gl.bufferData(GL_ARRAY_BUFFER, weights_arr3, GL_STATIC_DRAW);
    gl.enableVertexAttribArray(5 /* Weights */);
    gl.vertexAttribPointer(5 /* Weights */, 4, GL_FLOAT, false, 0, 0);
    let index_buf = gl.createBuffer();
    gl.bindBuffer(GL_ELEMENT_ARRAY_BUFFER, index_buf);
    gl.bufferData(GL_ELEMENT_ARRAY_BUFFER, index_arr3, GL_STATIC_DRAW);
    gl.bindVertexArray(null);
    return {
      Vao: vao,
      VertexBuffer: vertex_buf,
      VertexArray: vertex_arr3,
      NormalBuffer: normal_buf,
      NormalArray: normal_arr3,
      TexCoordBuffer: texcoord_buf,
      TexCoordArray: texcoord_arr3,
      WeightsBuffer: weights_buf,
      WeightsArray: weights_arr3,
      IndexBuffer: index_buf,
      IndexArray: index_arr3,
      IndexCount: index_arr3.length
    };
  }
  var vertex_arr3 = Float32Array.from([
    -0.75,
    -0.01,
    -0.96,
    -0.75,
    -0.01,
    -0.96,
    -0.75,
    -0.01,
    -0.96,
    -0.75,
    -0.01,
    -0.96,
    -0.67,
    0.1,
    -0.91,
    -0.67,
    0.1,
    -0.91,
    -0.67,
    0.1,
    -0.91,
    -0.67,
    0.1,
    -0.91,
    -0.67,
    0.1,
    -0.91,
    -0.83,
    0.08,
    -0.96,
    -0.83,
    0.08,
    -0.96,
    -0.83,
    0.08,
    -0.96,
    -0.83,
    0.08,
    -0.96,
    -0.83,
    0.08,
    -0.96,
    -0.67,
    0.35,
    -1.01,
    -0.67,
    0.35,
    -1.01,
    -0.67,
    0.35,
    -1.01,
    -0.67,
    0.35,
    -1.01,
    -0.67,
    0.35,
    -1.01,
    -0.67,
    0.35,
    -1.01,
    -0.84,
    0.28,
    -1.06,
    -0.84,
    0.28,
    -1.06,
    -0.84,
    0.28,
    -1.06,
    -0.84,
    0.28,
    -1.06,
    -0.75,
    0.24,
    -0.95,
    -0.75,
    0.24,
    -0.95,
    -0.75,
    0.24,
    -0.95,
    -0.75,
    0.24,
    -0.95,
    -0.75,
    0.24,
    -0.95,
    -0.67,
    0.4,
    -1.14,
    -0.67,
    0.4,
    -1.14,
    -0.67,
    0.4,
    -1.14,
    -0.67,
    0.4,
    -1.14,
    -0.67,
    0.4,
    -1.14,
    -0.78,
    0.38,
    -1.09,
    -0.78,
    0.38,
    -1.09,
    -0.78,
    0.38,
    -1.09,
    -0.78,
    0.38,
    -1.09,
    -0.78,
    0.38,
    -1.09,
    -0.78,
    0.38,
    -1.09,
    -0.93,
    -0.36,
    -1.83,
    -0.93,
    -0.36,
    -1.83,
    -0.93,
    -0.36,
    -1.83,
    -0.93,
    -0.36,
    -1.83,
    -1,
    -0.3,
    -1.86,
    -1,
    -0.3,
    -1.86,
    -1,
    -0.3,
    -1.86,
    -1,
    -0.3,
    -1.86,
    -0.94,
    -0.3,
    -1.96,
    -0.94,
    -0.3,
    -1.96,
    -0.94,
    -0.3,
    -1.96,
    -0.94,
    -0.3,
    -1.96,
    -0.93,
    -0.12,
    -2.03,
    -0.93,
    -0.12,
    -2.03,
    -0.93,
    -0.12,
    -2.03,
    -0.93,
    -0.12,
    -2.03,
    -0.93,
    -0.01,
    -2.03,
    -0.93,
    -0.01,
    -2.03,
    -0.93,
    -0.01,
    -2.03,
    -0.93,
    -0.01,
    -2.03,
    -0.93,
    -0.01,
    -2.03,
    -0.89,
    0.08,
    -1.95,
    -0.89,
    0.08,
    -1.95,
    -0.89,
    0.08,
    -1.95,
    -0.89,
    0.08,
    -1.95,
    -0.89,
    0.08,
    -1.95,
    -1,
    -0.04,
    -1.94,
    -1,
    -0.04,
    -1.94,
    -1,
    -0.04,
    -1.94,
    -1,
    -0.04,
    -1.94,
    -1,
    -0.04,
    -1.94,
    -1,
    -0.04,
    -1.94,
    -0.44,
    -0.05,
    -1,
    -0.44,
    -0.05,
    -1,
    -0.44,
    -0.05,
    -1,
    -0.44,
    -0.05,
    -1,
    -0.44,
    -0.05,
    -1,
    -0.34,
    0.02,
    -1.04,
    -0.34,
    0.02,
    -1.04,
    -0.34,
    0.02,
    -1.04,
    -0.34,
    0.02,
    -1.04,
    -0.34,
    0.02,
    -1.04,
    -0.4,
    0.08,
    -0.96,
    -0.4,
    0.08,
    -0.96,
    -0.4,
    0.08,
    -0.96,
    -0.4,
    0.08,
    -0.96,
    -0.4,
    0.26,
    -1.03,
    -0.4,
    0.26,
    -1.03,
    -0.4,
    0.26,
    -1.03,
    -0.4,
    0.26,
    -1.03,
    -0.38,
    0.35,
    -1.12,
    -0.38,
    0.35,
    -1.12,
    -0.38,
    0.35,
    -1.12,
    -0.38,
    0.35,
    -1.12,
    -0.38,
    0.35,
    -1.12,
    -0.41,
    0.35,
    -1.23,
    -0.41,
    0.35,
    -1.23,
    -0.41,
    0.35,
    -1.23,
    -0.41,
    0.35,
    -1.23,
    -0.32,
    0.27,
    -1.16,
    -0.32,
    0.27,
    -1.16,
    -0.32,
    0.27,
    -1.16,
    -0.32,
    0.27,
    -1.16,
    -0.32,
    0.27,
    -1.16,
    -0.66,
    -0.4,
    -1.86,
    -0.66,
    -0.4,
    -1.86,
    -0.66,
    -0.4,
    -1.86,
    -0.66,
    -0.4,
    -1.86,
    -0.55,
    -0.38,
    -1.91,
    -0.55,
    -0.38,
    -1.91,
    -0.55,
    -0.38,
    -1.91,
    -0.55,
    -0.38,
    -1.91,
    -0.55,
    -0.38,
    -1.91,
    -0.62,
    -0.35,
    -2,
    -0.62,
    -0.35,
    -2,
    -0.62,
    -0.35,
    -2,
    -0.62,
    -0.35,
    -2,
    -0.62,
    -0.35,
    -2,
    -0.62,
    -0.35,
    -2,
    -0.5,
    -0.28,
    -1.95,
    -0.5,
    -0.28,
    -1.95,
    -0.5,
    -0.28,
    -1.95,
    -0.5,
    -0.28,
    -1.95,
    -0.5,
    -0.28,
    -1.95,
    -0.66,
    -0.11,
    -2.1,
    -0.66,
    -0.11,
    -2.1,
    -0.66,
    -0.11,
    -2.1,
    -0.66,
    -0.11,
    -2.1,
    -0.66,
    -0.11,
    -2.1,
    -0.57,
    0.01,
    -2.04,
    -0.57,
    0.01,
    -2.04,
    -0.57,
    0.01,
    -2.04,
    -0.57,
    0.01,
    -2.04,
    -0.57,
    0.01,
    -2.04,
    -0.57,
    0.01,
    -2.04,
    -0.47,
    -0.07,
    -1.98,
    -0.47,
    -0.07,
    -1.98,
    -0.47,
    -0.07,
    -1.98,
    -0.47,
    -0.07,
    -1.98,
    -0.53,
    -0.09,
    -2.07,
    -0.53,
    -0.09,
    -2.07,
    -0.53,
    -0.09,
    -2.07,
    -0.53,
    -0.09,
    -2.07,
    -0.53,
    -0.09,
    -2.07,
    -0.41,
    0.1,
    2,
    -0.41,
    0.1,
    2,
    -0.41,
    0.1,
    2,
    -0.41,
    0.1,
    2,
    -0.41,
    0.1,
    2,
    -0.46,
    -0.05,
    1.88,
    -0.46,
    -0.05,
    1.88,
    -0.46,
    -0.05,
    1.88,
    -0.46,
    -0.05,
    1.88,
    -0.49,
    -0,
    1.93,
    -0.49,
    -0,
    1.93,
    -0.49,
    -0,
    1.93,
    -0.49,
    -0,
    1.93,
    -0.49,
    -0,
    1.93,
    -0.4,
    0.25,
    1.87,
    -0.4,
    0.25,
    1.87,
    -0.4,
    0.25,
    1.87,
    -0.4,
    0.25,
    1.87,
    -0.43,
    0.2,
    1.95,
    -0.43,
    0.2,
    1.95,
    -0.43,
    0.2,
    1.95,
    -0.43,
    0.2,
    1.95,
    -0.53,
    0.14,
    1.9,
    -0.53,
    0.14,
    1.9,
    -0.53,
    0.14,
    1.9,
    -0.53,
    0.14,
    1.9,
    -0.53,
    0.14,
    1.9,
    -0.53,
    0.14,
    1.9,
    -0.66,
    0.17,
    -0.03,
    -0.66,
    0.17,
    -0.03,
    -0.66,
    0.17,
    -0.03,
    -0.66,
    0.17,
    -0.03,
    -0.73,
    0.39,
    -0.07,
    -0.73,
    0.39,
    -0.07,
    -0.73,
    0.39,
    -0.07,
    -0.73,
    0.39,
    -0.07,
    -0.71,
    0.26,
    -0.11,
    -0.71,
    0.26,
    -0.11,
    -0.71,
    0.26,
    -0.11,
    -0.71,
    0.26,
    -0.11,
    -0.71,
    0.26,
    -0.11,
    -0.62,
    0.22,
    -0.15,
    -0.62,
    0.22,
    -0.15,
    -0.62,
    0.22,
    -0.15,
    -0.62,
    0.22,
    -0.15,
    -0.62,
    0.22,
    -0.15,
    -0.64,
    0.39,
    -0.18,
    -0.64,
    0.39,
    -0.18,
    -0.64,
    0.39,
    -0.18,
    -0.64,
    0.39,
    -0.18,
    -0.64,
    0.39,
    -0.18,
    -0.64,
    0.39,
    -0.18,
    -0.56,
    0.53,
    -0.12,
    -0.56,
    0.53,
    -0.12,
    -0.56,
    0.53,
    -0.12,
    -0.56,
    0.53,
    -0.12,
    -0.56,
    0.53,
    -0.12,
    -0.58,
    0.55,
    0.01,
    -0.58,
    0.55,
    0.01,
    -0.58,
    0.55,
    0.01,
    -0.58,
    0.55,
    0.01,
    -0.66,
    0.51,
    -0.08,
    -0.66,
    0.51,
    -0.08,
    -0.66,
    0.51,
    -0.08,
    -0.66,
    0.51,
    -0.08,
    -0.66,
    0.51,
    -0.08,
    1.24,
    -0.39,
    1.7,
    1.24,
    -0.39,
    1.7,
    1.24,
    -0.39,
    1.7,
    1.24,
    -0.39,
    1.7,
    1.24,
    -0.39,
    1.7,
    1.38,
    -0.23,
    1.76,
    1.38,
    -0.23,
    1.76,
    1.38,
    -0.23,
    1.76,
    1.38,
    -0.23,
    1.76,
    1.38,
    -0.23,
    1.76,
    1.38,
    -0.23,
    1.76,
    1.31,
    -0.35,
    1.78,
    1.31,
    -0.35,
    1.78,
    1.31,
    -0.35,
    1.78,
    1.31,
    -0.35,
    1.78,
    1.31,
    -0.35,
    1.78,
    1.23,
    -0.36,
    1.82,
    1.23,
    -0.36,
    1.82,
    1.23,
    -0.36,
    1.82,
    1.23,
    -0.36,
    1.82,
    1.23,
    -0.36,
    1.82,
    1.27,
    -0.25,
    1.87,
    1.27,
    -0.25,
    1.87,
    1.27,
    -0.25,
    1.87,
    1.27,
    -0.25,
    1.87,
    1.27,
    -0.25,
    1.87,
    1.3,
    -0.09,
    1.79,
    1.3,
    -0.09,
    1.79,
    1.3,
    -0.09,
    1.79,
    1.3,
    -0.09,
    1.79,
    1.3,
    -0.09,
    1.79,
    1.31,
    -0.16,
    1.84,
    1.31,
    -0.16,
    1.84,
    1.31,
    -0.16,
    1.84,
    1.31,
    -0.16,
    1.84,
    1.23,
    -0.17,
    -0.23,
    1.23,
    -0.17,
    -0.23,
    1.23,
    -0.17,
    -0.23,
    1.23,
    -0.17,
    -0.23,
    1.23,
    -0.17,
    -0.23,
    1.33,
    0.02,
    -0.32,
    1.33,
    0.02,
    -0.32,
    1.33,
    0.02,
    -0.32,
    1.33,
    0.02,
    -0.32,
    1.32,
    -0.12,
    -0.29,
    1.32,
    -0.12,
    -0.29,
    1.32,
    -0.12,
    -0.29,
    1.32,
    -0.12,
    -0.29,
    1.32,
    -0.12,
    -0.29,
    1.35,
    -0.16,
    -0.2,
    1.35,
    -0.16,
    -0.2,
    1.35,
    -0.16,
    -0.2,
    1.35,
    -0.16,
    -0.2,
    1.35,
    -0.16,
    -0.2,
    1.42,
    -0.01,
    -0.23,
    1.42,
    -0.01,
    -0.23,
    1.42,
    -0.01,
    -0.23,
    1.42,
    -0.01,
    -0.23,
    1.42,
    -0.01,
    -0.23,
    1.42,
    -0.01,
    -0.23,
    1.38,
    0.17,
    -0.21,
    1.38,
    0.17,
    -0.21,
    1.38,
    0.17,
    -0.21,
    1.38,
    0.17,
    -0.21,
    1.38,
    0.17,
    -0.21,
    1.38,
    0.17,
    -0.21,
    1.37,
    0.14,
    -0.26,
    1.37,
    0.14,
    -0.26,
    1.37,
    0.14,
    -0.26,
    1.37,
    0.14,
    -0.26,
    -0.55,
    0.07,
    -0.03,
    -0.55,
    0.07,
    -0.03,
    -0.55,
    0.07,
    -0.03,
    -0.55,
    0.07,
    -0.03,
    -0.53,
    0.18,
    0.06,
    -0.53,
    0.18,
    0.06,
    -0.53,
    0.18,
    0.06,
    -0.53,
    0.18,
    0.06,
    -0.53,
    0.18,
    0.06,
    -0.64,
    0.13,
    0,
    -0.64,
    0.13,
    0,
    -0.64,
    0.13,
    0,
    -0.64,
    0.13,
    0,
    -0.64,
    0.13,
    0,
    -0.69,
    0.19,
    -0.02,
    -0.69,
    0.19,
    -0.02,
    -0.69,
    0.19,
    -0.02,
    -0.69,
    0.19,
    -0.02,
    -0.5,
    0.42,
    0.04,
    -0.5,
    0.42,
    0.04,
    -0.5,
    0.42,
    0.04,
    -0.5,
    0.42,
    0.04,
    -0.5,
    0.42,
    0.04,
    -0.68,
    0.38,
    -0.04,
    -0.68,
    0.38,
    -0.04,
    -0.68,
    0.38,
    -0.04,
    -0.68,
    0.38,
    -0.04,
    -0.59,
    0.31,
    0.06,
    -0.59,
    0.31,
    0.06,
    -0.59,
    0.31,
    0.06,
    -0.59,
    0.31,
    0.06,
    -0.59,
    0.31,
    0.06,
    -0.59,
    0.31,
    0.06,
    -0.62,
    0.48,
    -0.04,
    -0.62,
    0.48,
    -0.04,
    -0.62,
    0.48,
    -0.04,
    -0.62,
    0.48,
    -0.04,
    -0.62,
    0.48,
    -0.04,
    -0.62,
    0.48,
    -0.04,
    -0.51,
    0.51,
    -0.07,
    -0.51,
    0.51,
    -0.07,
    -0.51,
    0.51,
    -0.07,
    -0.51,
    0.51,
    -0.07,
    -0.75,
    -0.01,
    -1.07,
    -0.75,
    -0.01,
    -1.07,
    -0.75,
    -0.01,
    -1.07,
    -0.75,
    -0.01,
    -1.07,
    -0.75,
    -0.01,
    -1.07,
    -0.84,
    0.09,
    -1.07,
    -0.84,
    0.09,
    -1.07,
    -0.84,
    0.09,
    -1.07,
    -0.84,
    0.09,
    -1.07,
    -0.77,
    0.06,
    -1.16,
    -0.77,
    0.06,
    -1.16,
    -0.77,
    0.06,
    -1.16,
    -0.77,
    0.06,
    -1.16,
    -0.71,
    0.42,
    -1.11,
    -0.71,
    0.42,
    -1.11,
    -0.71,
    0.42,
    -1.11,
    -0.71,
    0.42,
    -1.11,
    -0.71,
    0.42,
    -1.11,
    -0.74,
    0.33,
    -1.19,
    -0.74,
    0.33,
    -1.19,
    -0.74,
    0.33,
    -1.19,
    -0.74,
    0.33,
    -1.19,
    -0.81,
    0.33,
    -1.09,
    -0.81,
    0.33,
    -1.09,
    -0.81,
    0.33,
    -1.09,
    -0.81,
    0.33,
    -1.09,
    -0.81,
    0.33,
    -1.09,
    -0.34,
    0.16,
    0.04,
    -0.34,
    0.16,
    0.04,
    -0.34,
    0.16,
    0.04,
    -0.34,
    0.16,
    0.04,
    -0.31,
    0.05,
    -0.07,
    -0.31,
    0.05,
    -0.07,
    -0.31,
    0.05,
    -0.07,
    -0.31,
    0.05,
    -0.07,
    -0.31,
    0.05,
    -0.07,
    -0.2,
    0.14,
    -0.1,
    -0.2,
    0.14,
    -0.1,
    -0.2,
    0.14,
    -0.1,
    -0.2,
    0.14,
    -0.1,
    -0.25,
    0.13,
    -0.01,
    -0.25,
    0.13,
    -0.01,
    -0.25,
    0.13,
    -0.01,
    -0.25,
    0.13,
    -0.01,
    -0.27,
    0.48,
    -0.11,
    -0.27,
    0.48,
    -0.11,
    -0.27,
    0.48,
    -0.11,
    -0.27,
    0.48,
    -0.11,
    -0.26,
    0.39,
    -0.01,
    -0.26,
    0.39,
    -0.01,
    -0.26,
    0.39,
    -0.01,
    -0.26,
    0.39,
    -0.01,
    -0.26,
    0.39,
    -0.01,
    -0.19,
    0.4,
    -0.09,
    -0.19,
    0.4,
    -0.09,
    -0.19,
    0.4,
    -0.09,
    -0.19,
    0.4,
    -0.09,
    -0.33,
    0.04,
    -1.09,
    -0.33,
    0.04,
    -1.09,
    -0.33,
    0.04,
    -1.09,
    -0.33,
    0.04,
    -1.09,
    -0.33,
    0.04,
    -1.09,
    -0.45,
    -0.05,
    -1.1,
    -0.45,
    -0.05,
    -1.1,
    -0.45,
    -0.05,
    -1.1,
    -0.45,
    -0.05,
    -1.1,
    -0.45,
    -0.05,
    -1.1,
    -0.41,
    0.02,
    -1.19,
    -0.41,
    0.02,
    -1.19,
    -0.41,
    0.02,
    -1.19,
    -0.41,
    0.02,
    -1.19,
    -0.41,
    0.02,
    -1.19,
    -0.51,
    0.04,
    -1.21,
    -0.51,
    0.04,
    -1.21,
    -0.51,
    0.04,
    -1.21,
    -0.51,
    0.04,
    -1.21,
    -0.34,
    0.16,
    -1.18,
    -0.34,
    0.16,
    -1.18,
    -0.34,
    0.16,
    -1.18,
    -0.34,
    0.16,
    -1.18,
    -0.48,
    0.29,
    -1.24,
    -0.48,
    0.29,
    -1.24,
    -0.48,
    0.29,
    -1.24,
    -0.48,
    0.29,
    -1.24,
    -0.41,
    0.38,
    -1.15,
    -0.41,
    0.38,
    -1.15,
    -0.41,
    0.38,
    -1.15,
    -0.41,
    0.38,
    -1.15,
    -0.41,
    0.38,
    -1.15,
    -0.31,
    0.28,
    -1.1,
    -0.31,
    0.28,
    -1.1,
    -0.31,
    0.28,
    -1.1,
    -0.31,
    0.28,
    -1.1,
    -0.31,
    0.28,
    -1.1,
    -0.39,
    0.3,
    -1.21,
    -0.39,
    0.3,
    -1.21,
    -0.39,
    0.3,
    -1.21,
    -0.39,
    0.3,
    -1.21,
    -0.39,
    0.3,
    -1.21,
    0.05,
    0.19,
    0.02,
    0.05,
    0.19,
    0.02,
    0.05,
    0.19,
    0.02,
    0.05,
    0.19,
    0.02,
    0.02,
    0.03,
    -0.06,
    0.02,
    0.03,
    -0.06,
    0.02,
    0.03,
    -0.06,
    0.02,
    0.03,
    -0.06,
    0,
    0.1,
    -0.01,
    0,
    0.1,
    -0.01,
    0,
    0.1,
    -0.01,
    0,
    0.1,
    -0.01,
    -0.07,
    0.14,
    -0.07,
    -0.07,
    0.14,
    -0.07,
    -0.07,
    0.14,
    -0.07,
    -0.07,
    0.14,
    -0.07,
    -0.07,
    0.14,
    -0.07,
    0.06,
    0.37,
    -0.01,
    0.06,
    0.37,
    -0.01,
    0.06,
    0.37,
    -0.01,
    0.06,
    0.37,
    -0.01,
    0.04,
    0.44,
    -0.09,
    0.04,
    0.44,
    -0.09,
    0.04,
    0.44,
    -0.09,
    0.04,
    0.44,
    -0.09,
    -0.04,
    0.37,
    -0.09,
    -0.04,
    0.37,
    -0.09,
    -0.04,
    0.37,
    -0.09,
    -0.04,
    0.37,
    -0.09,
    -0.11,
    -0.11,
    -1.25,
    -0.11,
    -0.11,
    -1.25,
    -0.11,
    -0.11,
    -1.25,
    -0.11,
    -0.11,
    -1.25,
    -0.11,
    -0.11,
    -1.25,
    -0.17,
    -0.03,
    -1.35,
    -0.17,
    -0.03,
    -1.35,
    -0.17,
    -0.03,
    -1.35,
    -0.17,
    -0.03,
    -1.35,
    -0.2,
    0,
    -1.26,
    -0.2,
    0,
    -1.26,
    -0.2,
    0,
    -1.26,
    -0.2,
    0,
    -1.26,
    -0.12,
    -0.05,
    -1.4,
    -0.12,
    -0.05,
    -1.4,
    -0.12,
    -0.05,
    -1.4,
    -0.12,
    -0.05,
    -1.4,
    -0.12,
    -0.05,
    -1.4,
    -0.12,
    -0.05,
    -1.4,
    -0.18,
    0.24,
    -1.28,
    -0.18,
    0.24,
    -1.28,
    -0.18,
    0.24,
    -1.28,
    -0.18,
    0.24,
    -1.28,
    -0.07,
    0.32,
    -1.35,
    -0.07,
    0.32,
    -1.35,
    -0.07,
    0.32,
    -1.35,
    -0.07,
    0.32,
    -1.35,
    -0.07,
    0.32,
    -1.35,
    -0.15,
    0.24,
    -1.4,
    -0.15,
    0.24,
    -1.4,
    -0.15,
    0.24,
    -1.4,
    -0.15,
    0.24,
    -1.4,
    -0.15,
    0.24,
    -1.4,
    -0.04,
    0.21,
    -1.46,
    -0.04,
    0.21,
    -1.46,
    -0.04,
    0.21,
    -1.46,
    -0.04,
    0.21,
    -1.46,
    0.44,
    0.13,
    -0.12,
    0.44,
    0.13,
    -0.12,
    0.44,
    0.13,
    -0.12,
    0.44,
    0.13,
    -0.12,
    0.38,
    0.04,
    -0.08,
    0.38,
    0.04,
    -0.08,
    0.38,
    0.04,
    -0.08,
    0.38,
    0.04,
    -0.08,
    0.38,
    0.04,
    -0.08,
    0.28,
    -0,
    -0.09,
    0.28,
    -0,
    -0.09,
    0.28,
    -0,
    -0.09,
    0.28,
    -0,
    -0.09,
    0.34,
    0.11,
    -0.01,
    0.34,
    0.11,
    -0.01,
    0.34,
    0.11,
    -0.01,
    0.34,
    0.11,
    -0.01,
    0.34,
    0.11,
    -0.01,
    0.34,
    0.11,
    -0.01,
    0.36,
    0.43,
    -0.16,
    0.36,
    0.43,
    -0.16,
    0.36,
    0.43,
    -0.16,
    0.36,
    0.43,
    -0.16,
    0.37,
    0.36,
    -0.05,
    0.37,
    0.36,
    -0.05,
    0.37,
    0.36,
    -0.05,
    0.37,
    0.36,
    -0.05,
    0.45,
    0.32,
    -0.14,
    0.45,
    0.32,
    -0.14,
    0.45,
    0.32,
    -0.14,
    0.45,
    0.32,
    -0.14,
    0.21,
    -0.12,
    -1.35,
    0.21,
    -0.12,
    -1.35,
    0.21,
    -0.12,
    -1.35,
    0.21,
    -0.12,
    -1.35,
    0.21,
    -0.12,
    -1.35,
    0.21,
    -0.12,
    -1.35,
    0.21,
    -0.12,
    -1.35,
    0.31,
    -0.05,
    -1.3,
    0.31,
    -0.05,
    -1.3,
    0.31,
    -0.05,
    -1.3,
    0.31,
    -0.05,
    -1.3,
    0.31,
    -0.05,
    -1.3,
    0.19,
    -0.05,
    -1.44,
    0.19,
    -0.05,
    -1.44,
    0.19,
    -0.05,
    -1.44,
    0.19,
    -0.05,
    -1.44,
    0.3,
    0.07,
    -1.4,
    0.3,
    0.07,
    -1.4,
    0.3,
    0.07,
    -1.4,
    0.3,
    0.07,
    -1.4,
    0.3,
    0.07,
    -1.4,
    0.22,
    0.29,
    -1.39,
    0.22,
    0.29,
    -1.39,
    0.22,
    0.29,
    -1.39,
    0.22,
    0.29,
    -1.39,
    0.3,
    0.21,
    -1.41,
    0.3,
    0.21,
    -1.41,
    0.3,
    0.21,
    -1.41,
    0.3,
    0.21,
    -1.41,
    0.3,
    0.21,
    -1.41,
    0.2,
    0.18,
    -1.47,
    0.2,
    0.18,
    -1.47,
    0.2,
    0.18,
    -1.47,
    0.2,
    0.18,
    -1.47,
    0.2,
    0.18,
    -1.47,
    0.54,
    0.04,
    -0.09,
    0.54,
    0.04,
    -0.09,
    0.54,
    0.04,
    -0.09,
    0.54,
    0.04,
    -0.09,
    0.54,
    0.04,
    -0.09,
    0.54,
    0.04,
    -0.09,
    0.54,
    -0.05,
    -0.21,
    0.54,
    -0.05,
    -0.21,
    0.54,
    -0.05,
    -0.21,
    0.54,
    -0.05,
    -0.21,
    0.54,
    -0.05,
    -0.21,
    0.47,
    0.07,
    -0.17,
    0.47,
    0.07,
    -0.17,
    0.47,
    0.07,
    -0.17,
    0.47,
    0.07,
    -0.17,
    0.47,
    0.07,
    -0.17,
    0.66,
    0.26,
    -0.09,
    0.66,
    0.26,
    -0.09,
    0.66,
    0.26,
    -0.09,
    0.66,
    0.26,
    -0.09,
    0.66,
    0.26,
    -0.09,
    0.66,
    0.26,
    -0.09,
    0.57,
    0.33,
    -0.18,
    0.57,
    0.33,
    -0.18,
    0.57,
    0.33,
    -0.18,
    0.57,
    0.33,
    -0.18,
    0.57,
    0.33,
    -0.18,
    0.67,
    0.35,
    -0.21,
    0.67,
    0.35,
    -0.21,
    0.67,
    0.35,
    -0.21,
    0.67,
    0.35,
    -0.21,
    0.53,
    0.23,
    -0.12,
    0.53,
    0.23,
    -0.12,
    0.53,
    0.23,
    -0.12,
    0.53,
    0.23,
    -0.12,
    0.53,
    0.23,
    -0.12,
    0.49,
    0.27,
    -0.24,
    0.49,
    0.27,
    -0.24,
    0.49,
    0.27,
    -0.24,
    0.49,
    0.27,
    -0.24,
    0.49,
    0.27,
    -0.24,
    0.48,
    -0.12,
    -0.98,
    0.48,
    -0.12,
    -0.98,
    0.48,
    -0.12,
    -0.98,
    0.48,
    -0.12,
    -0.98,
    0.41,
    0.1,
    -1.08,
    0.41,
    0.1,
    -1.08,
    0.41,
    0.1,
    -1.08,
    0.41,
    0.1,
    -1.08,
    0.41,
    0.1,
    -1.08,
    0.39,
    -0.01,
    -0.99,
    0.39,
    -0.01,
    -0.99,
    0.39,
    -0.01,
    -0.99,
    0.39,
    -0.01,
    -0.99,
    0.46,
    -0.09,
    -1.1,
    0.46,
    -0.09,
    -1.1,
    0.46,
    -0.09,
    -1.1,
    0.46,
    -0.09,
    -1.1,
    0.46,
    -0.09,
    -1.1,
    0.46,
    -0.09,
    -1.1,
    0.5,
    0.07,
    -1.17,
    0.5,
    0.07,
    -1.17,
    0.5,
    0.07,
    -1.17,
    0.5,
    0.07,
    -1.17,
    0.5,
    0.07,
    -1.17,
    0.5,
    0.07,
    -1.17,
    0.57,
    0.23,
    -1.15,
    0.57,
    0.23,
    -1.15,
    0.57,
    0.23,
    -1.15,
    0.57,
    0.23,
    -1.15,
    0.57,
    0.23,
    -1.15,
    0.54,
    0.28,
    -1.04,
    0.54,
    0.28,
    -1.04,
    0.54,
    0.28,
    -1.04,
    0.54,
    0.28,
    -1.04,
    0.54,
    0.28,
    -1.04,
    0.47,
    0.23,
    -1.1,
    0.47,
    0.23,
    -1.1,
    0.47,
    0.23,
    -1.1,
    0.47,
    0.23,
    -1.1,
    0.47,
    0.23,
    -1.1,
    0.77,
    -0.1,
    -0.24,
    0.77,
    -0.1,
    -0.24,
    0.77,
    -0.1,
    -0.24,
    0.77,
    -0.1,
    -0.24,
    0.77,
    -0.1,
    -0.24,
    0.91,
    0.09,
    -0.21,
    0.91,
    0.09,
    -0.21,
    0.91,
    0.09,
    -0.21,
    0.91,
    0.09,
    -0.21,
    0.84,
    -0.04,
    -0.16,
    0.84,
    -0.04,
    -0.16,
    0.84,
    -0.04,
    -0.16,
    0.84,
    -0.04,
    -0.16,
    0.84,
    -0.04,
    -0.16,
    0.67,
    -0.03,
    -0.1,
    0.67,
    -0.03,
    -0.1,
    0.67,
    -0.03,
    -0.1,
    0.67,
    -0.03,
    -0.1,
    0.67,
    -0.03,
    -0.1,
    0.82,
    0.13,
    -0.09,
    0.82,
    0.13,
    -0.09,
    0.82,
    0.13,
    -0.09,
    0.82,
    0.13,
    -0.09,
    0.82,
    0.13,
    -0.09,
    0.82,
    0.13,
    -0.09,
    0.84,
    0.31,
    -0.22,
    0.84,
    0.31,
    -0.22,
    0.84,
    0.31,
    -0.22,
    0.87,
    0.26,
    -0.17,
    0.87,
    0.26,
    -0.17,
    0.87,
    0.26,
    -0.17,
    0.87,
    0.26,
    -0.17,
    0.87,
    0.26,
    -0.17,
    0.64,
    -0.16,
    -1.06,
    0.64,
    -0.16,
    -1.06,
    0.64,
    -0.16,
    -1.06,
    0.64,
    -0.16,
    -1.06,
    0.64,
    -0.16,
    -1.06,
    0.75,
    0.03,
    -1.18,
    0.75,
    0.03,
    -1.18,
    0.75,
    0.03,
    -1.18,
    0.75,
    0.03,
    -1.18,
    0.75,
    0.03,
    -1.18,
    0.66,
    -0.07,
    -1.17,
    0.66,
    -0.07,
    -1.17,
    0.66,
    -0.07,
    -1.17,
    0.66,
    -0.07,
    -1.17,
    0.66,
    -0.07,
    -1.17,
    0.66,
    -0.07,
    -1.17,
    0.76,
    -0.13,
    -1.08,
    0.76,
    -0.13,
    -1.08,
    0.76,
    -0.13,
    -1.08,
    0.76,
    -0.13,
    -1.08,
    0.76,
    -0.13,
    -1.08,
    0.76,
    -0.13,
    -1.08,
    0.84,
    0.01,
    -1.09,
    0.84,
    0.01,
    -1.09,
    0.84,
    0.01,
    -1.09,
    0.84,
    0.01,
    -1.09,
    0.69,
    0.15,
    -1.19,
    0.69,
    0.15,
    -1.19,
    0.69,
    0.15,
    -1.19,
    0.69,
    0.15,
    -1.19,
    0.69,
    0.15,
    -1.19,
    0.69,
    0.15,
    -1.19,
    0.76,
    0.24,
    -1.1,
    0.76,
    0.24,
    -1.1,
    0.76,
    0.24,
    -1.1,
    0.76,
    0.24,
    -1.1,
    0.76,
    0.24,
    -1.1,
    0.82,
    0.16,
    -1.12,
    0.82,
    0.16,
    -1.12,
    0.82,
    0.16,
    -1.12,
    0.82,
    0.16,
    -1.12,
    0.82,
    0.16,
    -1.12,
    -0.03,
    0.12,
    -1.19,
    -0.03,
    0.12,
    -1.19,
    -0.03,
    0.12,
    -1.19,
    -0.03,
    0.12,
    -1.19,
    -0.13,
    -0.05,
    -1.2,
    -0.13,
    -0.05,
    -1.2,
    -0.13,
    -0.05,
    -1.2,
    -0.13,
    -0.05,
    -1.2,
    -0.12,
    -0.13,
    -1.27,
    -0.12,
    -0.13,
    -1.27,
    -0.12,
    -0.13,
    -1.27,
    -0.12,
    -0.13,
    -1.27,
    -0.12,
    -0.13,
    -1.27,
    -0.1,
    0.01,
    -1.17,
    -0.1,
    0.01,
    -1.17,
    -0.1,
    0.01,
    -1.17,
    -0.1,
    0.01,
    -1.17,
    -0.1,
    0.01,
    -1.17,
    -0.2,
    -0,
    -1.25,
    -0.2,
    -0,
    -1.25,
    -0.2,
    -0,
    -1.25,
    -0.2,
    -0,
    -1.25,
    -0.2,
    -0,
    -1.25,
    -0.2,
    -0,
    -1.25,
    -0.08,
    0.22,
    -1.26,
    -0.08,
    0.22,
    -1.26,
    -0.08,
    0.22,
    -1.26,
    -0.08,
    0.22,
    -1.26,
    -0.08,
    0.22,
    -1.26,
    -0.07,
    0.27,
    -1.37,
    -0.07,
    0.27,
    -1.37,
    -0.07,
    0.27,
    -1.37,
    -0.07,
    0.27,
    -1.37,
    -0.17,
    0.21,
    -1.32,
    -0.17,
    0.21,
    -1.32,
    -0.17,
    0.21,
    -1.32,
    -0.17,
    0.21,
    -1.32,
    -0.17,
    0.21,
    -1.32,
    -0.33,
    -0.23,
    -2.1,
    -0.33,
    -0.23,
    -2.1,
    -0.33,
    -0.23,
    -2.1,
    -0.33,
    -0.23,
    -2.1,
    -0.33,
    -0.23,
    -2.1,
    -0.33,
    -0.23,
    -2.1,
    -0.33,
    -0.23,
    -2.1,
    -0.29,
    -0.37,
    -2,
    -0.29,
    -0.37,
    -2,
    -0.29,
    -0.37,
    -2,
    -0.29,
    -0.37,
    -2,
    -0.29,
    -0.37,
    -2,
    -0.18,
    -0.44,
    -2.04,
    -0.18,
    -0.44,
    -2.04,
    -0.18,
    -0.44,
    -2.04,
    -0.18,
    -0.44,
    -2.04,
    -0.18,
    -0.44,
    -2.04,
    -0.26,
    -0.39,
    -2.11,
    -0.26,
    -0.39,
    -2.11,
    -0.26,
    -0.39,
    -2.11,
    -0.26,
    -0.39,
    -2.11,
    -0.26,
    -0.39,
    -2.11,
    -0.24,
    -0.32,
    -2.19,
    -0.24,
    -0.32,
    -2.19,
    -0.24,
    -0.32,
    -2.19,
    -0.24,
    -0.32,
    -2.19,
    -0.21,
    -0.04,
    -2.18,
    -0.21,
    -0.04,
    -2.18,
    -0.21,
    -0.04,
    -2.18,
    -0.21,
    -0.04,
    -2.18,
    -0.23,
    -0.17,
    -2.24,
    -0.23,
    -0.17,
    -2.24,
    -0.23,
    -0.17,
    -2.24,
    -0.23,
    -0.17,
    -2.24,
    -0.23,
    -0.17,
    -2.24,
    -0.28,
    -0.09,
    -2.16,
    -0.28,
    -0.09,
    -2.16,
    -0.28,
    -0.09,
    -2.16,
    -0.28,
    -0.09,
    -2.16,
    0.16,
    -0.14,
    -1.25,
    0.16,
    -0.14,
    -1.25,
    0.16,
    -0.14,
    -1.25,
    0.16,
    -0.14,
    -1.25,
    0.16,
    -0.14,
    -1.25,
    0.26,
    -0.07,
    -1.28,
    0.26,
    -0.07,
    -1.28,
    0.26,
    -0.07,
    -1.28,
    0.26,
    -0.07,
    -1.28,
    0.19,
    -0.01,
    -1.2,
    0.19,
    -0.01,
    -1.2,
    0.19,
    -0.01,
    -1.2,
    0.19,
    -0.01,
    -1.2,
    0.19,
    -0.01,
    -1.2,
    0.19,
    0.24,
    -1.41,
    0.19,
    0.24,
    -1.41,
    0.19,
    0.24,
    -1.41,
    0.19,
    0.24,
    -1.41,
    0.19,
    0.24,
    -1.41,
    0.2,
    0.18,
    -1.28,
    0.2,
    0.18,
    -1.28,
    0.2,
    0.18,
    -1.28,
    0.2,
    0.18,
    -1.28,
    0.2,
    0.18,
    -1.28,
    0.28,
    0.16,
    -1.37,
    0.28,
    0.16,
    -1.37,
    0.28,
    0.16,
    -1.37,
    0.28,
    0.16,
    -1.37,
    0.28,
    0.16,
    -1.37,
    0.05,
    -0.31,
    -2.24,
    0.05,
    -0.31,
    -2.24,
    0.05,
    -0.31,
    -2.24,
    0.05,
    -0.31,
    -2.24,
    0.05,
    -0.31,
    -2.24,
    0.05,
    -0.31,
    -2.24,
    0.05,
    -0.44,
    -2.14,
    0.05,
    -0.44,
    -2.14,
    0.05,
    -0.44,
    -2.14,
    0.05,
    -0.44,
    -2.14,
    0.05,
    -0.44,
    -2.14,
    0.06,
    -0.44,
    -2.02,
    0.06,
    -0.44,
    -2.02,
    0.06,
    -0.44,
    -2.02,
    0.06,
    -0.44,
    -2.02,
    0.15,
    -0.36,
    -2.12,
    0.15,
    -0.36,
    -2.12,
    0.15,
    -0.36,
    -2.12,
    0.15,
    -0.36,
    -2.12,
    0.15,
    -0.36,
    -2.12,
    0.16,
    -0.23,
    -2.18,
    0.16,
    -0.23,
    -2.18,
    0.16,
    -0.23,
    -2.18,
    0.16,
    -0.23,
    -2.18,
    -0.02,
    -0.19,
    -2.27,
    -0.02,
    -0.19,
    -2.27,
    -0.02,
    -0.19,
    -2.27,
    -0.02,
    -0.19,
    -2.27,
    0.12,
    -0.13,
    -2.22,
    0.12,
    -0.13,
    -2.22,
    0.12,
    -0.13,
    -2.22,
    0.12,
    -0.13,
    -2.22,
    0.12,
    -0.13,
    -2.22,
    0.12,
    -0.13,
    -2.22,
    0.01,
    -0.07,
    -2.22,
    0.01,
    -0.07,
    -2.22,
    0.01,
    -0.07,
    -2.22,
    0.01,
    -0.07,
    -2.22,
    0.59,
    -0.17,
    -1.02,
    0.59,
    -0.17,
    -1.02,
    0.59,
    -0.17,
    -1.02,
    0.59,
    -0.17,
    -1.02,
    0.59,
    -0.17,
    -1.02,
    0.59,
    -0.17,
    -1.02,
    0.42,
    -0.08,
    -1.03,
    0.42,
    -0.08,
    -1.03,
    0.42,
    -0.08,
    -1.03,
    0.42,
    -0.08,
    -1.03,
    0.42,
    -0.08,
    -1.03,
    0.5,
    -0.01,
    -0.97,
    0.5,
    -0.01,
    -0.97,
    0.5,
    -0.01,
    -0.97,
    0.5,
    -0.01,
    -0.97,
    0.5,
    -0.01,
    -0.97,
    0.5,
    -0.01,
    -0.97,
    0.53,
    0.19,
    -1.05,
    0.53,
    0.19,
    -1.05,
    0.53,
    0.19,
    -1.05,
    0.53,
    0.19,
    -1.05,
    0.53,
    0.19,
    -1.05,
    0.52,
    0.25,
    -1.18,
    0.52,
    0.25,
    -1.18,
    0.52,
    0.25,
    -1.18,
    0.52,
    0.25,
    -1.18,
    0.39,
    0.07,
    -1.08,
    0.39,
    0.07,
    -1.08,
    0.39,
    0.07,
    -1.08,
    0.39,
    0.07,
    -1.08,
    0.39,
    0.07,
    -1.08,
    0.44,
    0.2,
    -1.12,
    0.44,
    0.2,
    -1.12,
    0.44,
    0.2,
    -1.12,
    0.44,
    0.2,
    -1.12,
    0.37,
    -0.41,
    -1.8,
    0.37,
    -0.41,
    -1.8,
    0.37,
    -0.41,
    -1.8,
    0.37,
    -0.41,
    -1.8,
    0.37,
    -0.41,
    -1.8,
    0.3,
    -0.33,
    -1.83,
    0.3,
    -0.33,
    -1.83,
    0.3,
    -0.33,
    -1.83,
    0.3,
    -0.33,
    -1.83,
    0.3,
    -0.33,
    -1.83,
    0.3,
    -0.33,
    -1.83,
    0.3,
    -0.33,
    -1.83,
    0.49,
    -0.41,
    -1.91,
    0.49,
    -0.41,
    -1.91,
    0.49,
    -0.41,
    -1.91,
    0.49,
    -0.41,
    -1.91,
    0.49,
    -0.41,
    -1.91,
    0.49,
    -0.41,
    -1.91,
    0.38,
    -0.32,
    -1.94,
    0.38,
    -0.32,
    -1.94,
    0.38,
    -0.32,
    -1.94,
    0.38,
    -0.32,
    -1.94,
    0.38,
    -0.32,
    -1.94,
    0.32,
    -0.08,
    -1.85,
    0.32,
    -0.08,
    -1.85,
    0.32,
    -0.08,
    -1.85,
    0.32,
    -0.08,
    -1.85,
    0.41,
    -0.04,
    -1.95,
    0.41,
    -0.04,
    -1.95,
    0.41,
    -0.04,
    -1.95,
    0.41,
    -0.04,
    -1.95,
    0.41,
    -0.04,
    -1.95,
    0.35,
    -0.13,
    -1.96,
    0.35,
    -0.13,
    -1.96,
    0.35,
    -0.13,
    -1.96,
    0.35,
    -0.13,
    -1.96,
    0.35,
    -0.13,
    -1.96,
    0.83,
    -0.06,
    -1.1,
    0.83,
    -0.06,
    -1.1,
    0.83,
    -0.06,
    -1.1,
    0.83,
    -0.06,
    -1.1,
    0.83,
    -0.06,
    -1.1,
    0.77,
    -0.17,
    -1.1,
    0.77,
    -0.17,
    -1.1,
    0.77,
    -0.17,
    -1.1,
    0.77,
    -0.17,
    -1.1,
    0.77,
    -0.17,
    -1.1,
    0.75,
    -0.11,
    -1.01,
    0.75,
    -0.11,
    -1.01,
    0.75,
    -0.11,
    -1.01,
    0.75,
    -0.11,
    -1.01,
    0.75,
    -0.11,
    -1.01,
    0.76,
    0.03,
    -1.01,
    0.76,
    0.03,
    -1.01,
    0.76,
    0.03,
    -1.01,
    0.76,
    0.03,
    -1.01,
    0.76,
    0.03,
    -1.01,
    0.76,
    0.03,
    -1.01,
    0.76,
    0.21,
    -1.2,
    0.76,
    0.21,
    -1.2,
    0.76,
    0.21,
    -1.2,
    0.76,
    0.21,
    -1.2,
    0.76,
    0.21,
    -1.2,
    0.76,
    0.21,
    -1.2,
    0.8,
    0.16,
    -1.14,
    0.8,
    0.16,
    -1.14,
    0.8,
    0.16,
    -1.14,
    0.8,
    0.16,
    -1.14,
    0.71,
    0.17,
    -1.06,
    0.71,
    0.17,
    -1.06,
    0.71,
    0.17,
    -1.06,
    0.71,
    0.17,
    -1.06,
    0.85,
    0.09,
    -1.17,
    0.85,
    0.09,
    -1.17,
    0.85,
    0.09,
    -1.17,
    0.85,
    0.09,
    -1.17,
    0.85,
    0.09,
    -1.17,
    0.85,
    0.09,
    -1.17,
    0.56,
    -0.45,
    -1.8,
    0.56,
    -0.45,
    -1.8,
    0.56,
    -0.45,
    -1.8,
    0.56,
    -0.45,
    -1.8,
    0.62,
    -0.35,
    -1.96,
    0.62,
    -0.35,
    -1.96,
    0.62,
    -0.35,
    -1.96,
    0.62,
    -0.35,
    -1.96,
    0.62,
    -0.35,
    -1.96,
    0.62,
    -0.35,
    -1.96,
    0.65,
    -0.44,
    -1.84,
    0.65,
    -0.44,
    -1.84,
    0.65,
    -0.44,
    -1.84,
    0.65,
    -0.44,
    -1.84,
    0.65,
    -0.44,
    -1.84,
    0.72,
    -0.38,
    -1.85,
    0.72,
    -0.38,
    -1.85,
    0.72,
    -0.38,
    -1.85,
    0.72,
    -0.38,
    -1.85,
    0.72,
    -0.38,
    -1.85,
    0.75,
    -0.22,
    -1.91,
    0.75,
    -0.22,
    -1.91,
    0.75,
    -0.22,
    -1.91,
    0.75,
    -0.22,
    -1.91,
    0.53,
    -0.17,
    -2.02,
    0.53,
    -0.17,
    -2.02,
    0.53,
    -0.17,
    -2.02,
    0.53,
    -0.17,
    -2.02,
    0.53,
    -0.17,
    -2.02,
    0.53,
    -0.17,
    -2.02,
    0.73,
    -0.09,
    -1.91,
    0.73,
    -0.09,
    -1.91,
    0.73,
    -0.09,
    -1.91,
    0.73,
    -0.09,
    -1.91,
    0.73,
    -0.09,
    -1.91,
    0.61,
    -0.06,
    -1.96,
    0.61,
    -0.06,
    -1.96,
    0.61,
    -0.06,
    -1.96,
    0.61,
    -0.06,
    -1.96,
    0.61,
    -0.06,
    -1.96,
    0.69,
    -0.16,
    -1.99,
    0.69,
    -0.16,
    -1.99,
    0.69,
    -0.16,
    -1.99,
    0.69,
    -0.16,
    -1.99,
    0.69,
    -0.16,
    -1.99,
    -0.94,
    0.13,
    1.46,
    -0.94,
    0.13,
    1.46,
    -0.94,
    0.13,
    1.46,
    -0.94,
    0.13,
    1.46,
    -0.94,
    0.13,
    1.46,
    -0.84,
    -0.01,
    1.34,
    -0.84,
    -0.01,
    1.34,
    -0.84,
    -0.01,
    1.34,
    -0.84,
    -0.01,
    1.34,
    -0.84,
    -0.01,
    1.34,
    -0.92,
    -0.01,
    1.38,
    -0.92,
    -0.01,
    1.38,
    -0.92,
    -0.01,
    1.38,
    -0.92,
    -0.01,
    1.38,
    -0.92,
    -0.01,
    1.38,
    -1.04,
    0.04,
    1.38,
    -1.04,
    0.04,
    1.38,
    -1.04,
    0.04,
    1.38,
    -1.04,
    0.04,
    1.38,
    -1.08,
    0.18,
    1.41,
    -1.08,
    0.18,
    1.41,
    -1.08,
    0.18,
    1.41,
    -1.08,
    0.18,
    1.41,
    -1.08,
    0.18,
    1.41,
    -1.09,
    0.26,
    1.36,
    -1.09,
    0.26,
    1.36,
    -1.09,
    0.26,
    1.36,
    -1.09,
    0.26,
    1.36,
    -1.09,
    0.26,
    1.36,
    -1.22,
    -0.07,
    0.64,
    -1.22,
    -0.07,
    0.64,
    -1.22,
    -0.07,
    0.64,
    -1.22,
    -0.07,
    0.64,
    -1.22,
    -0.07,
    0.64,
    -1.22,
    -0.07,
    0.64,
    -1.08,
    -0.14,
    0.67,
    -1.08,
    -0.14,
    0.67,
    -1.08,
    -0.14,
    0.67,
    -1.08,
    -0.14,
    0.67,
    -1.08,
    -0.14,
    0.67,
    -1.09,
    -0.11,
    0.55,
    -1.09,
    -0.11,
    0.55,
    -1.09,
    -0.11,
    0.55,
    -1.09,
    -0.11,
    0.55,
    -1.09,
    -0.11,
    0.55,
    -1.18,
    -0.01,
    0.51,
    -1.18,
    -0.01,
    0.51,
    -1.18,
    -0.01,
    0.51,
    -1.18,
    -0.01,
    0.51,
    -1.25,
    0.17,
    0.61,
    -1.25,
    0.17,
    0.61,
    -1.25,
    0.17,
    0.61,
    -1.25,
    0.17,
    0.61,
    -1.27,
    0.07,
    0.57,
    -1.27,
    0.07,
    0.57,
    -1.27,
    0.07,
    0.57,
    -1.27,
    0.07,
    0.57,
    -1.27,
    0.07,
    0.57,
    -1.29,
    0.07,
    0.68,
    -1.29,
    0.07,
    0.68,
    -1.29,
    0.07,
    0.68,
    -1.29,
    0.07,
    0.68,
    -1.29,
    0.07,
    0.68,
    -0.69,
    0.38,
    1.24,
    -0.69,
    0.38,
    1.24,
    -0.69,
    0.38,
    1.24,
    -0.69,
    0.38,
    1.24,
    -0.65,
    0.18,
    1.27,
    -0.65,
    0.18,
    1.27,
    -0.65,
    0.18,
    1.27,
    -0.65,
    0.18,
    1.27,
    -0.65,
    0.18,
    1.27,
    -0.64,
    0.27,
    1.27,
    -0.64,
    0.27,
    1.27,
    -0.64,
    0.27,
    1.27,
    -0.64,
    0.27,
    1.27,
    -0.64,
    0.27,
    1.27,
    -0.76,
    0.15,
    1.4,
    -0.76,
    0.15,
    1.4,
    -0.76,
    0.15,
    1.4,
    -0.76,
    0.15,
    1.4,
    -0.76,
    0.15,
    1.4,
    -0.76,
    0.15,
    1.4,
    -0.74,
    0.33,
    1.37,
    -0.74,
    0.33,
    1.37,
    -0.74,
    0.33,
    1.37,
    -0.74,
    0.33,
    1.37,
    -0.74,
    0.33,
    1.37,
    -0.74,
    0.33,
    1.37,
    -0.89,
    0.4,
    1.35,
    -0.89,
    0.4,
    1.35,
    -0.89,
    0.4,
    1.35,
    -0.89,
    0.4,
    1.35,
    -0.89,
    0.4,
    1.35,
    -0.91,
    0.44,
    1.23,
    -0.91,
    0.44,
    1.23,
    -0.91,
    0.44,
    1.23,
    -0.91,
    0.44,
    1.23,
    -0.81,
    0.45,
    1.28,
    -0.81,
    0.45,
    1.28,
    -0.81,
    0.45,
    1.28,
    -0.81,
    0.45,
    1.28,
    -0.81,
    0.45,
    1.28,
    -0.92,
    -0.04,
    0.55,
    -0.92,
    -0.04,
    0.55,
    -0.92,
    -0.04,
    0.55,
    -0.92,
    -0.04,
    0.55,
    -0.92,
    -0.04,
    0.55,
    -0.92,
    -0.04,
    0.55,
    -0.97,
    0.18,
    0.43,
    -0.97,
    0.18,
    0.43,
    -0.97,
    0.18,
    0.43,
    -0.97,
    0.18,
    0.43,
    -0.97,
    0.18,
    0.43,
    -0.86,
    0.11,
    0.47,
    -0.86,
    0.11,
    0.47,
    -0.86,
    0.11,
    0.47,
    -0.86,
    0.11,
    0.47,
    -0.86,
    0.11,
    0.47,
    -0.79,
    0.14,
    0.55,
    -0.79,
    0.14,
    0.55,
    -0.79,
    0.14,
    0.55,
    -0.79,
    0.14,
    0.55,
    -0.79,
    0.14,
    0.55,
    -0.88,
    0.27,
    0.5,
    -0.88,
    0.27,
    0.5,
    -0.88,
    0.27,
    0.5,
    -0.88,
    0.27,
    0.5,
    -0.88,
    0.27,
    0.5,
    -1.08,
    0.33,
    0.55,
    -1.08,
    0.33,
    0.55,
    -1.08,
    0.33,
    0.55,
    -1.08,
    0.33,
    0.55,
    -1,
    0.33,
    0.5,
    -1,
    0.33,
    0.5,
    -1,
    0.33,
    0.5,
    -1,
    0.33,
    0.5,
    -1,
    0.33,
    0.5,
    -1.09,
    0.23,
    0.47,
    -1.09,
    0.23,
    0.47,
    -1.09,
    0.23,
    0.47,
    -1.09,
    0.23,
    0.47,
    0.99,
    -0.1,
    -0.17,
    0.99,
    -0.1,
    -0.17,
    0.99,
    -0.1,
    -0.17,
    0.99,
    -0.1,
    -0.17,
    0.99,
    -0.1,
    -0.17,
    0.99,
    -0.1,
    -0.17,
    1.21,
    0.16,
    -0.12,
    1.21,
    0.16,
    -0.12,
    1.21,
    0.16,
    -0.12,
    1.21,
    0.16,
    -0.12,
    1.21,
    0.16,
    -0.12,
    1.21,
    0.16,
    -0.12,
    1.09,
    0.24,
    -0.21,
    1.09,
    0.24,
    -0.21,
    1.09,
    0.24,
    -0.21,
    1.09,
    0.24,
    -0.21,
    1.09,
    0.24,
    -0.21,
    1.09,
    0.24,
    -0.21,
    1.09,
    0.24,
    -0.21,
    1.09,
    0.24,
    -0.21,
    1.06,
    0.07,
    -0.11,
    1.06,
    0.07,
    -0.11,
    1.06,
    0.07,
    -0.11,
    1.06,
    0.07,
    -0.11,
    1.06,
    0.07,
    -0.11,
    1.21,
    0.24,
    -0.21,
    1.21,
    0.24,
    -0.21,
    1.21,
    0.24,
    -0.21,
    1.21,
    0.24,
    -0.21,
    0.97,
    0.06,
    -0.19,
    0.97,
    0.06,
    -0.19,
    0.97,
    0.06,
    -0.19,
    0.97,
    0.06,
    -0.19,
    0.97,
    0.06,
    -0.19,
    0.99,
    0.18,
    -0.28,
    0.99,
    0.18,
    -0.28,
    0.99,
    0.18,
    -0.28,
    1.11,
    -0.19,
    -1.09,
    1.11,
    -0.19,
    -1.09,
    1.11,
    -0.19,
    -1.09,
    1.11,
    -0.19,
    -1.09,
    1.11,
    -0.19,
    -1.09,
    1.11,
    -0.19,
    -1.09,
    0.94,
    -0.02,
    -1.02,
    0.94,
    -0.02,
    -1.02,
    0.94,
    -0.02,
    -1.02,
    0.94,
    -0.02,
    -1.02,
    0.94,
    -0.02,
    -1.02,
    0.92,
    -0.13,
    -0.92,
    0.92,
    -0.13,
    -0.92,
    0.92,
    -0.13,
    -0.92,
    0.92,
    -0.13,
    -0.92,
    0.92,
    -0.13,
    -0.92,
    0.97,
    -0.21,
    -1,
    0.97,
    -0.21,
    -1,
    0.97,
    -0.21,
    -1,
    0.97,
    -0.21,
    -1,
    0.97,
    -0.21,
    -1,
    0.97,
    -0.21,
    -1,
    1.01,
    -0.05,
    -1.09,
    1.01,
    -0.05,
    -1.09,
    1.01,
    -0.05,
    -1.09,
    1.01,
    -0.05,
    -1.09,
    1.01,
    -0.05,
    -1.09,
    0.96,
    0.1,
    -0.96,
    0.96,
    0.1,
    -0.96,
    0.96,
    0.1,
    -0.96,
    0.96,
    0.1,
    -0.96,
    1.03,
    0.14,
    -1.03,
    1.03,
    0.14,
    -1.03,
    1.03,
    0.14,
    -1.03,
    1.03,
    0.14,
    -1.03,
    1.03,
    0.14,
    -1.03,
    1.03,
    0.14,
    -1.03,
    1.37,
    -0.06,
    -0.21,
    1.37,
    -0.06,
    -0.21,
    1.37,
    -0.06,
    -0.21,
    1.37,
    -0.06,
    -0.21,
    1.16,
    -0.07,
    -0.09,
    1.16,
    -0.07,
    -0.09,
    1.16,
    -0.07,
    -0.09,
    1.16,
    -0.07,
    -0.09,
    1.16,
    -0.07,
    -0.09,
    1.16,
    -0.07,
    -0.09,
    1.3,
    -0.16,
    -0.19,
    1.3,
    -0.16,
    -0.19,
    1.3,
    -0.16,
    -0.19,
    1.3,
    -0.16,
    -0.19,
    1.3,
    -0.16,
    -0.19,
    1.3,
    -0.16,
    -0.19,
    1.13,
    -0.19,
    -0.18,
    1.13,
    -0.19,
    -0.18,
    1.13,
    -0.19,
    -0.18,
    1.13,
    -0.19,
    -0.18,
    1.31,
    0.02,
    -0.12,
    1.31,
    0.02,
    -0.12,
    1.31,
    0.02,
    -0.12,
    1.31,
    0.02,
    -0.12,
    1.31,
    0.02,
    -0.12,
    1.31,
    0.22,
    -0.3,
    1.31,
    0.22,
    -0.3,
    1.31,
    0.22,
    -0.3,
    1.31,
    0.22,
    -0.3,
    1.31,
    0.22,
    -0.3,
    1.38,
    0.14,
    -0.21,
    1.38,
    0.14,
    -0.21,
    1.38,
    0.14,
    -0.21,
    1.38,
    0.14,
    -0.21,
    1.38,
    0.14,
    -0.21,
    1.38,
    0.14,
    -0.21,
    1.11,
    -0.28,
    -0.97,
    1.11,
    -0.28,
    -0.97,
    1.11,
    -0.28,
    -0.97,
    1.11,
    -0.28,
    -0.97,
    1.32,
    -0.2,
    -0.94,
    1.32,
    -0.2,
    -0.94,
    1.32,
    -0.2,
    -0.94,
    1.32,
    -0.2,
    -0.94,
    1.32,
    -0.2,
    -0.94,
    1.25,
    -0.25,
    -1,
    1.25,
    -0.25,
    -1,
    1.25,
    -0.25,
    -1,
    1.25,
    -0.25,
    -1,
    1.25,
    -0.25,
    -1,
    1.25,
    -0.25,
    -1,
    1.26,
    -0.09,
    -1.1,
    1.26,
    -0.09,
    -1.1,
    1.26,
    -0.09,
    -1.1,
    1.26,
    -0.09,
    -1.1,
    1.26,
    -0.09,
    -1.1,
    1.33,
    -0.1,
    -1.03,
    1.33,
    -0.1,
    -1.03,
    1.33,
    -0.1,
    -1.03,
    1.33,
    -0.1,
    -1.03,
    1.33,
    -0.1,
    -1.03,
    1.15,
    0.05,
    -1.12,
    1.15,
    0.05,
    -1.12,
    1.15,
    0.05,
    -1.12,
    1.15,
    0.05,
    -1.12,
    1.15,
    0.05,
    -1.12,
    1.15,
    0.05,
    -1.12,
    1.18,
    0.16,
    -1.03,
    1.18,
    0.16,
    -1.03,
    1.18,
    0.16,
    -1.03,
    1.18,
    0.16,
    -1.03,
    1.18,
    0.16,
    -1.03,
    1.37,
    0.03,
    -0.95,
    1.37,
    0.03,
    -0.95,
    1.37,
    0.03,
    -0.95,
    1.37,
    0.03,
    -0.95,
    1.31,
    0.09,
    -1.05,
    1.31,
    0.09,
    -1.05,
    1.31,
    0.09,
    -1.05,
    1.31,
    0.09,
    -1.05,
    1.31,
    0.09,
    -1.05,
    1.31,
    0.09,
    -1.05,
    0.99,
    -0.19,
    -1.05,
    0.99,
    -0.19,
    -1.05,
    0.99,
    -0.19,
    -1.05,
    0.99,
    -0.19,
    -1.05,
    0.99,
    -0.19,
    -1.05,
    0.96,
    -0.05,
    -1.11,
    0.96,
    -0.05,
    -1.11,
    0.96,
    -0.05,
    -1.11,
    0.96,
    -0.05,
    -1.11,
    1.16,
    0.04,
    -1.07,
    1.16,
    0.04,
    -1.07,
    1.16,
    0.04,
    -1.07,
    1.16,
    0.04,
    -1.07,
    1.05,
    -0.04,
    -1.03,
    1.05,
    -0.04,
    -1.03,
    1.05,
    -0.04,
    -1.03,
    1.05,
    -0.04,
    -1.03,
    1.04,
    0.07,
    -1.14,
    1.04,
    0.07,
    -1.14,
    1.04,
    0.07,
    -1.14,
    1.04,
    0.07,
    -1.14,
    1.04,
    0.07,
    -1.14,
    0.9,
    -0.22,
    -1.61,
    0.9,
    -0.22,
    -1.61,
    0.9,
    -0.22,
    -1.61,
    0.9,
    -0.22,
    -1.61,
    0.93,
    -0.35,
    -1.58,
    0.93,
    -0.35,
    -1.58,
    0.93,
    -0.35,
    -1.58,
    0.93,
    -0.35,
    -1.58,
    0.93,
    -0.35,
    -1.58,
    1.04,
    -0.42,
    -1.55,
    1.04,
    -0.42,
    -1.55,
    1.04,
    -0.42,
    -1.55,
    1.04,
    -0.42,
    -1.55,
    1.05,
    -0.38,
    -1.66,
    1.05,
    -0.38,
    -1.66,
    1.05,
    -0.38,
    -1.66,
    1.05,
    -0.38,
    -1.66,
    0.97,
    -0.1,
    -1.66,
    0.97,
    -0.1,
    -1.66,
    0.97,
    -0.1,
    -1.66,
    0.97,
    -0.1,
    -1.66,
    0.97,
    -0.1,
    -1.66,
    1.31,
    -0.12,
    -1.12,
    1.31,
    -0.12,
    -1.12,
    1.31,
    -0.12,
    -1.12,
    1.31,
    -0.12,
    -1.12,
    1.23,
    -0.23,
    -1.06,
    1.23,
    -0.23,
    -1.06,
    1.23,
    -0.23,
    -1.06,
    1.23,
    -0.23,
    -1.06,
    1.23,
    -0.23,
    -1.06,
    1.1,
    -0.26,
    -1.06,
    1.1,
    -0.26,
    -1.06,
    1.1,
    -0.26,
    -1.06,
    1.1,
    -0.26,
    -1.06,
    1.12,
    -0.16,
    -1,
    1.12,
    -0.16,
    -1,
    1.12,
    -0.16,
    -1,
    1.12,
    -0.16,
    -1,
    1.19,
    -0.06,
    -1.01,
    1.19,
    -0.06,
    -1.01,
    1.19,
    -0.06,
    -1.01,
    1.19,
    -0.06,
    -1.01,
    1.19,
    -0.06,
    -1.01,
    1.19,
    -0.06,
    -1.01,
    1.16,
    0.09,
    -1.18,
    1.16,
    0.09,
    -1.18,
    1.16,
    0.09,
    -1.18,
    1.16,
    0.09,
    -1.18,
    1.28,
    0.02,
    -1.15,
    1.28,
    0.02,
    -1.15,
    1.28,
    0.02,
    -1.15,
    1.28,
    0.02,
    -1.15,
    1.28,
    0.02,
    -1.15,
    1.16,
    -0.3,
    -1.7,
    1.16,
    -0.3,
    -1.7,
    1.16,
    -0.3,
    -1.7,
    1.16,
    -0.3,
    -1.7,
    1.18,
    -0.4,
    -1.58,
    1.18,
    -0.4,
    -1.58,
    1.18,
    -0.4,
    -1.58,
    1.18,
    -0.4,
    -1.58,
    1.18,
    -0.4,
    -1.58,
    1.25,
    -0.28,
    -1.62,
    1.25,
    -0.28,
    -1.62,
    1.25,
    -0.28,
    -1.62,
    1.25,
    -0.28,
    -1.62,
    1.02,
    -0.27,
    -1.72,
    1.02,
    -0.27,
    -1.72,
    1.02,
    -0.27,
    -1.72,
    1.02,
    -0.27,
    -1.72,
    1.02,
    -0.27,
    -1.72,
    1.02,
    -0.27,
    -1.72,
    1.22,
    -0.15,
    -1.67,
    1.22,
    -0.15,
    -1.67,
    1.22,
    -0.15,
    -1.67,
    1.22,
    -0.15,
    -1.67,
    1.22,
    -0.15,
    -1.67,
    1.11,
    -0.08,
    -1.67,
    1.11,
    -0.08,
    -1.67,
    1.11,
    -0.08,
    -1.67,
    1.11,
    -0.08,
    -1.67,
    1.08,
    -0.18,
    -1.73,
    1.08,
    -0.18,
    -1.73,
    1.08,
    -0.18,
    -1.73,
    1.08,
    -0.18,
    -1.73,
    -1.02,
    -0.12,
    0.44,
    -1.02,
    -0.12,
    0.44,
    -1.02,
    -0.12,
    0.44,
    -1.02,
    -0.12,
    0.44,
    -1.12,
    -0.12,
    0.52,
    -1.12,
    -0.12,
    0.52,
    -1.12,
    -0.12,
    0.52,
    -1.12,
    -0.12,
    0.52,
    -1.12,
    -0.12,
    0.52,
    -1.13,
    -0.2,
    0.43,
    -1.13,
    -0.2,
    0.43,
    -1.13,
    -0.2,
    0.43,
    -1.13,
    -0.2,
    0.43,
    -1.36,
    0.07,
    0.35,
    -1.36,
    0.07,
    0.35,
    -1.36,
    0.07,
    0.35,
    -1.36,
    0.07,
    0.35,
    -1.28,
    -0.11,
    0.47,
    -1.28,
    -0.11,
    0.47,
    -1.28,
    -0.11,
    0.47,
    -1.28,
    -0.11,
    0.47,
    -1.28,
    -0.11,
    0.47,
    -1.29,
    0.12,
    0.46,
    -1.29,
    0.12,
    0.46,
    -1.29,
    0.12,
    0.46,
    -1.29,
    0.12,
    0.46,
    -1.29,
    0.12,
    0.46,
    -1.2,
    -0.01,
    0.54,
    -1.2,
    -0.01,
    0.54,
    -1.2,
    -0.01,
    0.54,
    -1.2,
    -0.01,
    0.54,
    -1.2,
    -0.01,
    0.54,
    -1.34,
    0.02,
    0.45,
    -1.34,
    0.02,
    0.45,
    -1.34,
    0.02,
    0.45,
    -1.34,
    0.02,
    0.45,
    -1.34,
    0.02,
    0.45,
    -1.35,
    -0.34,
    -0.18,
    -1.35,
    -0.34,
    -0.18,
    -1.35,
    -0.34,
    -0.18,
    -1.35,
    -0.34,
    -0.18,
    -1.35,
    -0.34,
    -0.18,
    -1.19,
    -0.39,
    -0.17,
    -1.19,
    -0.39,
    -0.17,
    -1.19,
    -0.39,
    -0.17,
    -1.19,
    -0.39,
    -0.17,
    -1.1,
    -0.35,
    -0.2,
    -1.1,
    -0.35,
    -0.2,
    -1.1,
    -0.35,
    -0.2,
    -1.1,
    -0.35,
    -0.2,
    -1.1,
    -0.35,
    -0.2,
    -1.2,
    -0.38,
    -0.24,
    -1.2,
    -0.38,
    -0.24,
    -1.2,
    -0.38,
    -0.24,
    -1.2,
    -0.38,
    -0.24,
    -1.2,
    -0.38,
    -0.24,
    -1.29,
    -0.3,
    -0.31,
    -1.29,
    -0.3,
    -0.31,
    -1.29,
    -0.3,
    -0.31,
    -1.29,
    -0.3,
    -0.31,
    -1.29,
    -0.3,
    -0.31,
    -1.38,
    -0.15,
    -0.3,
    -1.38,
    -0.15,
    -0.3,
    -1.38,
    -0.15,
    -0.3,
    -1.38,
    -0.15,
    -0.3,
    -1.38,
    -0.15,
    -0.3,
    -1.42,
    -0.12,
    -0.18,
    -1.42,
    -0.12,
    -0.18,
    -1.42,
    -0.12,
    -0.18,
    -1.42,
    -0.12,
    -0.18,
    -1.42,
    -0.22,
    -0.23,
    -1.42,
    -0.22,
    -0.23,
    -1.42,
    -0.22,
    -0.23,
    -1.42,
    -0.22,
    -0.23,
    -1.42,
    -0.22,
    -0.23,
    -0.93,
    0.25,
    0.31,
    -0.93,
    0.25,
    0.31,
    -0.93,
    0.25,
    0.31,
    -0.93,
    0.25,
    0.31,
    -0.93,
    0.25,
    0.31,
    -0.93,
    0.25,
    0.31,
    -0.86,
    0.06,
    0.36,
    -0.86,
    0.06,
    0.36,
    -0.86,
    0.06,
    0.36,
    -0.86,
    0.06,
    0.36,
    -0.86,
    0.14,
    0.28,
    -0.86,
    0.14,
    0.28,
    -0.86,
    0.14,
    0.28,
    -0.86,
    0.14,
    0.28,
    -0.88,
    0.13,
    0.41,
    -0.88,
    0.13,
    0.41,
    -0.88,
    0.13,
    0.41,
    -0.88,
    0.13,
    0.41,
    -0.88,
    0.13,
    0.41,
    -0.99,
    0.22,
    0.44,
    -0.99,
    0.22,
    0.44,
    -0.99,
    0.22,
    0.44,
    -0.99,
    0.22,
    0.44,
    -1.18,
    0.27,
    0.32,
    -1.18,
    0.27,
    0.32,
    -1.18,
    0.27,
    0.32,
    -1.18,
    0.27,
    0.32,
    -1.18,
    0.27,
    0.32,
    -1.08,
    0.3,
    0.37,
    -1.08,
    0.3,
    0.37,
    -1.08,
    0.3,
    0.37,
    -1.08,
    0.3,
    0.37,
    -1.08,
    0.3,
    0.37,
    -1.08,
    0.31,
    0.26,
    -1.08,
    0.31,
    0.26,
    -1.08,
    0.31,
    0.26,
    -1.08,
    0.31,
    0.26,
    -1.08,
    -0.08,
    -0.41,
    -1.08,
    -0.08,
    -0.41,
    -1.08,
    -0.08,
    -0.41,
    -1.08,
    -0.08,
    -0.41,
    -1.08,
    -0.08,
    -0.41,
    -0.99,
    -0.2,
    -0.33,
    -0.99,
    -0.2,
    -0.33,
    -0.99,
    -0.2,
    -0.33,
    -0.99,
    -0.2,
    -0.33,
    -0.99,
    -0.2,
    -0.33,
    -0.92,
    -0.15,
    -0.22,
    -0.92,
    -0.15,
    -0.22,
    -0.92,
    -0.15,
    -0.22,
    -0.92,
    -0.15,
    -0.22,
    -0.94,
    -0.1,
    -0.33,
    -0.94,
    -0.1,
    -0.33,
    -0.94,
    -0.1,
    -0.33,
    -0.94,
    -0.1,
    -0.33,
    -0.94,
    -0.1,
    -0.33,
    -1,
    0.03,
    -0.34,
    -1,
    0.03,
    -0.34,
    -1,
    0.03,
    -0.34,
    -1,
    0.03,
    -0.34,
    -1,
    0.03,
    -0.34,
    -1.15,
    0.11,
    -0.31,
    -1.15,
    0.11,
    -0.31,
    -1.15,
    0.11,
    -0.31,
    -1.15,
    0.11,
    -0.31,
    -1.26,
    0.04,
    -0.32,
    -1.26,
    0.04,
    -0.32,
    -1.26,
    0.04,
    -0.32,
    -1.26,
    0.04,
    -0.32,
    -1.26,
    0.04,
    -0.32,
    -1.16,
    0.04,
    -0.39,
    -1.16,
    0.04,
    -0.39,
    -1.16,
    0.04,
    -0.39,
    -1.16,
    0.04,
    -0.39,
    -1.16,
    0.04,
    -0.39
  ]);
  var normal_arr3 = Float32Array.from([
    -0.71,
    -0.59,
    0.38,
    -0.3,
    -0.22,
    0.93,
    -0.07,
    -0.92,
    0.39,
    0.1,
    -0.42,
    0.9,
    -0.35,
    0.1,
    0.93,
    -0.3,
    -0.22,
    0.93,
    0.1,
    -0.42,
    0.9,
    0.16,
    0.38,
    0.91,
    0.19,
    0.35,
    0.92,
    -0.98,
    0.05,
    0.17,
    -0.71,
    -0.59,
    0.38,
    -0.68,
    0.29,
    0.67,
    -0.35,
    0.1,
    0.93,
    -0.3,
    -0.22,
    0.93,
    -0.37,
    0.63,
    0.69,
    -0.05,
    0.92,
    0.39,
    0.15,
    0.91,
    0.39,
    0.16,
    0.38,
    0.91,
    0.19,
    0.35,
    0.92,
    0.26,
    0.69,
    0.68,
    -0.98,
    0.05,
    0.17,
    -0.86,
    0.5,
    -0.02,
    -0.68,
    0.29,
    0.67,
    -0.53,
    0.55,
    0.65,
    -0.68,
    0.29,
    0.67,
    -0.53,
    0.55,
    0.65,
    -0.37,
    0.63,
    0.69,
    -0.35,
    0.1,
    0.93,
    0.16,
    0.38,
    0.91,
    -0.31,
    0.91,
    -0.28,
    -0.05,
    0.92,
    0.39,
    0.06,
    0.92,
    -0.39,
    0.15,
    0.91,
    0.39,
    0.19,
    0.98,
    -0.02,
    -0.86,
    0.5,
    -0.02,
    -0.72,
    0.68,
    -0.14,
    -0.53,
    0.55,
    0.65,
    -0.37,
    0.63,
    0.69,
    -0.31,
    0.91,
    -0.28,
    -0.05,
    0.92,
    0.39,
    -0.71,
    -0.59,
    0.38,
    -0.53,
    -0.78,
    -0.33,
    -0.19,
    -0.9,
    -0.4,
    -0.07,
    -0.92,
    0.39,
    -0.98,
    0.05,
    0.17,
    -0.83,
    -0.18,
    -0.53,
    -0.71,
    -0.59,
    0.38,
    -0.53,
    -0.78,
    -0.33,
    -0.83,
    -0.18,
    -0.53,
    -0.53,
    -0.78,
    -0.33,
    -0.19,
    -0.9,
    -0.4,
    -0.18,
    -0.4,
    -0.9,
    -0.83,
    -0.18,
    -0.53,
    -0.77,
    0.02,
    -0.64,
    -0.23,
    0.01,
    -0.97,
    -0.18,
    -0.4,
    -0.9,
    -0.77,
    0.02,
    -0.64,
    -0.68,
    0.64,
    -0.37,
    -0.23,
    0.01,
    -0.97,
    -0.06,
    0.72,
    -0.69,
    -0.05,
    0.44,
    -0.9,
    -0.72,
    0.68,
    -0.14,
    -0.68,
    0.64,
    -0.37,
    -0.31,
    0.91,
    -0.28,
    -0.06,
    0.72,
    -0.69,
    0.06,
    0.92,
    -0.39,
    -0.98,
    0.05,
    0.17,
    -0.86,
    0.5,
    -0.02,
    -0.83,
    -0.18,
    -0.53,
    -0.77,
    0.02,
    -0.64,
    -0.72,
    0.68,
    -0.14,
    -0.68,
    0.64,
    -0.37,
    -0.07,
    -0.92,
    0.39,
    0.1,
    -0.42,
    0.9,
    0.33,
    -0.9,
    0.29,
    0.56,
    -0.41,
    0.72,
    0.59,
    -0.78,
    0.21,
    0.56,
    -0.41,
    0.72,
    0.59,
    -0.78,
    0.21,
    0.84,
    0.16,
    0.52,
    0.89,
    -0.46,
    -0.01,
    0.98,
    -0.13,
    -0.13,
    0.1,
    -0.42,
    0.9,
    0.19,
    0.35,
    0.92,
    0.56,
    -0.41,
    0.72,
    0.84,
    0.16,
    0.52,
    0.19,
    0.35,
    0.92,
    0.26,
    0.69,
    0.68,
    0.78,
    0.4,
    0.48,
    0.84,
    0.16,
    0.52,
    0.15,
    0.91,
    0.39,
    0.19,
    0.98,
    -0.02,
    0.26,
    0.69,
    0.68,
    0.72,
    0.67,
    -0.15,
    0.78,
    0.4,
    0.48,
    0.06,
    0.92,
    -0.39,
    0.19,
    0.98,
    -0.02,
    0.72,
    0.67,
    -0.15,
    0.73,
    0.57,
    -0.38,
    0.72,
    0.67,
    -0.15,
    0.73,
    0.57,
    -0.38,
    0.78,
    0.4,
    0.48,
    0.84,
    0.16,
    0.52,
    0.98,
    -0.13,
    -0.13,
    -0.19,
    -0.9,
    -0.4,
    -0.07,
    -0.92,
    0.39,
    0.06,
    -0.94,
    -0.35,
    0.33,
    -0.9,
    0.29,
    0.06,
    -0.94,
    -0.35,
    0.33,
    -0.9,
    0.29,
    0.53,
    -0.56,
    -0.64,
    0.59,
    -0.78,
    0.21,
    0.89,
    -0.46,
    -0.01,
    -0.19,
    -0.9,
    -0.4,
    -0.18,
    -0.4,
    -0.9,
    0.06,
    -0.94,
    -0.35,
    0.25,
    -0.34,
    -0.9,
    0.48,
    -0.38,
    -0.79,
    0.53,
    -0.56,
    -0.64,
    0.48,
    -0.38,
    -0.79,
    0.53,
    -0.56,
    -0.64,
    0.84,
    -0.15,
    -0.52,
    0.89,
    -0.46,
    -0.01,
    0.98,
    -0.13,
    -0.13,
    -0.23,
    0.01,
    -0.97,
    -0.18,
    -0.4,
    -0.9,
    -0.05,
    0.44,
    -0.9,
    0.14,
    0.33,
    -0.93,
    0.25,
    -0.34,
    -0.9,
    -0.06,
    0.72,
    -0.69,
    -0.05,
    0.44,
    -0.9,
    0.06,
    0.92,
    -0.39,
    0.14,
    0.33,
    -0.93,
    0.69,
    0.45,
    -0.56,
    0.73,
    0.57,
    -0.38,
    0.69,
    0.45,
    -0.56,
    0.73,
    0.57,
    -0.38,
    0.84,
    -0.15,
    -0.52,
    0.98,
    -0.13,
    -0.13,
    0.14,
    0.33,
    -0.93,
    0.25,
    -0.34,
    -0.9,
    0.48,
    -0.38,
    -0.79,
    0.69,
    0.45,
    -0.56,
    0.84,
    -0.15,
    -0.52,
    -0.64,
    -0.02,
    0.77,
    -0.54,
    0.31,
    0.78,
    -0.04,
    -0.5,
    0.87,
    0.13,
    0.28,
    0.95,
    0.16,
    0.54,
    0.82,
    -0.84,
    -0.54,
    0.02,
    -0.2,
    -0.98,
    -0.1,
    -0.17,
    -0.96,
    0.22,
    -0.11,
    -0.72,
    0.68,
    -0.98,
    -0.19,
    0.08,
    -0.84,
    -0.54,
    0.02,
    -0.64,
    -0.02,
    0.77,
    -0.11,
    -0.72,
    0.68,
    -0.04,
    -0.5,
    0.87,
    -0.63,
    0.76,
    0.18,
    -0.58,
    0.75,
    0.31,
    0.19,
    0.8,
    0.56,
    0.2,
    0.97,
    0.14,
    -0.58,
    0.75,
    0.31,
    -0.54,
    0.31,
    0.78,
    0.16,
    0.54,
    0.82,
    0.19,
    0.8,
    0.56,
    -0.98,
    -0.19,
    0.08,
    -0.83,
    0.54,
    0.15,
    -0.64,
    -0.02,
    0.77,
    -0.63,
    0.76,
    0.18,
    -0.58,
    0.75,
    0.31,
    -0.54,
    0.31,
    0.78,
    -0.84,
    -0.54,
    0.02,
    -0.55,
    -0.71,
    -0.43,
    -0.21,
    -0.9,
    -0.39,
    -0.2,
    -0.98,
    -0.1,
    -0.98,
    -0.19,
    0.08,
    -0.83,
    0.54,
    0.15,
    -0.78,
    0.08,
    -0.62,
    -0.72,
    0.36,
    -0.6,
    -0.98,
    -0.19,
    0.08,
    -0.84,
    -0.54,
    0.02,
    -0.78,
    0.08,
    -0.62,
    -0.55,
    -0.71,
    -0.43,
    -0.51,
    -0.2,
    -0.84,
    -0.55,
    -0.71,
    -0.43,
    -0.51,
    -0.2,
    -0.84,
    -0.21,
    -0.9,
    -0.39,
    -0.16,
    -0.58,
    -0.8,
    -0.1,
    -0.19,
    -0.98,
    -0.78,
    0.08,
    -0.62,
    -0.72,
    0.36,
    -0.6,
    -0.51,
    -0.2,
    -0.84,
    -0.36,
    0.54,
    -0.76,
    -0.1,
    -0.19,
    -0.98,
    0.01,
    0.42,
    -0.91,
    -0.36,
    0.54,
    -0.76,
    -0.22,
    0.95,
    -0.23,
    0.01,
    0.42,
    -0.91,
    0.12,
    0.82,
    -0.55,
    0.17,
    0.97,
    -0.17,
    -0.63,
    0.76,
    0.18,
    -0.22,
    0.95,
    -0.23,
    0.17,
    0.97,
    -0.17,
    0.2,
    0.97,
    0.14,
    -0.83,
    0.54,
    0.15,
    -0.72,
    0.36,
    -0.6,
    -0.63,
    0.76,
    0.18,
    -0.36,
    0.54,
    -0.76,
    -0.22,
    0.95,
    -0.23,
    -0.2,
    -0.98,
    -0.1,
    -0.17,
    -0.96,
    0.22,
    0.16,
    -0.98,
    -0.11,
    0.27,
    -0.93,
    0.26,
    0.58,
    -0.81,
    -0.07,
    0.69,
    -0.33,
    0.64,
    0.71,
    -0.07,
    0.7,
    0.84,
    0.44,
    0.33,
    0.87,
    0.49,
    0.1,
    0.88,
    -0.48,
    -0.03,
    0.98,
    0.21,
    0.04,
    0.27,
    -0.93,
    0.26,
    0.42,
    -0.53,
    0.74,
    0.58,
    -0.81,
    -0.07,
    0.69,
    -0.33,
    0.64,
    0.88,
    -0.48,
    -0.03,
    -0.17,
    -0.96,
    0.22,
    -0.11,
    -0.72,
    0.68,
    -0.04,
    -0.5,
    0.87,
    0.27,
    -0.93,
    0.26,
    0.42,
    -0.53,
    0.74,
    -0.04,
    -0.5,
    0.87,
    0.13,
    0.28,
    0.95,
    0.42,
    -0.53,
    0.74,
    0.69,
    -0.33,
    0.64,
    0.71,
    -0.07,
    0.7,
    0.16,
    0.54,
    0.82,
    0.19,
    0.8,
    0.56,
    0.2,
    0.97,
    0.14,
    0.84,
    0.44,
    0.33,
    0.87,
    0.49,
    0.1,
    0.13,
    0.28,
    0.95,
    0.16,
    0.54,
    0.82,
    0.71,
    -0.07,
    0.7,
    0.84,
    0.44,
    0.33,
    -0.21,
    -0.9,
    -0.39,
    -0.2,
    -0.98,
    -0.1,
    -0.16,
    -0.58,
    -0.8,
    0.16,
    -0.98,
    -0.11,
    0.25,
    -0.85,
    -0.45,
    -0.1,
    -0.19,
    -0.98,
    0.01,
    0.42,
    -0.91,
    0.65,
    -0.2,
    -0.73,
    0.71,
    0.1,
    -0.7,
    -0.16,
    -0.58,
    -0.8,
    -0.1,
    -0.19,
    -0.98,
    0.25,
    -0.85,
    -0.45,
    0.65,
    -0.2,
    -0.73,
    0.75,
    -0.47,
    -0.47,
    0.16,
    -0.98,
    -0.11,
    0.25,
    -0.85,
    -0.45,
    0.58,
    -0.81,
    -0.07,
    0.75,
    -0.47,
    -0.47,
    0.88,
    -0.48,
    -0.03,
    0.65,
    -0.2,
    -0.73,
    0.71,
    0.1,
    -0.7,
    0.75,
    -0.47,
    -0.47,
    0.88,
    0.23,
    -0.42,
    0.88,
    -0.48,
    -0.03,
    0.98,
    0.21,
    0.04,
    0.12,
    0.82,
    -0.55,
    0.17,
    0.97,
    -0.17,
    0.2,
    0.97,
    0.14,
    0.87,
    0.49,
    0.1,
    0.88,
    0.23,
    -0.42,
    0.98,
    0.21,
    0.04,
    0.01,
    0.42,
    -0.91,
    0.12,
    0.82,
    -0.55,
    0.71,
    0.1,
    -0.7,
    0.88,
    0.23,
    -0.42,
    -0.49,
    -0.86,
    0.16,
    -0.12,
    -0.62,
    0.78,
    -0.08,
    -0.99,
    0.1,
    0.05,
    -0.66,
    0.75,
    -0.41,
    -0.17,
    0.9,
    -0.12,
    -0.62,
    0.78,
    0.05,
    -0.66,
    0.75,
    0.1,
    0.08,
    0.99,
    0.16,
    0.1,
    0.98,
    -0.77,
    -0.62,
    0.16,
    -0.51,
    -0.13,
    0.85,
    -0.49,
    -0.86,
    0.16,
    -0.41,
    -0.17,
    0.9,
    -0.12,
    -0.62,
    0.78,
    -0.99,
    0.08,
    0.13,
    -0.77,
    -0.62,
    0.16,
    -0.7,
    0.11,
    0.71,
    -0.51,
    -0.13,
    0.85,
    -0.36,
    0.43,
    0.83,
    -0.05,
    0.76,
    0.65,
    0.1,
    0.08,
    0.99,
    0.16,
    0.1,
    0.98,
    0.2,
    0.76,
    0.62,
    -0.99,
    0.08,
    0.13,
    -0.84,
    0.53,
    0.08,
    -0.7,
    0.11,
    0.71,
    -0.55,
    0.36,
    0.75,
    -0.7,
    0.11,
    0.71,
    -0.55,
    0.36,
    0.75,
    -0.51,
    -0.13,
    0.85,
    -0.41,
    -0.17,
    0.9,
    -0.36,
    0.43,
    0.83,
    0.1,
    0.08,
    0.99,
    -0.84,
    0.53,
    0.08,
    -0.64,
    0.77,
    0.01,
    -0.55,
    0.36,
    0.75,
    -0.36,
    0.43,
    0.83,
    -0.3,
    0.95,
    -0.03,
    -0.05,
    0.76,
    0.65,
    -0.3,
    0.95,
    -0.03,
    -0.05,
    0.76,
    0.65,
    0.1,
    0.99,
    -0.11,
    0.2,
    0.76,
    0.62,
    -0.77,
    -0.62,
    0.16,
    -0.73,
    -0.61,
    -0.32,
    -0.49,
    -0.86,
    0.16,
    -0.15,
    -0.81,
    -0.57,
    -0.08,
    -0.99,
    0.1,
    -0.99,
    0.08,
    0.13,
    -0.8,
    0.01,
    -0.59,
    -0.77,
    -0.62,
    0.16,
    -0.73,
    -0.61,
    -0.32,
    -0.8,
    0.01,
    -0.59,
    -0.73,
    -0.61,
    -0.32,
    -0.21,
    -0.09,
    -0.97,
    -0.15,
    -0.81,
    -0.57,
    -0.64,
    0.77,
    0.01,
    -0.62,
    0.64,
    -0.46,
    -0.3,
    0.95,
    -0.03,
    -0.03,
    0.68,
    -0.74,
    0.1,
    0.99,
    -0.11,
    -0.8,
    0.01,
    -0.59,
    -0.62,
    0.64,
    -0.46,
    -0.21,
    -0.09,
    -0.97,
    -0.03,
    0.68,
    -0.74,
    -0.99,
    0.08,
    0.13,
    -0.84,
    0.53,
    0.08,
    -0.8,
    0.01,
    -0.59,
    -0.64,
    0.77,
    0.01,
    -0.62,
    0.64,
    -0.46,
    0.05,
    -0.66,
    0.75,
    0.16,
    0.1,
    0.98,
    0.18,
    -0.66,
    0.73,
    0.49,
    -0,
    0.87,
    -0.08,
    -0.99,
    0.1,
    0.05,
    -0.66,
    0.75,
    0.18,
    -0.66,
    0.73,
    0.61,
    -0.79,
    -0.01,
    0.63,
    -0.72,
    0.29,
    0.61,
    -0.79,
    -0.01,
    0.63,
    -0.72,
    0.29,
    0.81,
    -0.01,
    0.58,
    0.99,
    -0.07,
    -0.12,
    0.18,
    -0.66,
    0.73,
    0.49,
    -0,
    0.87,
    0.63,
    -0.72,
    0.29,
    0.81,
    -0.01,
    0.58,
    0.1,
    0.99,
    -0.11,
    0.2,
    0.76,
    0.62,
    0.56,
    0.66,
    0.5,
    0.72,
    0.67,
    -0.17,
    0.16,
    0.1,
    0.98,
    0.2,
    0.76,
    0.62,
    0.49,
    -0,
    0.87,
    0.56,
    0.66,
    0.5,
    0.81,
    -0.01,
    0.58,
    0.56,
    0.66,
    0.5,
    0.72,
    0.67,
    -0.17,
    0.81,
    -0.01,
    0.58,
    0.99,
    -0.07,
    -0.12,
    0.59,
    -0.75,
    -0.29,
    0.61,
    -0.79,
    -0.01,
    0.76,
    -0.38,
    -0.53,
    0.98,
    -0.12,
    -0.19,
    0.99,
    -0.07,
    -0.12,
    -0.15,
    -0.81,
    -0.57,
    -0.08,
    -0.99,
    0.1,
    -0.01,
    -0.8,
    -0.6,
    0.59,
    -0.75,
    -0.29,
    0.61,
    -0.79,
    -0.01,
    -0.01,
    -0.8,
    -0.6,
    0.28,
    -0.12,
    -0.95,
    0.34,
    -0.11,
    -0.94,
    0.59,
    -0.75,
    -0.29,
    0.76,
    -0.38,
    -0.53,
    -0.21,
    -0.09,
    -0.97,
    -0.15,
    -0.81,
    -0.57,
    -0.01,
    -0.8,
    -0.6,
    0.28,
    -0.12,
    -0.95,
    0.34,
    -0.11,
    -0.94,
    0.76,
    -0.38,
    -0.53,
    0.82,
    0.14,
    -0.55,
    0.98,
    -0.12,
    -0.19,
    -0.21,
    -0.09,
    -0.97,
    -0.03,
    0.68,
    -0.74,
    0.12,
    0.62,
    -0.77,
    0.28,
    -0.12,
    -0.95,
    -0.03,
    0.68,
    -0.74,
    0.1,
    0.99,
    -0.11,
    0.12,
    0.62,
    -0.77,
    0.72,
    0.57,
    -0.4,
    0.72,
    0.67,
    -0.17,
    0.72,
    0.57,
    -0.4,
    0.72,
    0.67,
    -0.17,
    0.82,
    0.14,
    -0.55,
    0.98,
    -0.12,
    -0.19,
    0.99,
    -0.07,
    -0.12,
    0.12,
    0.62,
    -0.77,
    0.28,
    -0.12,
    -0.95,
    0.34,
    -0.11,
    -0.94,
    0.72,
    0.57,
    -0.4,
    0.82,
    0.14,
    -0.55,
    -0.65,
    0.01,
    0.76,
    -0.64,
    0.16,
    0.75,
    0.01,
    -0.33,
    0.94,
    0.14,
    0.14,
    0.98,
    -0.76,
    -0.63,
    0.16,
    -0.72,
    -0.54,
    0.43,
    -0.06,
    -0.99,
    0.11,
    0.01,
    -0.6,
    0.8,
    -0.72,
    -0.54,
    0.43,
    -0.65,
    0.01,
    0.76,
    0.01,
    -0.6,
    0.8,
    0.01,
    -0.33,
    0.94,
    -0.99,
    0.1,
    0.1,
    -0.76,
    -0.63,
    0.16,
    -0.72,
    -0.54,
    0.43,
    -0.65,
    0.01,
    0.76,
    -0.64,
    0.16,
    0.75,
    -0.64,
    0.16,
    0.75,
    -0.52,
    0.52,
    0.68,
    0.14,
    0.79,
    0.6,
    0.14,
    0.14,
    0.98,
    -0.64,
    0.77,
    -0.01,
    -0.52,
    0.52,
    0.68,
    0.06,
    0.99,
    -0.11,
    0.14,
    0.79,
    0.6,
    -0.99,
    0.1,
    0.1,
    -0.64,
    0.16,
    0.75,
    -0.64,
    0.77,
    -0.01,
    -0.52,
    0.52,
    0.68,
    -0.76,
    -0.63,
    0.16,
    -0.75,
    -0.67,
    -0.02,
    -0.55,
    -0.8,
    -0.26,
    -0.15,
    -0.93,
    -0.35,
    -0.06,
    -0.99,
    0.11,
    -0.95,
    0.04,
    -0.32,
    -0.75,
    -0.67,
    -0.02,
    -0.67,
    -0.07,
    -0.74,
    -0.55,
    -0.8,
    -0.26,
    -0.99,
    0.1,
    0.1,
    -0.95,
    0.04,
    -0.32,
    -0.76,
    -0.63,
    0.16,
    -0.75,
    -0.67,
    -0.02,
    -0.67,
    -0.07,
    -0.74,
    -0.55,
    -0.8,
    -0.26,
    -0.47,
    -0.05,
    -0.88,
    -0.15,
    -0.93,
    -0.35,
    -0.12,
    -0.15,
    -0.98,
    -0.08,
    -0.78,
    -0.63,
    -0.99,
    0.1,
    0.1,
    -0.95,
    0.04,
    -0.32,
    -0.68,
    0.7,
    -0.22,
    -0.64,
    0.77,
    -0.01,
    -0.68,
    0.7,
    -0.22,
    -0.64,
    0.77,
    -0.01,
    -0.23,
    0.63,
    -0.74,
    -0,
    0.65,
    -0.76,
    0.06,
    0.99,
    -0.11,
    -0.95,
    0.04,
    -0.32,
    -0.68,
    0.7,
    -0.22,
    -0.67,
    -0.07,
    -0.74,
    -0.47,
    -0.05,
    -0.88,
    -0.23,
    0.63,
    -0.74,
    -0.47,
    -0.05,
    -0.88,
    -0.23,
    0.63,
    -0.74,
    -0.12,
    -0.15,
    -0.98,
    -0,
    0.65,
    -0.76,
    0.76,
    0.02,
    0.65,
    0.76,
    -0.22,
    0.61,
    0.85,
    -0.52,
    -0.02,
    0.99,
    -0.03,
    -0.11,
    0.24,
    -0.66,
    0.71,
    0.37,
    -0.93,
    0.07,
    0.62,
    -0.79,
    0.02,
    0.76,
    -0.22,
    0.61,
    0.85,
    -0.52,
    -0.02,
    -0.06,
    -0.99,
    0.11,
    0.01,
    -0.6,
    0.8,
    0.24,
    -0.66,
    0.71,
    0.37,
    -0.93,
    0.07,
    0.01,
    -0.6,
    0.8,
    0.01,
    -0.33,
    0.94,
    0.14,
    0.14,
    0.98,
    0.24,
    -0.66,
    0.71,
    0.76,
    0.02,
    0.65,
    0.76,
    -0.22,
    0.61,
    0.06,
    0.99,
    -0.11,
    0.14,
    0.79,
    0.6,
    0.71,
    0.62,
    0.33,
    0.74,
    0.65,
    -0.15,
    0.14,
    0.79,
    0.6,
    0.14,
    0.14,
    0.98,
    0.71,
    0.62,
    0.33,
    0.76,
    0.02,
    0.65,
    0.71,
    0.62,
    0.33,
    0.74,
    0.65,
    -0.15,
    0.76,
    0.02,
    0.65,
    0.99,
    -0.03,
    -0.11,
    -0.15,
    -0.93,
    -0.35,
    -0.08,
    -0.78,
    -0.63,
    -0.06,
    -0.99,
    0.11,
    0.37,
    -0.93,
    0.07,
    0.62,
    -0.79,
    0.02,
    0.68,
    -0.48,
    -0.56,
    0.68,
    -0.48,
    -0.55,
    0.62,
    -0.79,
    0.02,
    0.68,
    -0.48,
    -0.55,
    0.85,
    -0.52,
    -0.02,
    0.99,
    -0.03,
    -0.11,
    1,
    0.04,
    -0.01,
    -0.12,
    -0.15,
    -0.98,
    -0.08,
    -0.78,
    -0.63,
    0.45,
    -0.13,
    -0.88,
    0.68,
    -0.48,
    -0.56,
    0.45,
    -0.13,
    -0.88,
    0.56,
    -0.01,
    -0.83,
    0.68,
    -0.48,
    -0.56,
    0.68,
    -0.48,
    -0.55,
    1,
    0.04,
    -0.01,
    -0,
    0.65,
    -0.76,
    0.06,
    0.99,
    -0.11,
    0.35,
    0.52,
    -0.78,
    0.74,
    0.65,
    -0.15,
    0.35,
    0.52,
    -0.78,
    0.56,
    -0.01,
    -0.83,
    0.74,
    0.65,
    -0.15,
    0.99,
    -0.03,
    -0.11,
    1,
    0.04,
    -0.01,
    -0.12,
    -0.15,
    -0.98,
    -0,
    0.65,
    -0.76,
    0.35,
    0.52,
    -0.78,
    0.45,
    -0.13,
    -0.88,
    0.56,
    -0.01,
    -0.83,
    -0.71,
    0.08,
    0.7,
    -0.69,
    -0.56,
    0.46,
    -0.37,
    -0.72,
    0.59,
    -0.23,
    0.14,
    0.96,
    -0.02,
    0.02,
    1,
    0.02,
    -0.1,
    0.99,
    -0.82,
    -0.55,
    0.12,
    -0.69,
    -0.56,
    0.46,
    -0.37,
    -0.72,
    0.59,
    -0.16,
    -0.98,
    0.1,
    -0.13,
    -0.93,
    0.34,
    -0.99,
    0.15,
    0.07,
    -0.9,
    0.24,
    0.38,
    -0.82,
    -0.55,
    0.12,
    -0.71,
    0.08,
    0.7,
    -0.69,
    -0.56,
    0.46,
    -0.29,
    0.55,
    0.78,
    -0.23,
    0.14,
    0.96,
    -0.02,
    0.02,
    1,
    0.02,
    0.78,
    0.63,
    0.23,
    0.75,
    0.62,
    0.3,
    0.4,
    0.87,
    -0.74,
    0.52,
    0.43,
    -0.57,
    0.82,
    -0.03,
    -0.29,
    0.55,
    0.78,
    -0.21,
    0.98,
    -0.05,
    0.02,
    0.78,
    0.63,
    -0.21,
    0.98,
    -0.05,
    0.02,
    0.78,
    0.63,
    0.2,
    0.97,
    -0.1,
    0.23,
    0.75,
    0.62,
    -0.9,
    0.24,
    0.38,
    -0.74,
    0.52,
    0.43,
    -0.71,
    0.08,
    0.7,
    -0.29,
    0.55,
    0.78,
    -0.23,
    0.14,
    0.96,
    -0.99,
    0.15,
    0.07,
    -0.9,
    0.44,
    -0,
    -0.9,
    0.24,
    0.38,
    -0.74,
    0.52,
    0.43,
    -0.57,
    0.82,
    -0.03,
    -0.82,
    -0.55,
    0.12,
    -0.81,
    -0.58,
    -0.11,
    -0.3,
    -0.92,
    -0.26,
    -0.16,
    -0.98,
    0.1,
    -0.99,
    0.15,
    0.07,
    -0.9,
    0.44,
    -0,
    -0.88,
    -0.21,
    -0.42,
    -0.75,
    -0.14,
    -0.64,
    -0.67,
    0.22,
    -0.71,
    -0.99,
    0.15,
    0.07,
    -0.88,
    -0.21,
    -0.42,
    -0.82,
    -0.55,
    0.12,
    -0.81,
    -0.58,
    -0.11,
    -0.88,
    -0.21,
    -0.42,
    -0.81,
    -0.58,
    -0.11,
    -0.75,
    -0.14,
    -0.64,
    -0.3,
    -0.92,
    -0.26,
    -0.27,
    -0.35,
    -0.9,
    -0.15,
    -0.75,
    -0.65,
    -0.75,
    -0.14,
    -0.64,
    -0.67,
    0.22,
    -0.71,
    -0.43,
    0.32,
    -0.84,
    -0.27,
    -0.35,
    -0.9,
    -0.16,
    0.22,
    -0.96,
    -0.04,
    -0.08,
    -1,
    -0.43,
    0.32,
    -0.84,
    -0.24,
    0.83,
    -0.5,
    -0.16,
    0.22,
    -0.96,
    0.08,
    0.89,
    -0.45,
    0.18,
    0.63,
    -0.75,
    -0.57,
    0.82,
    -0.03,
    -0.24,
    0.83,
    -0.5,
    -0.21,
    0.98,
    -0.05,
    0.08,
    0.89,
    -0.45,
    0.2,
    0.97,
    -0.1,
    -0.9,
    0.44,
    -0,
    -0.67,
    0.22,
    -0.71,
    -0.57,
    0.82,
    -0.03,
    -0.43,
    0.32,
    -0.84,
    -0.24,
    0.83,
    -0.5,
    -0.16,
    -0.98,
    0.1,
    -0.13,
    -0.93,
    0.34,
    0.16,
    -0.84,
    0.52,
    0.21,
    -0.98,
    0.04,
    0.65,
    -0.76,
    0.03,
    0.74,
    -0.2,
    0.65,
    0.78,
    0.05,
    0.62,
    0.87,
    -0.49,
    -0.02,
    0.98,
    0.19,
    -0.09,
    0.16,
    -0.84,
    0.52,
    0.3,
    -0.35,
    0.89,
    0.65,
    -0.76,
    0.03,
    0.74,
    -0.2,
    0.65,
    0.87,
    -0.49,
    -0.02,
    -0.37,
    -0.72,
    0.59,
    -0.13,
    -0.93,
    0.34,
    0.02,
    -0.1,
    0.99,
    0.16,
    -0.84,
    0.52,
    0.3,
    -0.35,
    0.89,
    -0.02,
    0.02,
    1,
    0.02,
    -0.1,
    0.99,
    0.3,
    -0.35,
    0.89,
    0.3,
    0.4,
    0.87,
    0.74,
    -0.2,
    0.65,
    0.78,
    0.05,
    0.62,
    0.2,
    0.97,
    -0.1,
    0.23,
    0.75,
    0.62,
    0.81,
    0.58,
    -0.11,
    0.23,
    0.75,
    0.62,
    0.3,
    0.4,
    0.87,
    0.78,
    0.05,
    0.62,
    0.81,
    0.58,
    -0.11,
    0.98,
    0.19,
    -0.09,
    -0.3,
    -0.92,
    -0.26,
    -0.16,
    -0.98,
    0.1,
    -0.15,
    -0.75,
    -0.65,
    0.06,
    -0.77,
    -0.64,
    0.21,
    -0.98,
    0.04,
    -0,
    -0.08,
    -1,
    0.4,
    -0.46,
    -0.79,
    0.44,
    0.16,
    -0.88,
    0.62,
    -0.39,
    -0.69,
    0.7,
    -0.04,
    -0.72,
    -0.27,
    -0.35,
    -0.9,
    -0.15,
    -0.75,
    -0.65,
    -0.04,
    -0.08,
    -1,
    -0,
    -0.08,
    -1,
    0.06,
    -0.77,
    -0.64,
    0.4,
    -0.46,
    -0.79,
    0.06,
    -0.77,
    -0.64,
    0.21,
    -0.98,
    0.04,
    0.4,
    -0.46,
    -0.79,
    0.62,
    -0.39,
    -0.69,
    0.65,
    -0.76,
    0.03,
    0.87,
    -0.49,
    -0.02,
    0.62,
    -0.39,
    -0.69,
    0.7,
    -0.04,
    -0.72,
    0.87,
    -0.49,
    -0.02,
    0.98,
    0.19,
    -0.09,
    -0.16,
    0.22,
    -0.96,
    -0.04,
    -0.08,
    -1,
    -0,
    -0.08,
    -1,
    0.18,
    0.63,
    -0.75,
    0.35,
    0.52,
    -0.78,
    0.44,
    0.16,
    -0.88,
    0.08,
    0.89,
    -0.45,
    0.18,
    0.63,
    -0.75,
    0.2,
    0.97,
    -0.1,
    0.35,
    0.52,
    -0.78,
    0.81,
    0.58,
    -0.11,
    0.35,
    0.52,
    -0.78,
    0.44,
    0.16,
    -0.88,
    0.7,
    -0.04,
    -0.72,
    0.81,
    0.58,
    -0.11,
    0.98,
    0.19,
    -0.09,
    -0.34,
    0.38,
    0.86,
    0.12,
    0.11,
    0.99,
    0.12,
    0.6,
    0.79,
    0.25,
    0.32,
    0.91,
    -0.72,
    -0.5,
    0.48,
    -0.63,
    -0.01,
    0.78,
    -0.06,
    -0.67,
    0.74,
    0.07,
    -0.39,
    0.92,
    -0.78,
    -0.52,
    0.35,
    -0.72,
    -0.5,
    0.48,
    -0.37,
    -0.85,
    0.37,
    -0.06,
    -0.67,
    0.74,
    -0.05,
    -0.93,
    0.37,
    -0.63,
    -0.01,
    0.78,
    -0.6,
    0.33,
    0.73,
    -0.34,
    0.38,
    0.86,
    0.07,
    -0.39,
    0.92,
    0.12,
    0.11,
    0.99,
    -0.98,
    0.15,
    0.12,
    -0.96,
    -0.17,
    0.2,
    -0.78,
    -0.52,
    0.35,
    -0.72,
    -0.5,
    0.48,
    -0.63,
    -0.01,
    0.78,
    -0.6,
    0.33,
    0.73,
    -0.6,
    0.33,
    0.73,
    -0.37,
    0.86,
    0.35,
    -0.34,
    0.38,
    0.86,
    0.12,
    0.6,
    0.79,
    0.15,
    0.91,
    0.39,
    -0.58,
    0.79,
    -0.21,
    -0.37,
    0.86,
    0.35,
    0.05,
    0.93,
    -0.37,
    0.15,
    0.91,
    0.39,
    -0.98,
    0.15,
    0.12,
    -0.93,
    0.36,
    -0.01,
    -0.6,
    0.33,
    0.73,
    -0.58,
    0.79,
    -0.21,
    -0.37,
    0.86,
    0.35,
    -0.98,
    0.15,
    0.12,
    -0.96,
    -0.17,
    0.2,
    -0.93,
    0.36,
    -0.01,
    -0.92,
    -0.38,
    -0.14,
    -0.81,
    -0.32,
    -0.49,
    -0.8,
    0.03,
    -0.6,
    -0.76,
    -0.14,
    -0.64,
    -0.96,
    -0.17,
    0.2,
    -0.92,
    -0.38,
    -0.14,
    -0.78,
    -0.52,
    0.35,
    -0.5,
    -0.87,
    0.03,
    -0.37,
    -0.85,
    0.37,
    -0.5,
    -0.87,
    0.03,
    -0.37,
    -0.85,
    0.37,
    -0.17,
    -0.9,
    -0.41,
    -0.05,
    -0.93,
    0.37,
    -0.01,
    -1,
    -0.01,
    -0.92,
    -0.38,
    -0.14,
    -0.81,
    -0.32,
    -0.49,
    -0.5,
    -0.87,
    0.03,
    -0.17,
    -0.9,
    -0.41,
    -0.14,
    -0.67,
    -0.73,
    -0.81,
    -0.32,
    -0.49,
    -0.76,
    -0.14,
    -0.64,
    -0.17,
    -0.33,
    -0.93,
    -0.14,
    -0.67,
    -0.73,
    -0.58,
    0.79,
    -0.21,
    -0.48,
    0.42,
    -0.78,
    -0.1,
    0.41,
    -0.91,
    0.05,
    0.93,
    -0.37,
    -0.8,
    0.03,
    -0.6,
    -0.76,
    -0.14,
    -0.64,
    -0.48,
    0.42,
    -0.78,
    -0.17,
    -0.33,
    -0.93,
    -0.1,
    0.41,
    -0.91,
    -0.93,
    0.36,
    -0.01,
    -0.8,
    0.03,
    -0.6,
    -0.58,
    0.79,
    -0.21,
    -0.48,
    0.42,
    -0.78,
    -0.06,
    -0.67,
    0.74,
    -0.05,
    -0.93,
    0.37,
    0.07,
    -0.39,
    0.92,
    0.49,
    -0.43,
    0.76,
    0.67,
    -0.72,
    0.18,
    0.49,
    -0.43,
    0.76,
    0.67,
    -0.72,
    0.18,
    0.78,
    0.18,
    0.6,
    0.99,
    -0.12,
    -0.09,
    0.07,
    -0.39,
    0.92,
    0.12,
    0.11,
    0.99,
    0.25,
    0.32,
    0.91,
    0.49,
    -0.43,
    0.76,
    0.78,
    0.18,
    0.6,
    0.05,
    0.93,
    -0.37,
    0.15,
    0.91,
    0.39,
    0.43,
    0.81,
    -0.4,
    0.59,
    0.75,
    0.29,
    0.72,
    0.61,
    -0.34,
    0.12,
    0.6,
    0.79,
    0.15,
    0.91,
    0.39,
    0.25,
    0.32,
    0.91,
    0.59,
    0.75,
    0.29,
    0.78,
    0.18,
    0.6,
    0.59,
    0.75,
    0.29,
    0.72,
    0.61,
    -0.34,
    0.78,
    0.18,
    0.6,
    0.93,
    0.25,
    -0.26,
    0.99,
    -0.12,
    -0.09,
    -0.17,
    -0.33,
    -0.93,
    -0.14,
    -0.67,
    -0.73,
    0.38,
    -0.05,
    -0.92,
    0.55,
    -0.54,
    -0.63,
    0.58,
    -0.13,
    -0.8,
    0.68,
    -0.34,
    -0.65,
    -0.17,
    -0.9,
    -0.41,
    -0.14,
    -0.67,
    -0.73,
    -0.01,
    -1,
    -0.01,
    0.55,
    -0.54,
    -0.63,
    0.62,
    -0.78,
    -0.05,
    -0.05,
    -0.93,
    0.37,
    -0.01,
    -1,
    -0.01,
    0.62,
    -0.78,
    -0.05,
    0.67,
    -0.72,
    0.18,
    0.55,
    -0.54,
    -0.63,
    0.62,
    -0.78,
    -0.05,
    0.67,
    -0.72,
    0.18,
    0.68,
    -0.34,
    -0.65,
    0.99,
    -0.12,
    -0.09,
    0.58,
    -0.13,
    -0.8,
    0.68,
    -0.34,
    -0.65,
    0.93,
    0.25,
    -0.26,
    0.99,
    -0.12,
    -0.09,
    -0.17,
    -0.33,
    -0.93,
    -0.1,
    0.41,
    -0.91,
    0.17,
    0.35,
    -0.92,
    0.38,
    -0.05,
    -0.92,
    0.17,
    0.35,
    -0.92,
    0.38,
    -0.05,
    -0.92,
    0.43,
    0.81,
    -0.4,
    0.58,
    -0.13,
    -0.8,
    0.72,
    0.61,
    -0.34,
    0.93,
    0.25,
    -0.26,
    -0.1,
    0.41,
    -0.91,
    0.05,
    0.93,
    -0.37,
    0.17,
    0.35,
    -0.92,
    0.43,
    0.81,
    -0.4,
    -0.41,
    -0.83,
    0.38,
    -0.22,
    -0.42,
    0.88,
    -0.2,
    -0.92,
    0.35,
    0.03,
    -0.29,
    0.96,
    0.18,
    -0.93,
    0.32,
    0.23,
    -0.76,
    0.62,
    -0.98,
    -0.12,
    0.18,
    -0.77,
    -0.57,
    0.29,
    -0.65,
    0.13,
    0.75,
    -0.41,
    -0.83,
    0.38,
    -0.22,
    -0.42,
    0.88,
    -0.65,
    0.13,
    0.75,
    -0.48,
    0.39,
    0.79,
    -0.22,
    -0.42,
    0.88,
    0.03,
    -0.29,
    0.96,
    0.08,
    0.35,
    0.93,
    0.15,
    -0.01,
    0.99,
    -0.53,
    0.45,
    0.72,
    -0.48,
    0.39,
    0.79,
    -0.21,
    0.87,
    0.44,
    0.08,
    0.35,
    0.93,
    0.16,
    0.92,
    0.37,
    -0.56,
    0.8,
    -0.22,
    -0.21,
    0.87,
    0.44,
    0.09,
    0.93,
    -0.35,
    0.16,
    0.92,
    0.37,
    -0.98,
    0.19,
    0.06,
    -0.98,
    -0.12,
    0.18,
    -0.65,
    0.13,
    0.75,
    -0.53,
    0.45,
    0.72,
    -0.48,
    0.39,
    0.79,
    -0.98,
    0.19,
    0.06,
    -0.56,
    0.8,
    -0.22,
    -0.53,
    0.45,
    0.72,
    -0.21,
    0.87,
    0.44,
    -0.77,
    -0.57,
    0.29,
    -0.5,
    -0.68,
    -0.53,
    -0.41,
    -0.83,
    0.38,
    -0.21,
    -0.95,
    -0.25,
    -0.2,
    -0.92,
    0.35,
    -0.98,
    0.19,
    0.06,
    -0.98,
    -0.12,
    0.18,
    -0.95,
    0.06,
    -0.31,
    -0.77,
    -0.57,
    0.29,
    -0.77,
    -0.17,
    -0.61,
    -0.5,
    -0.68,
    -0.53,
    -0.5,
    -0.74,
    -0.46,
    -0.5,
    -0.68,
    -0.53,
    -0.5,
    -0.74,
    -0.46,
    -0.21,
    -0.95,
    -0.25,
    -0.13,
    -0.39,
    -0.91,
    -0.03,
    -0.94,
    -0.35,
    0.13,
    -0.76,
    -0.64,
    -0.77,
    -0.17,
    -0.61,
    -0.5,
    -0.74,
    -0.46,
    -0.36,
    -0.15,
    -0.92,
    -0.13,
    -0.39,
    -0.91,
    -0.13,
    -0.39,
    -0.91,
    -0.98,
    0.19,
    0.06,
    -0.95,
    0.06,
    -0.31,
    -0.71,
    0.54,
    -0.45,
    -0.56,
    0.8,
    -0.22,
    -0.71,
    0.54,
    -0.45,
    -0.56,
    0.8,
    -0.22,
    -0.28,
    0.24,
    -0.93,
    0.01,
    0.48,
    -0.88,
    0.09,
    0.93,
    -0.35,
    -0.95,
    0.06,
    -0.31,
    -0.77,
    -0.17,
    -0.61,
    -0.71,
    0.54,
    -0.45,
    -0.36,
    -0.15,
    -0.92,
    -0.28,
    0.24,
    -0.93,
    0.75,
    -0.06,
    0.66,
    0.78,
    -0.41,
    0.47,
    0.84,
    0.14,
    0.52,
    0.88,
    -0.48,
    0.08,
    0.98,
    -0.18,
    -0.06,
    0.18,
    -0.93,
    0.32,
    0.23,
    -0.76,
    0.62,
    0.66,
    -0.73,
    0.16,
    0.78,
    -0.41,
    0.47,
    0.88,
    -0.48,
    0.08,
    0.03,
    -0.29,
    0.96,
    0.15,
    -0.01,
    0.99,
    0.23,
    -0.76,
    0.62,
    0.75,
    -0.06,
    0.66,
    0.78,
    -0.41,
    0.47,
    0.08,
    0.35,
    0.93,
    0.15,
    -0.01,
    0.99,
    0.58,
    0.46,
    0.68,
    0.75,
    -0.06,
    0.66,
    0.81,
    0.25,
    0.54,
    0.84,
    0.14,
    0.52,
    0.09,
    0.93,
    -0.35,
    0.16,
    0.92,
    0.37,
    0.34,
    0.87,
    0.35,
    0.42,
    0.83,
    -0.37,
    0.81,
    0.53,
    -0.26,
    0.81,
    0.57,
    -0.13,
    0.34,
    0.87,
    0.35,
    0.58,
    0.46,
    0.68,
    0.81,
    0.25,
    0.54,
    0.81,
    0.57,
    -0.13,
    0.08,
    0.35,
    0.93,
    0.16,
    0.92,
    0.37,
    0.34,
    0.87,
    0.35,
    0.58,
    0.46,
    0.68,
    0.81,
    0.25,
    0.54,
    0.81,
    0.53,
    -0.26,
    0.81,
    0.57,
    -0.13,
    0.84,
    0.14,
    0.52,
    0.97,
    0.17,
    -0.2,
    0.98,
    -0.18,
    -0.06,
    -0.21,
    -0.95,
    -0.25,
    -0.2,
    -0.92,
    0.35,
    -0.03,
    -0.94,
    -0.35,
    0.18,
    -0.93,
    0.32,
    -0.13,
    -0.39,
    -0.91,
    -0.13,
    -0.39,
    -0.91,
    0.13,
    -0.76,
    -0.64,
    0.21,
    -0.22,
    -0.95,
    0.49,
    -0.61,
    -0.62,
    0.61,
    -0.37,
    -0.7,
    -0.03,
    -0.94,
    -0.35,
    0.13,
    -0.76,
    -0.64,
    0.18,
    -0.93,
    0.32,
    0.49,
    -0.61,
    -0.62,
    0.66,
    -0.73,
    0.16,
    0.49,
    -0.61,
    -0.62,
    0.61,
    -0.37,
    -0.7,
    0.66,
    -0.73,
    0.16,
    0.88,
    -0.48,
    0.08,
    0.98,
    -0.18,
    -0.06,
    0.61,
    -0.37,
    -0.7,
    0.84,
    0.15,
    -0.52,
    0.97,
    0.17,
    -0.2,
    0.98,
    -0.18,
    -0.06,
    -0.36,
    -0.15,
    -0.92,
    -0.28,
    0.24,
    -0.93,
    -0.13,
    -0.39,
    -0.91,
    0.01,
    0.48,
    -0.88,
    0.18,
    0.37,
    -0.91,
    0.21,
    -0.22,
    -0.95,
    0.42,
    0.83,
    -0.37,
    0.47,
    0.54,
    -0.7,
    0.81,
    0.53,
    -0.26,
    0.84,
    0.15,
    -0.52,
    0.97,
    0.17,
    -0.2,
    0.01,
    0.48,
    -0.88,
    0.09,
    0.93,
    -0.35,
    0.18,
    0.37,
    -0.91,
    0.42,
    0.83,
    -0.37,
    0.47,
    0.54,
    -0.7,
    0.18,
    0.37,
    -0.91,
    0.21,
    -0.22,
    -0.95,
    0.47,
    0.54,
    -0.7,
    0.61,
    -0.37,
    -0.7,
    0.84,
    0.15,
    -0.52,
    -0.38,
    -0.28,
    0.88,
    -0.2,
    -0.46,
    0.86,
    -0.04,
    0.36,
    0.93,
    0.28,
    0.12,
    0.95,
    0.29,
    -0.4,
    0.87,
    0.07,
    -0.98,
    0.16,
    0.42,
    -0.52,
    0.74,
    0.51,
    -0.86,
    -0.01,
    0.7,
    -0.71,
    -0.04,
    0.71,
    -0.54,
    0.46,
    -0.44,
    -0.86,
    0.25,
    -0.2,
    -0.46,
    0.86,
    0.07,
    -0.98,
    0.16,
    0.29,
    -0.4,
    0.87,
    0.42,
    -0.52,
    0.74,
    -0.88,
    -0.38,
    0.29,
    -0.44,
    -0.86,
    0.25,
    -0.38,
    -0.28,
    0.88,
    -0.2,
    -0.46,
    0.86,
    -0.96,
    0.07,
    0.26,
    -0.88,
    -0.38,
    0.29,
    -0.38,
    0.54,
    0.75,
    -0.38,
    -0.28,
    0.88,
    -0.04,
    0.36,
    0.93,
    -0.96,
    0.07,
    0.26,
    -0.89,
    0.44,
    0.14,
    -0.69,
    0.73,
    0.06,
    -0.55,
    0.76,
    0.34,
    -0.38,
    0.54,
    0.75,
    -0.92,
    -0.37,
    -0.15,
    -0.88,
    -0.38,
    0.29,
    -0.76,
    -0.47,
    -0.45,
    -0.55,
    -0.69,
    -0.48,
    -0.44,
    -0.86,
    0.25,
    -0.41,
    -0.89,
    -0.18,
    -0.44,
    -0.86,
    0.25,
    -0.41,
    -0.89,
    -0.18,
    0.07,
    -0.98,
    0.16,
    0.34,
    -0.9,
    -0.28,
    0.51,
    -0.86,
    -0.01,
    -0.55,
    -0.69,
    -0.48,
    -0.41,
    -0.89,
    -0.18,
    0.02,
    -0.39,
    -0.92,
    0.18,
    -0.51,
    -0.84,
    0.34,
    -0.9,
    -0.28,
    -0.76,
    -0.47,
    -0.45,
    -0.55,
    -0.69,
    -0.48,
    -0.44,
    0.02,
    -0.9,
    0.02,
    -0.39,
    -0.92,
    -0.95,
    0.25,
    -0.17,
    -0.89,
    0.44,
    0.14,
    -0.69,
    0.73,
    0.06,
    -0.67,
    0.43,
    -0.6,
    -0.95,
    0.25,
    -0.17,
    -0.92,
    -0.37,
    -0.15,
    -0.76,
    -0.47,
    -0.45,
    -0.67,
    0.43,
    -0.6,
    -0.44,
    0.02,
    -0.9,
    -0.96,
    0.07,
    0.26,
    -0.95,
    0.25,
    -0.17,
    -0.92,
    -0.37,
    -0.15,
    -0.89,
    0.44,
    0.14,
    -0.88,
    -0.38,
    0.29,
    0.41,
    0.88,
    -0.23,
    0.56,
    0.68,
    0.47,
    0.75,
    0.48,
    0.46,
    0.86,
    0.42,
    -0.27,
    0.7,
    -0.71,
    -0.04,
    0.71,
    -0.54,
    0.46,
    0.77,
    -0.12,
    0.63,
    0.83,
    -0.55,
    -0.14,
    0.98,
    -0.11,
    -0.19,
    0.71,
    0.02,
    0.7,
    0.75,
    0.48,
    0.46,
    0.77,
    -0.12,
    0.63,
    0.86,
    0.42,
    -0.27,
    0.98,
    -0.11,
    -0.19,
    0.28,
    0.12,
    0.95,
    0.29,
    -0.4,
    0.87,
    0.42,
    -0.52,
    0.74,
    0.71,
    -0.54,
    0.46,
    0.71,
    0.02,
    0.7,
    0.77,
    -0.12,
    0.63,
    -0.04,
    0.36,
    0.93,
    0.22,
    0.67,
    0.71,
    0.28,
    0.12,
    0.95,
    0.56,
    0.68,
    0.47,
    0.71,
    0.02,
    0.7,
    0.75,
    0.48,
    0.46,
    -0.55,
    0.76,
    0.34,
    -0.38,
    0.54,
    0.75,
    -0.23,
    0.91,
    0.34,
    -0.04,
    0.36,
    0.93,
    0.22,
    0.67,
    0.71,
    -0.69,
    0.73,
    0.06,
    -0.55,
    0.76,
    0.34,
    -0.23,
    0.91,
    0.34,
    -0,
    0.99,
    -0.16,
    -0.23,
    0.91,
    0.34,
    -0,
    0.99,
    -0.16,
    0.22,
    0.67,
    0.71,
    0.41,
    0.88,
    -0.23,
    0.56,
    0.68,
    0.47,
    0.18,
    -0.51,
    -0.84,
    0.34,
    -0.9,
    -0.28,
    0.51,
    -0.86,
    -0.01,
    0.7,
    -0.71,
    -0.04,
    0.75,
    -0.5,
    -0.43,
    0.83,
    -0.55,
    -0.14,
    -0.44,
    0.02,
    -0.9,
    -0.14,
    0.42,
    -0.9,
    0.02,
    -0.39,
    -0.92,
    0.19,
    0.46,
    -0.87,
    0.41,
    0.25,
    -0.88,
    0.02,
    -0.39,
    -0.92,
    0.18,
    -0.51,
    -0.84,
    0.41,
    0.25,
    -0.88,
    0.73,
    0.24,
    -0.64,
    0.75,
    -0.5,
    -0.43,
    0.73,
    0.24,
    -0.64,
    0.75,
    -0.5,
    -0.43,
    0.83,
    -0.55,
    -0.14,
    0.86,
    0.42,
    -0.27,
    0.98,
    -0.11,
    -0.19,
    0.19,
    0.46,
    -0.87,
    0.41,
    0.88,
    -0.23,
    0.41,
    0.25,
    -0.88,
    0.73,
    0.24,
    -0.64,
    0.86,
    0.42,
    -0.27,
    -0.69,
    0.73,
    0.06,
    -0.67,
    0.43,
    -0.6,
    -0.4,
    0.59,
    -0.7,
    -0,
    0.99,
    -0.16,
    -0.4,
    0.59,
    -0.7,
    -0.14,
    0.42,
    -0.9,
    -0,
    0.99,
    -0.16,
    0.19,
    0.46,
    -0.87,
    0.41,
    0.88,
    -0.23,
    -0.67,
    0.43,
    -0.6,
    -0.44,
    0.02,
    -0.9,
    -0.4,
    0.59,
    -0.7,
    -0.14,
    0.42,
    -0.9,
    -0.99,
    -0.11,
    0.1,
    -0.79,
    -0.61,
    0.1,
    -0.67,
    -0.01,
    0.74,
    -0.5,
    -0.86,
    0.12,
    -0.41,
    -0.17,
    0.9,
    -0.29,
    -0.53,
    0.79,
    -0.28,
    0.5,
    0.82,
    -0.03,
    0.15,
    0.99,
    0.01,
    0.75,
    0.66,
    0.15,
    0.11,
    0.98,
    0.43,
    0.67,
    0.61,
    0.48,
    0.35,
    0.8,
    -0.72,
    0.5,
    0.49,
    -0.61,
    0.46,
    0.64,
    -0.56,
    0.83,
    -0.07,
    -0.28,
    0.5,
    0.82,
    -0.12,
    0.99,
    -0.12,
    0.01,
    0.75,
    0.66,
    0.03,
    0.98,
    -0.19,
    0.06,
    0.99,
    -0.1,
    -0.67,
    -0.01,
    0.74,
    -0.61,
    0.46,
    0.64,
    -0.41,
    -0.17,
    0.9,
    -0.28,
    0.5,
    0.82,
    -0.03,
    0.15,
    0.99,
    0.01,
    0.75,
    0.66,
    0.03,
    0.98,
    -0.19,
    0.43,
    0.67,
    0.61,
    0.49,
    0.77,
    0.4,
    -0.99,
    -0.11,
    0.1,
    -0.98,
    0.19,
    0.02,
    -0.72,
    0.5,
    0.49,
    -0.67,
    -0.01,
    0.74,
    -0.61,
    0.46,
    0.64,
    -0.98,
    0.19,
    0.02,
    -0.72,
    0.5,
    0.49,
    -0.56,
    0.83,
    -0.07,
    -0.48,
    -0.36,
    -0.8,
    -0.29,
    -0.76,
    -0.58,
    -0.14,
    -0.11,
    -0.98,
    -0.01,
    -0.8,
    -0.6,
    0.04,
    -0.14,
    -0.99,
    0.28,
    -0.49,
    -0.83,
    -0.98,
    0.18,
    -0.03,
    -0.9,
    -0.18,
    -0.39,
    -0.78,
    0.37,
    -0.5,
    -0.76,
    -0.19,
    -0.62,
    -0.65,
    0.28,
    -0.7,
    -0.99,
    -0.11,
    0.1,
    -0.98,
    0.18,
    -0.03,
    -0.98,
    0.19,
    0.02,
    -0.9,
    -0.18,
    -0.39,
    -0.79,
    -0.61,
    0.1,
    -0.9,
    -0.18,
    -0.39,
    -0.79,
    -0.61,
    0.1,
    -0.76,
    -0.19,
    -0.62,
    -0.5,
    -0.86,
    0.12,
    -0.48,
    -0.36,
    -0.8,
    -0.29,
    -0.76,
    -0.58,
    -0.76,
    -0.19,
    -0.62,
    -0.65,
    0.28,
    -0.7,
    -0.48,
    -0.36,
    -0.8,
    -0.38,
    0.3,
    -0.87,
    -0.14,
    -0.11,
    -0.98,
    -0.98,
    0.18,
    -0.03,
    -0.98,
    0.19,
    0.02,
    -0.78,
    0.37,
    -0.5,
    -0.56,
    0.83,
    -0.07,
    -0.78,
    0.37,
    -0.5,
    -0.65,
    0.28,
    -0.7,
    -0.56,
    0.83,
    -0.07,
    -0.38,
    0.3,
    -0.87,
    -0.12,
    0.99,
    -0.12,
    -0.06,
    0.63,
    -0.78,
    0.68,
    -0.27,
    0.68,
    0.82,
    -0.03,
    0.57,
    0.85,
    -0.53,
    0.05,
    0.99,
    -0.13,
    -0.02,
    -0.41,
    -0.17,
    0.9,
    -0.29,
    -0.53,
    0.79,
    -0.03,
    0.15,
    0.99,
    0.11,
    -0.62,
    0.78,
    0.15,
    0.11,
    0.98,
    0.37,
    -0.32,
    0.87,
    0.11,
    -0.62,
    0.78,
    0.16,
    -0.98,
    0.1,
    0.37,
    -0.32,
    0.87,
    0.55,
    -0.83,
    0.06,
    0.68,
    -0.27,
    0.68,
    0.85,
    -0.53,
    0.05,
    -0.5,
    -0.86,
    0.12,
    -0.29,
    -0.53,
    0.79,
    0.11,
    -0.62,
    0.78,
    0.16,
    -0.98,
    0.1,
    0.15,
    0.11,
    0.98,
    0.37,
    -0.32,
    0.87,
    0.48,
    0.35,
    0.8,
    0.68,
    -0.27,
    0.68,
    0.82,
    -0.03,
    0.57,
    0.03,
    0.98,
    -0.19,
    0.06,
    0.99,
    -0.1,
    0.48,
    0.86,
    -0.16,
    0.49,
    0.77,
    0.4,
    0.82,
    0.57,
    -0.1,
    0.43,
    0.67,
    0.61,
    0.48,
    0.35,
    0.8,
    0.49,
    0.77,
    0.4,
    0.82,
    0.57,
    -0.1,
    0.82,
    -0.03,
    0.57,
    0.99,
    -0.13,
    -0.02,
    -0.5,
    -0.86,
    0.12,
    -0.29,
    -0.76,
    -0.58,
    -0.01,
    -0.8,
    -0.6,
    0.16,
    -0.98,
    0.1,
    0.55,
    -0.83,
    0.06,
    0.74,
    -0.48,
    -0.47,
    0.85,
    -0.53,
    0.05,
    0.98,
    -0.19,
    -0.08,
    0.99,
    -0.13,
    -0.02,
    -0.01,
    -0.8,
    -0.6,
    0.16,
    -0.98,
    0.1,
    0.28,
    -0.49,
    -0.83,
    0.55,
    -0.83,
    0.06,
    0.59,
    -0.43,
    -0.69,
    0.74,
    -0.48,
    -0.47,
    0.04,
    -0.14,
    -0.99,
    0.28,
    -0.49,
    -0.83,
    0.39,
    0.17,
    -0.9,
    0.59,
    -0.43,
    -0.69,
    0.7,
    0.04,
    -0.72,
    0.59,
    -0.43,
    -0.69,
    0.7,
    0.04,
    -0.72,
    0.74,
    -0.48,
    -0.47,
    0.86,
    0.08,
    -0.51,
    0.98,
    -0.19,
    -0.08,
    -0.38,
    0.3,
    -0.87,
    -0.14,
    -0.11,
    -0.98,
    -0.06,
    0.63,
    -0.78,
    0.04,
    -0.14,
    -0.99,
    0.23,
    0.57,
    -0.79,
    0.39,
    0.17,
    -0.9,
    -0.12,
    0.99,
    -0.12,
    -0.06,
    0.63,
    -0.78,
    0.06,
    0.99,
    -0.1,
    0.23,
    0.57,
    -0.79,
    0.48,
    0.86,
    -0.16,
    0.82,
    0.57,
    -0.1,
    0.86,
    0.08,
    -0.51,
    0.98,
    -0.19,
    -0.08,
    0.99,
    -0.13,
    -0.02,
    0.23,
    0.57,
    -0.79,
    0.39,
    0.17,
    -0.9,
    0.48,
    0.86,
    -0.16,
    0.7,
    0.04,
    -0.72,
    0.82,
    0.57,
    -0.1,
    0.86,
    0.08,
    -0.51,
    -0.97,
    -0.16,
    0.17,
    -0.67,
    0.13,
    0.73,
    -0.53,
    -0.79,
    0.32,
    -0.26,
    -0.45,
    0.85,
    -0.26,
    0.07,
    0.96,
    -0.97,
    -0.16,
    0.17,
    -0.85,
    0.52,
    -0.07,
    -0.67,
    0.13,
    0.73,
    -0.61,
    0.54,
    0.57,
    -0.15,
    0.62,
    0.77,
    -0.02,
    0.92,
    0.39,
    0.41,
    0.84,
    0.36,
    0.55,
    0.54,
    0.64,
    -0.67,
    0.13,
    0.73,
    -0.61,
    0.54,
    0.57,
    -0.26,
    0.07,
    0.96,
    -0.15,
    0.62,
    0.77,
    -0.85,
    0.52,
    -0.07,
    -0.61,
    0.54,
    0.57,
    -0.21,
    0.94,
    -0.28,
    -0.15,
    0.62,
    0.77,
    -0.02,
    0.92,
    0.39,
    -0.97,
    -0.16,
    0.17,
    -0.85,
    0.52,
    -0.07,
    -0.75,
    -0.27,
    -0.61,
    -0.69,
    0.08,
    -0.72,
    -0.97,
    -0.16,
    0.17,
    -0.75,
    -0.27,
    -0.61,
    -0.55,
    -0.54,
    -0.63,
    -0.53,
    -0.79,
    0.32,
    -0.43,
    -0.82,
    -0.38,
    -0.53,
    -0.79,
    0.32,
    -0.43,
    -0.82,
    -0.38,
    0.03,
    -0.92,
    -0.39,
    0.21,
    -0.93,
    0.28,
    -0.55,
    -0.54,
    -0.63,
    -0.43,
    -0.82,
    -0.38,
    0.03,
    -0.92,
    -0.39,
    0.15,
    -0.62,
    -0.77,
    -0.85,
    0.52,
    -0.07,
    -0.69,
    0.08,
    -0.72,
    -0.42,
    0.21,
    -0.89,
    -0.21,
    0.94,
    -0.28,
    -0.17,
    0.52,
    -0.84,
    0.68,
    -0.06,
    0.73,
    0.74,
    0.27,
    0.61,
    0.85,
    -0.52,
    0.07,
    0.97,
    0.16,
    -0.16,
    0.16,
    -0.52,
    0.84,
    0.21,
    -0.93,
    0.28,
    0.41,
    -0.18,
    0.89,
    0.68,
    -0.06,
    0.73,
    0.85,
    -0.52,
    0.07,
    -0.53,
    -0.79,
    0.32,
    -0.26,
    -0.45,
    0.85,
    0.16,
    -0.52,
    0.84,
    0.21,
    -0.93,
    0.28,
    -0.26,
    -0.45,
    0.85,
    -0.26,
    0.07,
    0.96,
    0.16,
    -0.52,
    0.84,
    0.41,
    -0.18,
    0.89,
    -0.26,
    0.07,
    0.96,
    -0.15,
    0.62,
    0.77,
    0.41,
    -0.18,
    0.89,
    0.55,
    0.54,
    0.64,
    0.68,
    -0.06,
    0.73,
    0.74,
    0.27,
    0.61,
    -0.21,
    0.94,
    -0.28,
    -0.02,
    0.92,
    0.39,
    0.41,
    0.84,
    0.36,
    0.53,
    0.79,
    -0.32,
    0.41,
    0.84,
    0.36,
    0.53,
    0.79,
    -0.32,
    0.55,
    0.54,
    0.64,
    0.74,
    0.27,
    0.61,
    0.97,
    0.16,
    -0.16,
    0.15,
    -0.62,
    -0.77,
    0.26,
    -0.06,
    -0.96,
    0.61,
    -0.55,
    -0.57,
    0.67,
    -0.13,
    -0.73,
    0.03,
    -0.92,
    -0.39,
    0.15,
    -0.62,
    -0.77,
    0.21,
    -0.93,
    0.28,
    0.61,
    -0.55,
    -0.57,
    0.85,
    -0.52,
    0.07,
    0.61,
    -0.55,
    -0.57,
    0.67,
    -0.13,
    -0.73,
    0.85,
    -0.52,
    0.07,
    0.97,
    0.16,
    -0.16,
    -0.75,
    -0.27,
    -0.61,
    -0.69,
    0.08,
    -0.72,
    -0.55,
    -0.54,
    -0.63,
    -0.42,
    0.21,
    -0.89,
    0.15,
    -0.62,
    -0.77,
    0.26,
    -0.06,
    -0.96,
    0.26,
    -0.06,
    -0.96,
    0.28,
    0.42,
    -0.86,
    0.53,
    0.79,
    -0.32,
    0.67,
    -0.13,
    -0.73,
    0.97,
    0.16,
    -0.16,
    -0.21,
    0.94,
    -0.28,
    -0.17,
    0.52,
    -0.84,
    0.28,
    0.42,
    -0.86,
    0.53,
    0.79,
    -0.32,
    -0.42,
    0.21,
    -0.89,
    -0.17,
    0.52,
    -0.84,
    0.26,
    -0.06,
    -0.96,
    0.28,
    0.42,
    -0.86,
    0.4,
    -0.7,
    0.58,
    0.49,
    -0.84,
    0.23,
    0.61,
    -0.21,
    0.76,
    0.76,
    -0.63,
    0.14,
    -0.29,
    -0.37,
    0.88,
    -0.25,
    -0.68,
    0.69,
    0.34,
    0.09,
    0.94,
    0.4,
    -0.7,
    0.58,
    0.61,
    -0.21,
    0.76,
    -0.4,
    -0.86,
    0.33,
    -0.25,
    -0.68,
    0.69,
    0.4,
    -0.7,
    0.58,
    0.49,
    -0.84,
    0.23,
    -0.99,
    -0.08,
    0.14,
    -0.81,
    0.45,
    0.37,
    -0.75,
    0.64,
    -0.14,
    -0.71,
    0.67,
    0.2,
    -0.87,
    -0.42,
    0.24,
    -0.51,
    -0.17,
    0.84,
    -0.4,
    -0.86,
    0.33,
    -0.29,
    -0.37,
    0.88,
    -0.25,
    -0.68,
    0.69,
    -0.81,
    0.45,
    0.37,
    -0.71,
    0.67,
    0.2,
    -0.45,
    0.23,
    0.86,
    -0.43,
    0.74,
    0.51,
    -0.12,
    0.52,
    0.85,
    -0.51,
    -0.17,
    0.84,
    -0.45,
    0.23,
    0.86,
    -0.29,
    -0.37,
    0.88,
    -0.12,
    0.52,
    0.85,
    0.34,
    0.09,
    0.94,
    -0.99,
    -0.08,
    0.14,
    -0.87,
    -0.42,
    0.24,
    -0.81,
    0.45,
    0.37,
    -0.51,
    -0.17,
    0.84,
    -0.45,
    0.23,
    0.86,
    -0.87,
    -0.42,
    0.24,
    -0.63,
    -0.62,
    -0.47,
    -0.43,
    -0.8,
    -0.43,
    -0.4,
    -0.86,
    0.33,
    -0.35,
    -0.92,
    -0.17,
    -0.4,
    -0.86,
    0.33,
    -0.35,
    -0.92,
    -0.17,
    0.33,
    -0.91,
    -0.25,
    0.49,
    -0.84,
    0.23,
    0.33,
    -0.91,
    -0.25,
    0.4,
    -0.74,
    -0.54,
    0.49,
    -0.84,
    0.23,
    0.72,
    -0.66,
    -0.19,
    0.76,
    -0.63,
    0.14,
    -0.43,
    -0.8,
    -0.43,
    -0.35,
    -0.92,
    -0.17,
    0.12,
    -0.51,
    -0.85,
    0.33,
    -0.91,
    -0.25,
    0.4,
    -0.74,
    -0.54,
    -0.63,
    -0.62,
    -0.47,
    -0.62,
    -0.32,
    -0.72,
    -0.43,
    -0.8,
    -0.43,
    -0.32,
    -0.1,
    -0.94,
    0.12,
    -0.51,
    -0.85,
    -0.91,
    0.15,
    -0.38,
    -0.8,
    0.45,
    -0.41,
    -0.62,
    -0.32,
    -0.72,
    -0.56,
    0.27,
    -0.78,
    -0.32,
    -0.1,
    -0.94,
    -0.99,
    -0.08,
    0.14,
    -0.91,
    0.15,
    -0.38,
    -0.8,
    0.45,
    -0.41,
    -0.75,
    0.64,
    -0.14,
    -0.99,
    -0.08,
    0.14,
    -0.91,
    0.15,
    -0.38,
    -0.87,
    -0.42,
    0.24,
    -0.63,
    -0.62,
    -0.47,
    -0.62,
    -0.32,
    -0.72,
    0.33,
    0.94,
    0.09,
    0.41,
    0.81,
    0.42,
    0.42,
    0.84,
    -0.34,
    0.63,
    0.62,
    0.48,
    0.83,
    0.48,
    -0.27,
    0.85,
    0.48,
    0.2,
    0.61,
    -0.21,
    0.76,
    0.76,
    -0.63,
    0.14,
    0.97,
    0.16,
    0.19,
    0.99,
    -0.01,
    -0.11,
    0.83,
    0.48,
    -0.27,
    0.85,
    0.48,
    0.2,
    0.97,
    0.16,
    0.19,
    0.99,
    -0.01,
    -0.11,
    0.34,
    0.09,
    0.94,
    0.61,
    -0.21,
    0.76,
    0.63,
    0.62,
    0.48,
    0.85,
    0.48,
    0.2,
    0.97,
    0.16,
    0.19,
    -0.12,
    0.52,
    0.85,
    0.34,
    0.09,
    0.94,
    0.41,
    0.81,
    0.42,
    0.63,
    0.62,
    0.48,
    -0.75,
    0.64,
    -0.14,
    -0.71,
    0.67,
    0.2,
    -0.49,
    0.84,
    -0.23,
    -0.43,
    0.74,
    0.51,
    -0.31,
    0.95,
    0.07,
    -0.43,
    0.74,
    0.51,
    -0.31,
    0.95,
    0.07,
    -0.12,
    0.52,
    0.85,
    0.33,
    0.94,
    0.09,
    0.41,
    0.81,
    0.42,
    -0.49,
    0.84,
    -0.23,
    -0.31,
    0.95,
    0.07,
    0.33,
    0.94,
    0.09,
    0.42,
    0.84,
    -0.34,
    -0.32,
    -0.1,
    -0.94,
    0.12,
    -0.51,
    -0.85,
    0.28,
    0.34,
    -0.9,
    0.44,
    -0.23,
    -0.87,
    0.49,
    0.15,
    -0.86,
    0.12,
    -0.51,
    -0.85,
    0.4,
    -0.74,
    -0.54,
    0.44,
    -0.23,
    -0.87,
    0.72,
    -0.66,
    -0.19,
    0.82,
    -0.43,
    -0.37,
    0.72,
    -0.66,
    -0.19,
    0.76,
    -0.63,
    0.14,
    0.82,
    -0.43,
    -0.37,
    0.99,
    -0.01,
    -0.11,
    0.44,
    -0.23,
    -0.87,
    0.49,
    0.15,
    -0.86,
    0.82,
    -0.43,
    -0.37,
    0.83,
    0.48,
    -0.27,
    0.99,
    -0.01,
    -0.11,
    0.23,
    0.69,
    -0.69,
    0.28,
    0.34,
    -0.9,
    0.42,
    0.84,
    -0.34,
    0.49,
    0.15,
    -0.86,
    0.83,
    0.48,
    -0.27,
    -0.49,
    0.84,
    -0.23,
    -0.4,
    0.7,
    -0.59,
    0.23,
    0.69,
    -0.69,
    0.42,
    0.84,
    -0.34,
    -0.8,
    0.45,
    -0.41,
    -0.75,
    0.64,
    -0.14,
    -0.56,
    0.27,
    -0.78,
    -0.49,
    0.84,
    -0.23,
    -0.4,
    0.7,
    -0.59,
    -0.56,
    0.27,
    -0.78,
    -0.4,
    0.7,
    -0.59,
    -0.32,
    -0.1,
    -0.94,
    0.23,
    0.69,
    -0.69,
    0.28,
    0.34,
    -0.9
  ]);
  var texcoord_arr3 = Float32Array.from([
    0.18,
    0.27,
    0.18,
    0.27,
    0.18,
    0.27,
    0.18,
    0.27,
    0.43,
    0.07,
    0.2,
    0.25,
    0.2,
    0.25,
    0.43,
    0.07,
    0.43,
    0.07,
    0.43,
    0.98,
    0.13,
    0.29,
    0.43,
    0.98,
    0.42,
    0.04,
    0.14,
    0.26,
    0.57,
    0.07,
    0.57,
    0.07,
    0.57,
    0.07,
    0.57,
    0.07,
    0.57,
    0.07,
    0.57,
    0.07,
    0.54,
    0.98,
    0.54,
    0.98,
    0.54,
    0.98,
    0.54,
    0.98,
    0.5,
    1,
    0.5,
    1,
    0.5,
    0.04,
    0.5,
    0.04,
    0.5,
    0.04,
    0.8,
    0.27,
    0.63,
    0.07,
    0.8,
    0.27,
    0.63,
    0.07,
    0.8,
    0.27,
    0.59,
    0.98,
    0.59,
    0.98,
    0.59,
    0.98,
    0.6,
    0.04,
    0.84,
    0.27,
    0.6,
    0.04,
    0.18,
    0.47,
    0.2,
    0.5,
    0.18,
    0.47,
    0.18,
    0.47,
    0.43,
    0.76,
    0.43,
    0.76,
    0.15,
    0.48,
    0.17,
    0.49,
    0.45,
    0.69,
    0.2,
    0.49,
    0.2,
    0.5,
    0.45,
    0.69,
    0.54,
    0.7,
    0.54,
    0.7,
    0.54,
    0.7,
    0.54,
    0.7,
    0.59,
    0.71,
    0.59,
    0.77,
    0.59,
    0.71,
    0.82,
    0.48,
    0.59,
    0.71,
    0.63,
    0.79,
    0.63,
    0.79,
    0.82,
    0.46,
    0.82,
    0.46,
    0.82,
    0.46,
    0.56,
    0.78,
    0.56,
    0.78,
    0.56,
    0.78,
    0.54,
    0.75,
    0.56,
    0.78,
    0.56,
    0.78,
    0.31,
    0.28,
    0.31,
    0.28,
    0.31,
    0.28,
    0.3,
    0.25,
    0.31,
    0.28,
    0.33,
    0.25,
    0.43,
    0.27,
    0.43,
    0.27,
    0.43,
    0.27,
    0.43,
    0.27,
    0.3,
    0.25,
    0.44,
    0.2,
    0.32,
    0.26,
    0.44,
    0.2,
    0.54,
    0.2,
    0.54,
    0.2,
    0.54,
    0.2,
    0.54,
    0.2,
    0.59,
    0.2,
    0.68,
    0.27,
    0.59,
    0.2,
    0.61,
    0.27,
    0.59,
    0.2,
    0.68,
    0.29,
    0.68,
    0.29,
    0.63,
    0.29,
    0.68,
    0.29,
    0.55,
    0.28,
    0.55,
    0.28,
    0.54,
    0.25,
    0.55,
    0.28,
    0.55,
    0.28,
    0.3,
    0.48,
    0.3,
    0.48,
    0.3,
    0.48,
    0.3,
    0.48,
    0.37,
    0.48,
    0.37,
    0.48,
    0.42,
    0.52,
    0.37,
    0.48,
    0.4,
    0.48,
    0.3,
    0.5,
    0.44,
    0.56,
    0.3,
    0.5,
    0.44,
    0.56,
    0.44,
    0.56,
    0.44,
    0.56,
    0.46,
    0.48,
    0.46,
    0.5,
    0.46,
    0.48,
    0.46,
    0.48,
    0.46,
    0.48,
    0.57,
    0.57,
    0.57,
    0.57,
    0.57,
    0.57,
    0.57,
    0.57,
    0.57,
    0.57,
    0.68,
    0.47,
    0.63,
    0.57,
    0.68,
    0.47,
    0.63,
    0.57,
    0.68,
    0.47,
    0.68,
    0.47,
    0.63,
    0.46,
    0.57,
    0.46,
    0.57,
    0.46,
    0.57,
    0.46,
    0.59,
    0.53,
    0.59,
    0.53,
    0.59,
    0.53,
    0.65,
    0.48,
    0.59,
    0.53,
    0.51,
    0.02,
    0.5,
    0,
    0.51,
    0.02,
    0.51,
    0.02,
    0.51,
    0.02,
    0.14,
    0.26,
    0.14,
    0.26,
    0.14,
    0.26,
    0.14,
    0.26,
    0.44,
    0.99,
    0.13,
    0.27,
    0.44,
    0.01,
    0.13,
    0.25,
    0.44,
    0.01,
    0.86,
    0.27,
    0.86,
    0.27,
    0.86,
    0.27,
    0.86,
    0.27,
    0.87,
    0.26,
    0.59,
    0.01,
    0.59,
    0.01,
    0.87,
    0.26,
    0.52,
    0.99,
    0.52,
    0.99,
    0.5,
    0,
    0.88,
    0.27,
    0.88,
    0.27,
    0.5,
    0,
    0.14,
    0.48,
    0.14,
    0.48,
    0.14,
    0.48,
    0.14,
    0.48,
    0.5,
    0.76,
    0.5,
    0.76,
    0.5,
    0.76,
    0.52,
    0.75,
    0.43,
    0.76,
    0.13,
    0.49,
    0.43,
    0.76,
    0.13,
    0.49,
    0.43,
    0.74,
    0.14,
    0.49,
    0.43,
    0.73,
    0.14,
    0.49,
    0.14,
    0.5,
    0.43,
    0.73,
    0.48,
    0.75,
    0.5,
    0.74,
    0.5,
    0.74,
    0.5,
    0.74,
    0.5,
    0.74,
    0.5,
    0.74,
    0.6,
    0.73,
    0.86,
    0.49,
    0.6,
    0.73,
    0.6,
    0.73,
    0.86,
    0.49,
    0.86,
    0.48,
    0.86,
    0.48,
    0.86,
    0.48,
    0.86,
    0.48,
    0.57,
    0.76,
    0.57,
    0.74,
    0.87,
    0.49,
    0.57,
    0.74,
    0.86,
    0.49,
    0.36,
    0.27,
    0.36,
    0.27,
    0.36,
    0.27,
    0.36,
    0.27,
    0.36,
    0.27,
    0.52,
    0.26,
    0.5,
    0.25,
    0.52,
    0.26,
    0.52,
    0.26,
    0.52,
    0.26,
    0.52,
    0.26,
    0.37,
    0.26,
    0.44,
    0.24,
    0.44,
    0.26,
    0.44,
    0.26,
    0.44,
    0.26,
    0.36,
    0.26,
    0.36,
    0.26,
    0.44,
    0.23,
    0.36,
    0.26,
    0.44,
    0.23,
    0.5,
    0.24,
    0.5,
    0.24,
    0.5,
    0.24,
    0.5,
    0.25,
    0.5,
    0.24,
    0.63,
    0.23,
    0.64,
    0.26,
    0.64,
    0.26,
    0.63,
    0.26,
    0.64,
    0.26,
    0.56,
    0.24,
    0.56,
    0.24,
    0.56,
    0.24,
    0.56,
    0.26,
    0.36,
    0.49,
    0.36,
    0.49,
    0.36,
    0.49,
    0.36,
    0.49,
    0.36,
    0.49,
    0.5,
    0.51,
    0.5,
    0.51,
    0.5,
    0.51,
    0.52,
    0.5,
    0.36,
    0.5,
    0.43,
    0.51,
    0.36,
    0.5,
    0.43,
    0.51,
    0.42,
    0.49,
    0.4,
    0.48,
    0.4,
    0.48,
    0.4,
    0.48,
    0.4,
    0.48,
    0.4,
    0.48,
    0.48,
    0.5,
    0.5,
    0.49,
    0.5,
    0.49,
    0.5,
    0.49,
    0.5,
    0.49,
    0.5,
    0.49,
    0.63,
    0.52,
    0.62,
    0.48,
    0.62,
    0.48,
    0.62,
    0.48,
    0.62,
    0.48,
    0.62,
    0.48,
    0.58,
    0.51,
    0.58,
    0.51,
    0.57,
    0.49,
    0.57,
    0.49,
    0.2,
    0.27,
    0.2,
    0.27,
    0.2,
    0.27,
    0.2,
    0.27,
    0.43,
    0.08,
    0.2,
    0.25,
    0.2,
    0.25,
    0.43,
    0.08,
    0.43,
    0.08,
    0.17,
    0.26,
    0.42,
    0.99,
    0.17,
    0.26,
    0.42,
    0.04,
    0.17,
    0.26,
    0.44,
    0.98,
    0.13,
    0.28,
    0.44,
    0.98,
    0.44,
    1,
    0.56,
    0.08,
    0.56,
    0.08,
    0.56,
    0.08,
    0.56,
    0.08,
    0.56,
    0.08,
    0.53,
    0.98,
    0.53,
    0.98,
    0.53,
    0.98,
    0.53,
    0.98,
    0.5,
    1,
    0.5,
    1,
    0.47,
    1,
    0.5,
    0.04,
    0.5,
    0.04,
    0.5,
    0.04,
    0.59,
    0.98,
    0.59,
    0.98,
    0.59,
    0.98,
    0.59,
    0.03,
    0.83,
    0.27,
    0.59,
    0.03,
    0.8,
    0.27,
    0.63,
    0.08,
    0.8,
    0.27,
    0.63,
    0.08,
    0.19,
    0.47,
    0.19,
    0.47,
    0.19,
    0.47,
    0.19,
    0.47,
    0.19,
    0.47,
    0.44,
    0.77,
    0.44,
    0.77,
    0.13,
    0.48,
    0.13,
    0.48,
    0.43,
    0.7,
    0.17,
    0.49,
    0.43,
    0.7,
    0.2,
    0.5,
    0.63,
    0.78,
    0.63,
    0.78,
    0.81,
    0.47,
    0.63,
    0.67,
    0.81,
    0.47,
    0.56,
    0.7,
    0.63,
    0.77,
    0.56,
    0.7,
    0.56,
    0.7,
    0.56,
    0.77,
    0.56,
    0.77,
    0.56,
    0.77,
    0.56,
    0.77,
    0.56,
    0.77,
    0.3,
    0.25,
    0.44,
    0.17,
    0.3,
    0.25,
    0.44,
    0.17,
    0.31,
    0.28,
    0.31,
    0.28,
    0.3,
    0.25,
    0.31,
    0.28,
    0.31,
    0.28,
    0.44,
    0.28,
    0.38,
    0.28,
    0.44,
    0.28,
    0.44,
    0.28,
    0.33,
    0.25,
    0.43,
    0.21,
    0.35,
    0.27,
    0.43,
    0.21,
    0.69,
    0.27,
    0.63,
    0.17,
    0.61,
    0.17,
    0.69,
    0.27,
    0.56,
    0.19,
    0.56,
    0.19,
    0.56,
    0.19,
    0.63,
    0.19,
    0.56,
    0.19,
    0.57,
    0.23,
    0.58,
    0.27,
    0.58,
    0.27,
    0.58,
    0.27,
    0.44,
    0.47,
    0.44,
    0.47,
    0.44,
    0.47,
    0.44,
    0.47,
    0.44,
    0.47,
    0.31,
    0.47,
    0.31,
    0.47,
    0.31,
    0.47,
    0.38,
    0.47,
    0.31,
    0.47,
    0.35,
    0.49,
    0.43,
    0.53,
    0.43,
    0.53,
    0.41,
    0.48,
    0.41,
    0.48,
    0.43,
    0.58,
    0.3,
    0.5,
    0.3,
    0.5,
    0.43,
    0.58,
    0.5,
    0.48,
    0.5,
    0.48,
    0.5,
    0.48,
    0.5,
    0.48,
    0.56,
    0.58,
    0.56,
    0.58,
    0.56,
    0.58,
    0.56,
    0.58,
    0.63,
    0.58,
    0.69,
    0.47,
    0.63,
    0.58,
    0.69,
    0.47,
    0.69,
    0.47,
    0.63,
    0.47,
    0.56,
    0.47,
    0.56,
    0.47,
    0.56,
    0.47,
    0.56,
    0.47,
    0.6,
    0.54,
    0.6,
    0.54,
    0.6,
    0.54,
    0.65,
    0.48,
    0.57,
    0.49,
    0.47,
    1,
    0.47,
    1,
    0.47,
    0.05,
    0.47,
    0.05,
    0.19,
    0.27,
    0.13,
    0.28,
    0.19,
    0.27,
    0.19,
    0.27,
    0.14,
    0.27,
    0.42,
    1,
    0.16,
    0.26,
    0.42,
    0.05,
    0.45,
    0.98,
    0.13,
    0.28,
    0.14,
    0.28,
    0.47,
    1,
    0.45,
    0.98,
    0.53,
    1,
    0.53,
    1,
    0.55,
    0.06,
    0.55,
    0.06,
    0.63,
    0.97,
    0.58,
    0.99,
    0.82,
    0.27,
    0.61,
    0.04,
    0.56,
    0.98,
    0.56,
    0.98,
    0.56,
    0.98,
    0.56,
    0.98,
    0.18,
    0.47,
    0.18,
    0.47,
    0.18,
    0.47,
    0.18,
    0.47,
    0.18,
    0.47,
    0.43,
    0.76,
    0.15,
    0.49,
    0.43,
    0.76,
    0.15,
    0.49,
    0.43,
    0.78,
    0.43,
    0.78,
    0.13,
    0.47,
    0.13,
    0.47,
    0.44,
    0.68,
    0.2,
    0.49,
    0.44,
    0.68,
    0.2,
    0.49,
    0.44,
    0.68,
    0.2,
    0.49,
    0.56,
    0.78,
    0.56,
    0.78,
    0.56,
    0.78,
    0.56,
    0.78,
    0.63,
    0.78,
    0.63,
    0.78,
    0.61,
    0.67,
    0.63,
    0.67,
    0.82,
    0.48,
    0.58,
    0.76,
    0.58,
    0.76,
    0.58,
    0.76,
    0.58,
    0.76,
    0.6,
    0.72,
    0.56,
    0.67,
    0.63,
    0.67,
    0.56,
    0.67,
    0.56,
    0.67,
    0.47,
    0.27,
    0.47,
    0.27,
    0.47,
    0.27,
    0.47,
    0.27,
    0.33,
    0.25,
    0.36,
    0.27,
    0.36,
    0.27,
    0.4,
    0.27,
    0.4,
    0.27,
    0.3,
    0.27,
    0.3,
    0.27,
    0.3,
    0.25,
    0.3,
    0.27,
    0.3,
    0.25,
    0.44,
    0.19,
    0.44,
    0.19,
    0.3,
    0.25,
    0.44,
    0.19,
    0.47,
    0.25,
    0.68,
    0.27,
    0.63,
    0.17,
    0.62,
    0.28,
    0.68,
    0.27,
    0.56,
    0.2,
    0.56,
    0.2,
    0.63,
    0.27,
    0.56,
    0.2,
    0.56,
    0.27,
    0.56,
    0.27,
    0.56,
    0.27,
    0.56,
    0.27,
    0.34,
    0.48,
    0.34,
    0.48,
    0.34,
    0.48,
    0.34,
    0.48,
    0.34,
    0.48,
    0.42,
    0.5,
    0.39,
    0.48,
    0.44,
    0.47,
    0.44,
    0.47,
    0.44,
    0.47,
    0.44,
    0.47,
    0.44,
    0.47,
    0.44,
    0.56,
    0.32,
    0.5,
    0.44,
    0.56,
    0.44,
    0.56,
    0.5,
    0.49,
    0.5,
    0.49,
    0.47,
    0.5,
    0.5,
    0.49,
    0.5,
    0.49,
    0.63,
    0.58,
    0.69,
    0.48,
    0.63,
    0.58,
    0.69,
    0.48,
    0.61,
    0.54,
    0.57,
    0.48,
    0.57,
    0.48,
    0.57,
    0.48,
    0.57,
    0.48,
    0.55,
    0.56,
    0.55,
    0.56,
    0.55,
    0.56,
    0.55,
    0.56,
    0.53,
    0.5,
    0.47,
    1,
    0.13,
    0.27,
    0.17,
    0.26,
    0.44,
    0.05,
    0.44,
    0.05,
    0.44,
    0.05,
    0.19,
    0.29,
    0.13,
    0.29,
    0.19,
    0.29,
    0.19,
    0.29,
    0.19,
    0.29,
    0.45,
    0.97,
    0.45,
    0.97,
    0.13,
    0.29,
    0.45,
    0.97,
    0.14,
    0.29,
    0.56,
    0.09,
    0.56,
    0.09,
    0.56,
    0.09,
    0.56,
    0.09,
    0.56,
    0.09,
    0.56,
    0.09,
    0.57,
    0.99,
    0.63,
    0.96,
    0.59,
    0.03,
    0.83,
    0.27,
    0.59,
    0.03,
    0.78,
    0.28,
    0.63,
    0.09,
    0.78,
    0.28,
    0.63,
    0.09,
    0.53,
    0.99,
    0.53,
    0.99,
    0.53,
    0.99,
    0.53,
    0.05,
    0.53,
    0.05,
    0.56,
    0.96,
    0.56,
    0.96,
    0.56,
    0.96,
    0.56,
    0.96,
    0.56,
    0.96,
    0.19,
    0.46,
    0.19,
    0.46,
    0.19,
    0.46,
    0.19,
    0.46,
    0.51,
    0.77,
    0.51,
    0.77,
    0.51,
    0.77,
    0.51,
    0.77,
    0.53,
    0.75,
    0.44,
    0.79,
    0.44,
    0.79,
    0.13,
    0.46,
    0.13,
    0.46,
    0.43,
    0.77,
    0.17,
    0.48,
    0.43,
    0.77,
    0.17,
    0.48,
    0.43,
    0.69,
    0.17,
    0.48,
    0.47,
    0.75,
    0.5,
    0.69,
    0.5,
    0.69,
    0.5,
    0.69,
    0.5,
    0.69,
    0.5,
    0.69,
    0.6,
    0.66,
    0.78,
    0.48,
    0.6,
    0.66,
    0.78,
    0.48,
    0.6,
    0.66,
    0.63,
    0.79,
    0.81,
    0.46,
    0.81,
    0.46,
    0.81,
    0.46,
    0.81,
    0.46,
    0.59,
    0.77,
    0.58,
    0.72,
    0.59,
    0.77,
    0.58,
    0.72,
    0.83,
    0.48,
    0.31,
    0.29,
    0.31,
    0.29,
    0.31,
    0.29,
    0.31,
    0.29,
    0.31,
    0.29,
    0.5,
    0.28,
    0.53,
    0.25,
    0.5,
    0.28,
    0.5,
    0.28,
    0.35,
    0.27,
    0.43,
    0.2,
    0.43,
    0.26,
    0.43,
    0.26,
    0.43,
    0.26,
    0.25,
    0.26,
    0.25,
    0.26,
    0.42,
    0.12,
    0.25,
    0.26,
    0.42,
    0.12,
    0.5,
    0.19,
    0.5,
    0.19,
    0.5,
    0.19,
    0.5,
    0.19,
    0.47,
    0.25,
    0.5,
    0.19,
    0.7,
    0.28,
    0.63,
    0.16,
    0.7,
    0.28,
    0.57,
    0.21,
    0.57,
    0.21,
    0.57,
    0.21,
    0.61,
    0.27,
    0.61,
    0.27,
    0.28,
    0.48,
    0.28,
    0.48,
    0.28,
    0.48,
    0.28,
    0.48,
    0.28,
    0.48,
    0.5,
    0.55,
    0.5,
    0.55,
    0.5,
    0.55,
    0.5,
    0.55,
    0.53,
    0.5,
    0.44,
    0.59,
    0.28,
    0.5,
    0.44,
    0.59,
    0.44,
    0.59,
    0.28,
    0.5,
    0.44,
    0.59,
    0.35,
    0.48,
    0.35,
    0.48,
    0.43,
    0.54,
    0.43,
    0.54,
    0.38,
    0.47,
    0.38,
    0.47,
    0.47,
    0.5,
    0.5,
    0.48,
    0.5,
    0.48,
    0.5,
    0.48,
    0.56,
    0.59,
    0.56,
    0.59,
    0.56,
    0.59,
    0.56,
    0.59,
    0.56,
    0.59,
    0.56,
    0.59,
    0.69,
    0.47,
    0.63,
    0.56,
    0.69,
    0.47,
    0.63,
    0.56,
    0.69,
    0.47,
    0.57,
    0.55,
    0.57,
    0.55,
    0.57,
    0.48,
    0.57,
    0.48,
    0.57,
    0.48,
    0.5,
    0.08,
    0.5,
    0.08,
    0.5,
    0.08,
    0.5,
    0.08,
    0.14,
    0.27,
    0.43,
    0.99,
    0.16,
    0.26,
    0.16,
    0.26,
    0.18,
    0.29,
    0.13,
    0.29,
    0.18,
    0.29,
    0.18,
    0.29,
    0.18,
    0.29,
    0.47,
    0.99,
    0.47,
    1,
    0.45,
    0.06,
    0.21,
    0.25,
    0.45,
    0.06,
    0.45,
    0.97,
    0.45,
    0.97,
    0.13,
    0.29,
    0.14,
    0.29,
    0.47,
    1,
    0.45,
    0.97,
    0.56,
    1,
    0.56,
    0.05,
    0.56,
    0.05,
    0.56,
    0.05,
    0.56,
    0.05,
    0.63,
    0.96,
    0.63,
    0.08,
    0.81,
    0.28,
    0.63,
    0.08,
    0.56,
    0.97,
    0.56,
    0.97,
    0.56,
    0.97,
    0.56,
    0.97,
    0.6,
    0.02,
    0.5,
    0.78,
    0.5,
    0.78,
    0.5,
    0.78,
    0.5,
    0.78,
    0.5,
    0.78,
    0.53,
    0.75,
    0.5,
    0.78,
    0.42,
    0.79,
    0.42,
    0.79,
    0.15,
    0.46,
    0.15,
    0.46,
    0.15,
    0.46,
    0.21,
    0.47,
    0.21,
    0.47,
    0.21,
    0.47,
    0.21,
    0.47,
    0.21,
    0.47,
    0.43,
    0.76,
    0.43,
    0.76,
    0.15,
    0.48,
    0.21,
    0.5,
    0.43,
    0.69,
    0.47,
    0.75,
    0.47,
    0.69,
    0.47,
    0.69,
    0.47,
    0.69,
    0.63,
    0.79,
    0.61,
    0.67,
    0.63,
    0.67,
    0.81,
    0.47,
    0.56,
    0.69,
    0.56,
    0.69,
    0.63,
    0.69,
    0.56,
    0.69,
    0.56,
    0.69,
    0.59,
    0.78,
    0.59,
    0.73,
    0.59,
    0.78,
    0.59,
    0.73,
    0.3,
    0.28,
    0.3,
    0.28,
    0.3,
    0.28,
    0.29,
    0.25,
    0.3,
    0.28,
    0.33,
    0.25,
    0.44,
    0.28,
    0.44,
    0.28,
    0.44,
    0.28,
    0.29,
    0.25,
    0.44,
    0.19,
    0.44,
    0.19,
    0.32,
    0.26,
    0.44,
    0.19,
    0.68,
    0.28,
    0.63,
    0.17,
    0.68,
    0.28,
    0.6,
    0.19,
    0.68,
    0.28,
    0.55,
    0.18,
    0.55,
    0.18,
    0.55,
    0.18,
    0.63,
    0.17,
    0.55,
    0.18,
    0.6,
    0.23,
    0.56,
    0.28,
    0.56,
    0.28,
    0.56,
    0.28,
    0.56,
    0.28,
    0.49,
    0.55,
    0.49,
    0.55,
    0.49,
    0.55,
    0.49,
    0.55,
    0.53,
    0.5,
    0.49,
    0.55,
    0.32,
    0.49,
    0.43,
    0.55,
    0.32,
    0.49,
    0.43,
    0.55,
    0.39,
    0.48,
    0.32,
    0.46,
    0.32,
    0.46,
    0.38,
    0.46,
    0.32,
    0.46,
    0.47,
    0.5,
    0.45,
    0.47,
    0.45,
    0.47,
    0.45,
    0.47,
    0.45,
    0.47,
    0.53,
    0.47,
    0.53,
    0.47,
    0.53,
    0.47,
    0.53,
    0.47,
    0.56,
    0.58,
    0.56,
    0.58,
    0.56,
    0.58,
    0.56,
    0.58,
    0.61,
    0.54,
    0.61,
    0.54,
    0.59,
    0.48,
    0.59,
    0.48,
    0.59,
    0.48,
    0.59,
    0.48,
    0.63,
    0.58,
    0.71,
    0.48,
    0.63,
    0.58,
    0.71,
    0.48,
    0.25,
    0.28,
    0.25,
    0.28,
    0.25,
    0.28,
    0.25,
    0.28,
    0.25,
    0.28,
    0.25,
    0.28,
    0.42,
    0.97,
    0.15,
    0.27,
    0.43,
    0.99,
    0.15,
    0.27,
    0.15,
    0.27,
    0.47,
    0.99,
    0.47,
    1,
    0.21,
    0.25,
    0.21,
    0.25,
    0.45,
    0.07,
    0.45,
    0.07,
    0.53,
    1,
    0.53,
    1,
    0.55,
    0.07,
    0.55,
    0.07,
    0.55,
    0.07,
    0.63,
    0.96,
    0.63,
    0.09,
    0.81,
    0.28,
    0.63,
    0.09,
    0.49,
    0.98,
    0.49,
    0.98,
    0.47,
    1,
    0.49,
    0.98,
    0.49,
    0.98,
    0.57,
    0.97,
    0.57,
    0.97,
    0.57,
    0.97,
    0.59,
    0.03,
    0.19,
    0.47,
    0.19,
    0.5,
    0.19,
    0.47,
    0.19,
    0.47,
    0.19,
    0.47,
    0.44,
    0.77,
    0.44,
    0.77,
    0.44,
    0.77,
    0.14,
    0.48,
    0.44,
    0.77,
    0.17,
    0.49,
    0.43,
    0.7,
    0.21,
    0.49,
    0.42,
    0.62,
    0.25,
    0.5,
    0.42,
    0.62,
    0.25,
    0.5,
    0.42,
    0.62,
    0.47,
    0.69,
    0.47,
    0.69,
    0.47,
    0.69,
    0.47,
    0.69,
    0.47,
    0.69,
    0.56,
    0.79,
    0.56,
    0.79,
    0.56,
    0.79,
    0.56,
    0.79,
    0.63,
    0.78,
    0.63,
    0.78,
    0.57,
    0.7,
    0.63,
    0.66,
    0.82,
    0.47,
    0.55,
    0.75,
    0.55,
    0.75,
    0.55,
    0.75,
    0.55,
    0.75,
    0.55,
    0.75,
    0.47,
    0.28,
    0.47,
    0.28,
    0.47,
    0.28,
    0.47,
    0.28,
    0.47,
    0.28,
    0.37,
    0.29,
    0.37,
    0.29,
    0.37,
    0.29,
    0.37,
    0.29,
    0.37,
    0.29,
    0.29,
    0.25,
    0.42,
    0.19,
    0.35,
    0.27,
    0.43,
    0.26,
    0.43,
    0.26,
    0.49,
    0.2,
    0.49,
    0.2,
    0.49,
    0.2,
    0.47,
    0.25,
    0.49,
    0.2,
    0.49,
    0.2,
    0.7,
    0.28,
    0.63,
    0.16,
    0.61,
    0.16,
    0.7,
    0.28,
    0.7,
    0.28,
    0.63,
    0.29,
    0.62,
    0.2,
    0.57,
    0.23,
    0.57,
    0.23,
    0.59,
    0.27,
    0.56,
    0.16,
    0.56,
    0.16,
    0.63,
    0.16,
    0.56,
    0.16,
    0.53,
    0.25,
    0.55,
    0.28,
    0.55,
    0.28,
    0.55,
    0.28,
    0.55,
    0.28,
    0.55,
    0.28,
    0.29,
    0.47,
    0.29,
    0.47,
    0.29,
    0.47,
    0.29,
    0.47,
    0.47,
    0.56,
    0.47,
    0.56,
    0.47,
    0.56,
    0.47,
    0.56,
    0.47,
    0.56,
    0.47,
    0.56,
    0.33,
    0.48,
    0.43,
    0.55,
    0.33,
    0.48,
    0.43,
    0.55,
    0.33,
    0.48,
    0.44,
    0.5,
    0.44,
    0.47,
    0.44,
    0.47,
    0.44,
    0.47,
    0.44,
    0.47,
    0.53,
    0.47,
    0.53,
    0.47,
    0.53,
    0.47,
    0.53,
    0.47,
    0.56,
    0.63,
    0.56,
    0.63,
    0.56,
    0.63,
    0.56,
    0.63,
    0.56,
    0.63,
    0.56,
    0.63,
    0.63,
    0.46,
    0.63,
    0.46,
    0.63,
    0.46,
    0.63,
    0.46,
    0.63,
    0.46,
    0.63,
    0.59,
    0.71,
    0.47,
    0.63,
    0.59,
    0.71,
    0.47,
    0.71,
    0.47,
    0.59,
    0.55,
    0.59,
    0.55,
    0.65,
    0.48,
    0.59,
    0.55,
    0.57,
    0.49,
    0.5,
    1,
    0.48,
    0.99,
    0.5,
    0.06,
    0.5,
    0.06,
    0.5,
    0.06,
    0.37,
    0.97,
    0.18,
    0.28,
    0.18,
    0.28,
    0.18,
    0.28,
    0.18,
    0.28,
    0.43,
    0.97,
    0.43,
    0.99,
    0.43,
    0.97,
    0.43,
    0.04,
    0.15,
    0.26,
    0.5,
    0.97,
    0.5,
    0.97,
    0.5,
    0.97,
    0.48,
    1,
    0.57,
    0.98,
    0.57,
    0.98,
    0.59,
    0.03,
    0.57,
    0.98,
    0.59,
    0.03,
    0.63,
    0.96,
    0.81,
    0.28,
    0.81,
    0.28,
    0.81,
    0.28,
    0.63,
    0.08,
    0.5,
    0.78,
    0.5,
    0.78,
    0.52,
    0.75,
    0.5,
    0.78,
    0.5,
    0.78,
    0.5,
    0.78,
    0.4,
    0.79,
    0.4,
    0.79,
    0.4,
    0.79,
    0.17,
    0.46,
    0.17,
    0.46,
    0.42,
    0.76,
    0.42,
    0.76,
    0.43,
    0.7,
    0.21,
    0.5,
    0.17,
    0.48,
    0.5,
    0.7,
    0.48,
    0.75,
    0.5,
    0.7,
    0.5,
    0.7,
    0.79,
    0.47,
    0.79,
    0.47,
    0.79,
    0.47,
    0.63,
    0.67,
    0.83,
    0.48,
    0.61,
    0.77,
    0.57,
    0.71,
    0.57,
    0.71,
    0.57,
    0.71,
    0.6,
    0.79,
    0.83,
    0.46,
    0.6,
    0.79,
    0.83,
    0.46,
    0.6,
    0.79,
    0.5,
    0.28,
    0.52,
    0.25,
    0.5,
    0.28,
    0.5,
    0.28,
    0.32,
    0.28,
    0.32,
    0.28,
    0.32,
    0.25,
    0.32,
    0.28,
    0.32,
    0.28,
    0.43,
    0.21,
    0.43,
    0.27,
    0.33,
    0.26,
    0.43,
    0.27,
    0.43,
    0.27,
    0.43,
    0.13,
    0.43,
    0.13,
    0.25,
    0.25,
    0.25,
    0.25,
    0.43,
    0.13,
    0.29,
    0.26,
    0.5,
    0.2,
    0.5,
    0.2,
    0.5,
    0.2,
    0.5,
    0.2,
    0.5,
    0.2,
    0.48,
    0.25,
    0.71,
    0.27,
    0.6,
    0.17,
    0.71,
    0.27,
    0.6,
    0.17,
    0.6,
    0.17,
    0.68,
    0.29,
    0.68,
    0.29,
    0.68,
    0.29,
    0.68,
    0.29,
    0.67,
    0.27,
    0.58,
    0.28,
    0.57,
    0.23,
    0.58,
    0.28,
    0.57,
    0.23,
    0.25,
    0.47,
    0.25,
    0.47,
    0.25,
    0.47,
    0.25,
    0.47,
    0.25,
    0.47,
    0.25,
    0.47,
    0.5,
    0.55,
    0.5,
    0.55,
    0.5,
    0.55,
    0.52,
    0.5,
    0.5,
    0.55,
    0.43,
    0.53,
    0.34,
    0.49,
    0.43,
    0.53,
    0.4,
    0.48,
    0.34,
    0.49,
    0.38,
    0.46,
    0.38,
    0.46,
    0.38,
    0.46,
    0.38,
    0.46,
    0.38,
    0.46,
    0.5,
    0.47,
    0.5,
    0.47,
    0.48,
    0.5,
    0.5,
    0.47,
    0.5,
    0.47,
    0.68,
    0.47,
    0.63,
    0.56,
    0.63,
    0.56,
    0.68,
    0.47,
    0.57,
    0.54,
    0.57,
    0.54,
    0.57,
    0.48,
    0.57,
    0.48,
    0.57,
    0.48,
    0.57,
    0.58,
    0.57,
    0.58,
    0.57,
    0.58,
    0.57,
    0.58,
    0.42,
    0.97,
    0.15,
    0.28,
    0.42,
    1,
    0.15,
    0.28,
    0.42,
    0.05,
    0.15,
    0.28,
    0.57,
    0.13,
    0.57,
    0.13,
    0.57,
    0.13,
    0.57,
    0.13,
    0.63,
    0.15,
    0.57,
    0.13,
    0.58,
    0.98,
    0.58,
    0.98,
    0.63,
    0.96,
    0.59,
    0.03,
    0.82,
    0.28,
    0.59,
    0.03,
    0.82,
    0.28,
    0.82,
    0.28,
    0.47,
    0.99,
    0.5,
    1,
    0.5,
    0.05,
    0.5,
    0.05,
    0.5,
    0.05,
    0.63,
    0.12,
    0.75,
    0.27,
    0.61,
    0.15,
    0.75,
    0.27,
    0.49,
    0.98,
    0.49,
    0.98,
    0.49,
    0.98,
    0.47,
    1,
    0.49,
    0.98,
    0.56,
    0.96,
    0.56,
    0.96,
    0.56,
    0.96,
    0.43,
    0.63,
    0.22,
    0.49,
    0.43,
    0.63,
    0.25,
    0.5,
    0.43,
    0.63,
    0.43,
    0.63,
    0.5,
    0.77,
    0.5,
    0.77,
    0.5,
    0.77,
    0.5,
    0.77,
    0.53,
    0.75,
    0.44,
    0.79,
    0.44,
    0.79,
    0.44,
    0.79,
    0.44,
    0.79,
    0.13,
    0.46,
    0.42,
    0.76,
    0.17,
    0.48,
    0.42,
    0.76,
    0.17,
    0.48,
    0.42,
    0.7,
    0.18,
    0.49,
    0.47,
    0.75,
    0.5,
    0.7,
    0.5,
    0.7,
    0.5,
    0.7,
    0.5,
    0.7,
    0.56,
    0.79,
    0.56,
    0.79,
    0.56,
    0.79,
    0.56,
    0.79,
    0.6,
    0.78,
    0.58,
    0.72,
    0.6,
    0.78,
    0.58,
    0.72,
    0.82,
    0.47,
    0.6,
    0.72,
    0.47,
    0.28,
    0.47,
    0.28,
    0.47,
    0.28,
    0.47,
    0.28,
    0.44,
    0.13,
    0.25,
    0.25,
    0.44,
    0.13,
    0.28,
    0.26,
    0.44,
    0.13,
    0.44,
    0.13,
    0.32,
    0.26,
    0.35,
    0.27,
    0.42,
    0.2,
    0.4,
    0.27,
    0.4,
    0.27,
    0.4,
    0.27,
    0.25,
    0.28,
    0.25,
    0.28,
    0.28,
    0.25,
    0.25,
    0.28,
    0.5,
    0.2,
    0.5,
    0.2,
    0.5,
    0.2,
    0.47,
    0.25,
    0.5,
    0.2,
    0.69,
    0.29,
    0.69,
    0.29,
    0.69,
    0.29,
    0.69,
    0.29,
    0.69,
    0.29,
    0.62,
    0.2,
    0.55,
    0.24,
    0.68,
    0.27,
    0.57,
    0.28,
    0.57,
    0.28,
    0.57,
    0.28,
    0.25,
    0.47,
    0.22,
    0.5,
    0.25,
    0.47,
    0.25,
    0.47,
    0.44,
    0.46,
    0.44,
    0.46,
    0.44,
    0.46,
    0.44,
    0.46,
    0.44,
    0.46,
    0.34,
    0.48,
    0.34,
    0.48,
    0.42,
    0.53,
    0.34,
    0.48,
    0.42,
    0.53,
    0.4,
    0.47,
    0.5,
    0.55,
    0.5,
    0.55,
    0.5,
    0.55,
    0.5,
    0.55,
    0.53,
    0.5,
    0.47,
    0.5,
    0.5,
    0.48,
    0.5,
    0.48,
    0.5,
    0.48,
    0.5,
    0.48,
    0.56,
    0.63,
    0.56,
    0.63,
    0.63,
    0.65,
    0.56,
    0.63,
    0.56,
    0.63,
    0.56,
    0.63,
    0.75,
    0.47,
    0.61,
    0.65,
    0.75,
    0.47,
    0.63,
    0.62,
    0.75,
    0.47,
    0.56,
    0.46,
    0.56,
    0.46,
    0.56,
    0.46,
    0.56,
    0.46,
    0.6,
    0.55,
    0.6,
    0.55,
    0.67,
    0.47,
    0.58,
    0.49,
    0.67,
    0.47,
    0.58,
    0.49,
    0.43,
    0.96,
    0.43,
    0.99,
    0.16,
    0.28,
    0.16,
    0.28,
    0.43,
    0.06,
    0.5,
    0.96,
    0.5,
    0.96,
    0.48,
    1,
    0.5,
    0.96,
    0.57,
    0.13,
    0.57,
    0.13,
    0.63,
    0.14,
    0.57,
    0.13,
    0.48,
    0.99,
    0.5,
    1,
    0.5,
    0.06,
    0.5,
    0.06,
    0.57,
    0.99,
    0.57,
    0.99,
    0.81,
    0.29,
    0.6,
    0.06,
    0.6,
    0.06,
    0.5,
    0.79,
    0.5,
    0.79,
    0.5,
    0.79,
    0.52,
    0.75,
    0.43,
    0.78,
    0.43,
    0.78,
    0.43,
    0.69,
    0.15,
    0.46,
    0.19,
    0.5,
    0.25,
    0.46,
    0.24,
    0.5,
    0.25,
    0.46,
    0.25,
    0.46,
    0.43,
    0.63,
    0.24,
    0.49,
    0.25,
    0.5,
    0.43,
    0.63,
    0.61,
    0.79,
    0.57,
    0.7,
    0.57,
    0.7,
    0.81,
    0.46,
    0.61,
    0.69,
    0.5,
    0.29,
    0.52,
    0.25,
    0.5,
    0.29,
    0.5,
    0.29,
    0.31,
    0.26,
    0.4,
    0.28,
    0.43,
    0.19,
    0.4,
    0.28,
    0.4,
    0.28,
    0.25,
    0.29,
    0.25,
    0.29,
    0.26,
    0.25,
    0.25,
    0.29,
    0.25,
    0.25,
    0.43,
    0.13,
    0.26,
    0.26,
    0.43,
    0.13,
    0.5,
    0.15,
    0.5,
    0.15,
    0.5,
    0.15,
    0.5,
    0.15,
    0.48,
    0.25,
    0.5,
    0.15,
    0.75,
    0.29,
    0.63,
    0.12,
    0.61,
    0.14,
    0.75,
    0.29,
    0.6,
    0.21,
    0.6,
    0.29,
    0.57,
    0.22,
    0.57,
    0.22,
    0.6,
    0.29,
    0.5,
    0.56,
    0.5,
    0.56,
    0.5,
    0.56,
    0.52,
    0.5,
    0.35,
    0.47,
    0.43,
    0.55,
    0.35,
    0.47,
    0.43,
    0.55,
    0.38,
    0.46,
    0.48,
    0.5,
    0.5,
    0.46,
    0.5,
    0.46,
    0.5,
    0.46,
    0.48,
    0.75,
    0.5,
    0.66,
    0.5,
    0.66,
    0.5,
    0.66,
    0.5,
    0.66,
    0.5,
    0.66,
    0.61,
    0.56,
    0.61,
    0.56,
    0.65,
    0.46,
    0.6,
    0.47,
    0.6,
    0.47,
    0.75,
    0.46,
    0.61,
    0.64,
    0.63,
    0.62,
    0.75,
    0.46,
    0.57,
    0.63,
    0.63,
    0.64,
    0.57,
    0.63,
    0.57,
    0.63,
    0.2,
    0.28,
    0.2,
    0.28,
    0.2,
    0.28,
    0.2,
    0.28,
    0.43,
    0.99,
    0.39,
    0.98,
    0.43,
    0.05,
    0.18,
    0.26,
    0.18,
    0.26,
    0.4,
    0.95,
    0.4,
    0.95,
    0.17,
    0.3,
    0.17,
    0.3,
    0.82,
    0.3,
    0.82,
    0.3,
    0.82,
    0.3,
    0.82,
    0.3,
    0.5,
    0.97,
    0.5,
    0.97,
    0.5,
    0.97,
    0.48,
    1,
    0.5,
    0.97,
    0.8,
    0.26,
    0.8,
    0.26,
    0.57,
    0.08,
    0.8,
    0.26,
    0.57,
    0.08,
    0.5,
    1,
    0.5,
    0.05,
    0.48,
    0.99,
    0.5,
    0.05,
    0.5,
    0.05,
    0.85,
    0.28,
    0.57,
    0.99,
    0.85,
    0.28,
    0.57,
    0.99,
    0.57,
    0.04,
    0.5,
    0.78,
    0.52,
    0.75,
    0.5,
    0.78,
    0.5,
    0.78,
    0.5,
    0.78,
    0.39,
    0.8,
    0.39,
    0.8,
    0.38,
    0.71,
    0.17,
    0.47,
    0.38,
    0.67,
    0.38,
    0.67,
    0.2,
    0.47,
    0.2,
    0.47,
    0.2,
    0.47,
    0.43,
    0.76,
    0.43,
    0.76,
    0.43,
    0.7,
    0.43,
    0.7,
    0.43,
    0.7,
    0.5,
    0.7,
    0.5,
    0.7,
    0.48,
    0.75,
    0.5,
    0.7,
    0.5,
    0.7,
    0.8,
    0.49,
    0.8,
    0.49,
    0.57,
    0.67,
    0.8,
    0.49,
    0.57,
    0.67,
    0.82,
    0.45,
    0.82,
    0.45,
    0.82,
    0.45,
    0.82,
    0.45,
    0.88,
    0.45,
    0.85,
    0.48,
    0.57,
    0.78,
    0.57,
    0.74,
    0.57,
    0.74,
    0.5,
    0.28,
    0.52,
    0.25,
    0.5,
    0.28,
    0.5,
    0.28,
    0.5,
    0.28,
    0.5,
    0.28,
    0.32,
    0.28,
    0.32,
    0.28,
    0.32,
    0.28,
    0.32,
    0.28,
    0.43,
    0.3,
    0.43,
    0.3,
    0.38,
    0.3,
    0.43,
    0.3,
    0.43,
    0.2,
    0.3,
    0.25,
    0.43,
    0.26,
    0.43,
    0.26,
    0.35,
    0.26,
    0.5,
    0.2,
    0.5,
    0.2,
    0.5,
    0.2,
    0.48,
    0.25,
    0.7,
    0.28,
    0.7,
    0.28,
    0.7,
    0.28,
    0.7,
    0.28,
    0.7,
    0.28,
    0.67,
    0.26,
    0.67,
    0.26,
    0.57,
    0.21,
    0.61,
    0.27,
    0.57,
    0.21,
    0.61,
    0.3,
    0.61,
    0.3,
    0.61,
    0.3,
    0.61,
    0.3,
    0.5,
    0.55,
    0.5,
    0.55,
    0.52,
    0.5,
    0.5,
    0.55,
    0.5,
    0.55,
    0.4,
    0.58,
    0.4,
    0.58,
    0.4,
    0.58,
    0.3,
    0.48,
    0.3,
    0.48,
    0.32,
    0.45,
    0.32,
    0.45,
    0.32,
    0.45,
    0.32,
    0.45,
    0.42,
    0.53,
    0.42,
    0.53,
    0.33,
    0.48,
    0.41,
    0.47,
    0.41,
    0.47,
    0.5,
    0.47,
    0.5,
    0.47,
    0.5,
    0.47,
    0.48,
    0.5,
    0.5,
    0.47,
    0.62,
    0.45,
    0.62,
    0.45,
    0.65,
    0.45,
    0.65,
    0.45,
    0.7,
    0.47,
    0.7,
    0.47,
    0.7,
    0.47,
    0.7,
    0.47,
    0.7,
    0.47,
    0.7,
    0.5,
    0.65,
    0.48,
    0.57,
    0.55,
    0.57,
    0.48,
    0.57,
    0.48
  ]);
  var weights_arr3 = Float32Array.from([]);
  var index_arr3 = Uint16Array.from([
    72,
    105,
    2,
    105,
    43,
    2,
    1441,
    1434,
    1517,
    1448,
    1444,
    1512,
    1444,
    1523,
    1512,
    1507,
    1424,
    1513,
    1424,
    1449,
    1513,
    1499,
    1420,
    1508,
    1420,
    1426,
    1508,
    1495,
    1529,
    1551,
    1529,
    1557,
    1551,
    1526,
    1518,
    1554,
    1518,
    1561,
    1554,
    1547,
    1503,
    1553,
    1503,
    1497,
    1553,
    1548,
    1543,
    1506,
    1543,
    1502,
    1506,
    1482,
    1563,
    1560,
    1530,
    1565,
    1477,
    1565,
    1483,
    1477,
    1536,
    1473,
    1465,
    1471,
    1535,
    1478,
    1535,
    1531,
    1478,
    1455,
    1490,
    1435,
    1490,
    1451,
    1435,
    1488,
    1484,
    1450,
    1484,
    1431,
    1450,
    1437,
    1427,
    1458,
    1427,
    1460,
    1458,
    1419,
    1466,
    1430,
    1466,
    1463,
    1430,
    1385,
    1409,
    1357,
    1409,
    1398,
    1357,
    1382,
    1380,
    1407,
    1380,
    1413,
    1407,
    1397,
    1394,
    1356,
    1394,
    1362,
    1356,
    1344,
    1366,
    1392,
    1366,
    1359,
    1392,
    1333,
    1349,
    1316,
    1349,
    1327,
    1316,
    1410,
    1377,
    1352,
    1377,
    1329,
    1352,
    1310,
    1336,
    1315,
    1336,
    1332,
    1315,
    1180,
    1172,
    1253,
    1363,
    1341,
    1312,
    1341,
    1339,
    1312,
    1241,
    1268,
    1276,
    1261,
    1257,
    1300,
    1257,
    1308,
    1300,
    1292,
    1195,
    1279,
    1218,
    1203,
    1197,
    1217,
    1193,
    1290,
    1274,
    1267,
    1239,
    1267,
    1247,
    1239,
    1226,
    1295,
    1170,
    1178,
    1161,
    1234,
    1202,
    1183,
    1154,
    1221,
    1224,
    1190,
    1224,
    1168,
    1190,
    1157,
    1244,
    1210,
    1244,
    1264,
    1210,
    1102,
    1033,
    1040,
    1015,
    1097,
    1089,
    1035,
    1104,
    1014,
    1104,
    1095,
    1014,
    1075,
    1113,
    1137,
    1113,
    1149,
    1137,
    1111,
    1109,
    1147,
    1109,
    1144,
    1147,
    1133,
    1120,
    1082,
    1140,
    1134,
    1078,
    1134,
    1087,
    1078,
    1121,
    1151,
    1059,
    1151,
    1069,
    1059,
    1142,
    1064,
    1150,
    1064,
    1068,
    1150,
    1127,
    1055,
    1115,
    1060,
    1054,
    1123,
    1054,
    1126,
    1123,
    1037,
    1073,
    1062,
    1042,
    1074,
    1027,
    1074,
    1032,
    1027,
    1024,
    1017,
    1049,
    1022,
    1047,
    1028,
    1047,
    1045,
    1028,
    942,
    937,
    870,
    868,
    936,
    857,
    999,
    962,
    951,
    933,
    984,
    981,
    875,
    879,
    958,
    879,
    948,
    958,
    979,
    970,
    931,
    970,
    858,
    931,
    898,
    907,
    922,
    976,
    983,
    1010,
    983,
    987,
    1010,
    884,
    872,
    866,
    895,
    881,
    860,
    863,
    854,
    891,
    806,
    712,
    737,
    917,
    876,
    915,
    876,
    886,
    915,
    738,
    742,
    807,
    742,
    802,
    807,
    796,
    789,
    726,
    789,
    717,
    726,
    812,
    805,
    848,
    800,
    810,
    794,
    810,
    813,
    794,
    833,
    830,
    793,
    830,
    791,
    793,
    850,
    776,
    841,
    776,
    782,
    841,
    768,
    762,
    822,
    744,
    750,
    783,
    769,
    823,
    773,
    823,
    817,
    773,
    785,
    774,
    746,
    774,
    739,
    746,
    725,
    736,
    710,
    757,
    730,
    718,
    734,
    724,
    745,
    724,
    733,
    745,
    559,
    655,
    651,
    650,
    636,
    564,
    574,
    584,
    663,
    584,
    661,
    663,
    667,
    709,
    643,
    709,
    693,
    643,
    666,
    662,
    708,
    662,
    704,
    708,
    685,
    672,
    638,
    697,
    701,
    624,
    678,
    617,
    612,
    611,
    597,
    668,
    591,
    600,
    630,
    692,
    689,
    642,
    689,
    648,
    642,
    566,
    592,
    585,
    589,
    571,
    557,
    625,
    577,
    632,
    577,
    594,
    632,
    560,
    595,
    567,
    595,
    606,
    567,
    441,
    446,
    511,
    446,
    508,
    511,
    498,
    429,
    501,
    429,
    432,
    501,
    488,
    505,
    517,
    505,
    514,
    517,
    526,
    523,
    494,
    539,
    530,
    548,
    516,
    510,
    546,
    510,
    543,
    546,
    519,
    467,
    454,
    550,
    540,
    487,
    540,
    477,
    487,
    458,
    464,
    481,
    456,
    479,
    461,
    479,
    471,
    461,
    473,
    475,
    449,
    475,
    443,
    449,
    439,
    423,
    448,
    423,
    438,
    448,
    435,
    426,
    462,
    426,
    451,
    462,
    322,
    368,
    302,
    368,
    372,
    302,
    355,
    283,
    350,
    283,
    286,
    350,
    364,
    353,
    373,
    361,
    366,
    378,
    366,
    375,
    378,
    377,
    370,
    413,
    370,
    411,
    413,
    381,
    389,
    359,
    389,
    357,
    359,
    398,
    391,
    406,
    391,
    418,
    406,
    407,
    339,
    404,
    339,
    344,
    404,
    335,
    326,
    396,
    326,
    385,
    396,
    314,
    348,
    336,
    296,
    305,
    307,
    332,
    341,
    329,
    341,
    347,
    329,
    325,
    291,
    280,
    295,
    289,
    330,
    289,
    323,
    330,
    237,
    165,
    160,
    148,
    164,
    242,
    164,
    236,
    242,
    226,
    211,
    151,
    218,
    240,
    273,
    231,
    228,
    146,
    228,
    157,
    146,
    212,
    259,
    248,
    268,
    263,
    219,
    263,
    225,
    219,
    199,
    277,
    270,
    251,
    276,
    195,
    276,
    198,
    195,
    187,
    174,
    245,
    177,
    205,
    167,
    189,
    255,
    194,
    255,
    250,
    194,
    207,
    201,
    169,
    201,
    158,
    169,
    153,
    180,
    166,
    180,
    176,
    166,
    90,
    16,
    32,
    149,
    172,
    154,
    172,
    181,
    154,
    82,
    73,
    6,
    73,
    3,
    6,
    79,
    85,
    102,
    85,
    89,
    102,
    80,
    122,
    112,
    109,
    107,
    74,
    141,
    117,
    119,
    126,
    130,
    60,
    98,
    134,
    100,
    134,
    136,
    100,
    50,
    42,
    113,
    42,
    104,
    113,
    35,
    70,
    61,
    45,
    48,
    68,
    48,
    52,
    68,
    1567,
    1532,
    1550,
    1556,
    1566,
    1549,
    1562,
    1564,
    1555,
    1537,
    1544,
    1533,
    1542,
    1546,
    1539,
    1493,
    1524,
    1528,
    1525,
    1494,
    1514,
    1527,
    1522,
    1520,
    1509,
    1515,
    1496,
    1504,
    1510,
    1498,
    1501,
    1511,
    1505,
    1481,
    1492,
    1475,
    1485,
    1489,
    1479,
    1462,
    1464,
    1472,
    1461,
    1470,
    1459,
    1440,
    1452,
    1432,
    1446,
    1454,
    1442,
    1439,
    1423,
    1428,
    1422,
    1438,
    1447,
    1429,
    1425,
    1418,
    0,
    40,
    10,
    40,
    46,
    10,
    1408,
    1389,
    1396,
    1393,
    1395,
    1388,
    1405,
    1416,
    1387,
    1416,
    1404,
    1387,
    1390,
    1347,
    1343,
    1322,
    1383,
    1374,
    1358,
    1365,
    1369,
    1373,
    1360,
    1370,
    1361,
    1375,
    1354,
    1350,
    1335,
    1400,
    1414,
    1351,
    1402,
    1401,
    1338,
    1345,
    1337,
    1399,
    1334,
    1391,
    1386,
    1348,
    1386,
    1403,
    1348,
    1330,
    1319,
    1326,
    1319,
    1372,
    1326,
    1281,
    1305,
    1294,
    1301,
    1309,
    1287,
    1286,
    1278,
    1269,
    1196,
    1275,
    1280,
    1165,
    1259,
    1250,
    1256,
    1260,
    1182,
    1249,
    1240,
    1237,
    1199,
    1222,
    1220,
    1289,
    1225,
    1216,
    1212,
    1265,
    1192,
    1215,
    1211,
    1191,
    1205,
    1207,
    1198,
    1167,
    1175,
    1187,
    1189,
    1166,
    1185,
    1177,
    1169,
    1160,
    1232,
    1158,
    1176,
    1159,
    1233,
    1245,
    1122,
    1146,
    1153,
    1148,
    1124,
    1136,
    1139,
    1129,
    1131,
    1132,
    1130,
    1119,
    1114,
    1076,
    1098,
    1105,
    1112,
    1096,
    1108,
    1110,
    1103,
    1099,
    1084,
    1093,
    1041,
    1066,
    1072,
    1067,
    1043,
    1057,
    1071,
    1065,
    1061,
    1048,
    1053,
    1046,
    1116,
    1056,
    1050,
    1034,
    1012,
    1029,
    1090,
    1025,
    1016,
    1018,
    1026,
    1091,
    1007,
    1004,
    995,
    1e3,
    1011,
    988,
    1006,
    1009,
    998,
    906,
    978,
    973,
    956,
    952,
    963,
    955,
    961,
    945,
    960,
    954,
    943,
    934,
    940,
    927,
    859,
    938,
    932,
    992,
    918,
    925,
    908,
    900,
    902,
    887,
    871,
    883,
    818,
    845,
    843,
    825,
    831,
    819,
    804,
    811,
    809,
    799,
    792,
    790,
    778,
    784,
    753,
    756,
    765,
    751,
    760,
    767,
    758,
    735,
    747,
    740,
    714,
    719,
    731,
    715,
    732,
    723,
    675,
    706,
    699,
    683,
    686,
    674,
    665,
    641,
    659,
    656,
    645,
    653,
    652,
    644,
    637,
    620,
    633,
    616,
    626,
    634,
    621,
    610,
    614,
    602,
    605,
    608,
    601,
    593,
    576,
    586,
    580,
    582,
    573,
    588,
    578,
    570,
    562,
    556,
    649,
    545,
    553,
    536,
    538,
    525,
    527,
    534,
    524,
    537,
    515,
    513,
    509,
    483,
    485,
    476,
    465,
    459,
    453,
    18,
    86,
    8,
    86,
    83,
    8,
    414,
    421,
    401,
    420,
    412,
    410,
    393,
    388,
    380,
    400,
    394,
    382,
    349,
    342,
    337,
    315,
    308,
    306,
    311,
    316,
    298,
    284,
    292,
    310,
    274,
    279,
    267,
    266,
    258,
    262,
    260,
    256,
    249,
    233,
    222,
    230,
    224,
    234,
    215,
    206,
    179,
    191,
    196,
    208,
    193,
    202,
    209,
    197,
    192,
    184,
    186,
    185,
    183,
    173,
    163,
    145,
    171,
    162,
    170,
    159,
    84,
    77,
    75,
    57,
    62,
    71,
    39,
    30,
    15,
    26,
    37,
    14,
    4,
    12,
    27,
    1,
    13,
    5,
    1314,
    1325,
    1368,
    1325,
    1371,
    1368,
    1487,
    1559,
    1433,
    1559,
    1516,
    1433,
    1500,
    1541,
    1421,
    1541,
    1468,
    1421,
    1254,
    1173,
    1297,
    1219,
    1188,
    1204,
    1188,
    1184,
    1204,
    1263,
    1303,
    1231,
    1303,
    1272,
    1231,
    1063,
    1141,
    1038,
    1141,
    1106,
    1038,
    885,
    880,
    912,
    880,
    894,
    912,
    1020,
    1079,
    1118,
    878,
    920,
    947,
    920,
    1003,
    947,
    990,
    986,
    966,
    986,
    930,
    966,
    874,
    957,
    869,
    957,
    941,
    869,
    781,
    772,
    840,
    772,
    816,
    840,
    741,
    777,
    801,
    777,
    851,
    801,
    680,
    695,
    619,
    839,
    835,
    815,
    835,
    795,
    815,
    599,
    590,
    604,
    590,
    565,
    604,
    629,
    702,
    583,
    702,
    660,
    583,
    827,
    763,
    788,
    763,
    722,
    788,
    549,
    486,
    531,
    486,
    468,
    531,
    447,
    434,
    470,
    434,
    460,
    470,
    445,
    478,
    507,
    478,
    541,
    507,
    669,
    598,
    635,
    598,
    563,
    635,
    547,
    529,
    518,
    529,
    491,
    518,
    442,
    512,
    425,
    512,
    503,
    425,
    403,
    343,
    395,
    343,
    334,
    395,
    345,
    303,
    328,
    303,
    294,
    328,
    321,
    340,
    367,
    340,
    408,
    367,
    521,
    455,
    497,
    455,
    428,
    497,
    379,
    416,
    362,
    416,
    384,
    362,
    371,
    351,
    301,
    351,
    288,
    301,
    161,
    204,
    238,
    204,
    272,
    238,
    354,
    386,
    282,
    386,
    327,
    282,
    55,
    51,
    125,
    51,
    114,
    125,
    20,
    9,
    66,
    9,
    44,
    66,
    31,
    65,
    95,
    65,
    131,
    95,
    246,
    175,
    210,
    175,
    150,
    210,
    103,
    138,
    81,
    138,
    123,
    81,
    1519,
    1521,
    1443,
    1486,
    1480,
    1558,
    1540,
    1538,
    1467,
    1262,
    1229,
    1252,
    1163,
    1248,
    1236,
    1299,
    1306,
    1255,
    1230,
    1270,
    1243,
    1302,
    1288,
    1271,
    1208,
    1206,
    1155,
    1107,
    1101,
    1039,
    1021,
    1092,
    1080,
    1083,
    1088,
    1135,
    1036,
    1031,
    1070,
    1117,
    1051,
    1019,
    964,
    928,
    946,
    1001,
    989,
    965,
    1005,
    997,
    950,
    935,
    929,
    985,
    1008,
    996,
    974,
    919,
    994,
    1002,
    971,
    910,
    904,
    967,
    903,
    892,
    921,
    913,
    896,
    991,
    924,
    909,
    889,
    897,
    861,
    711,
    797,
    727,
    716,
    787,
    721,
    838,
    814,
    849,
    853,
    846,
    803,
    837,
    821,
    834,
    828,
    824,
    764,
    779,
    754,
    771,
    755,
    749,
    729,
    761,
    759,
    720,
    664,
    657,
    575,
    646,
    688,
    639,
    696,
    681,
    673,
    618,
    694,
    622,
    623,
    700,
    628,
    679,
    613,
    670,
    581,
    579,
    627,
    554,
    568,
    587,
    433,
    424,
    502,
    496,
    490,
    528,
    493,
    522,
    500,
    552,
    533,
    535,
    520,
    532,
    469,
    484,
    482,
    466,
    419,
    392,
    399,
    415,
    402,
    383,
    313,
    304,
    346,
    319,
    317,
    338,
    287,
    312,
    300,
    241,
    232,
    147,
    156,
    227,
    152,
    275,
    269,
    220,
    214,
    223,
    261,
    203,
    200,
    271,
    254,
    188,
    247,
    87,
    19,
    92,
    96,
    91,
    33,
    76,
    78,
    111,
    140,
    128,
    116,
    137,
    143,
    121,
    54,
    124,
    58,
    64,
    59,
    129,
    34,
    21,
    67,
    29,
    38,
    63,
    11,
    22,
    24,
    7,
    28,
    17,
    1534,
    1545,
    1552,
    1474,
    1491,
    1456,
    1457,
    1469,
    1476,
    1436,
    1453,
    1445,
    1417,
    1406,
    1412,
    1376,
    1384,
    1355,
    1379,
    1381,
    1321,
    1411,
    1353,
    1415,
    1346,
    1340,
    1342,
    1318,
    1328,
    1324,
    1320,
    1331,
    1378,
    1323,
    1311,
    1317,
    1364,
    1313,
    1367,
    1293,
    1304,
    1298,
    1285,
    1307,
    1283,
    1282,
    1277,
    1284,
    1266,
    1273,
    1194,
    1181,
    1258,
    1164,
    1235,
    1238,
    1246,
    1228,
    1242,
    1251,
    1214,
    1223,
    1201,
    1296,
    1227,
    1291,
    1200,
    1209,
    1213,
    1162,
    1171,
    1179,
    1174,
    1156,
    1186,
    1145,
    1143,
    1152,
    1125,
    1128,
    1138,
    1086,
    1081,
    1094,
    1077,
    1085,
    1100,
    1044,
    1052,
    1058,
    1013,
    1023,
    1030,
    975,
    980,
    982,
    969,
    977,
    905,
    949,
    953,
    959,
    926,
    939,
    944,
    914,
    923,
    916,
    899,
    890,
    901,
    873,
    888,
    877,
    865,
    862,
    882,
    855,
    864,
    867,
    842,
    844,
    852,
    836,
    847,
    820,
    832,
    826,
    829,
    786,
    780,
    775,
    752,
    766,
    770,
    698,
    705,
    703,
    691,
    707,
    677,
    676,
    687,
    690,
    671,
    684,
    682,
    640,
    647,
    658,
    615,
    631,
    603,
    596,
    609,
    607,
    569,
    555,
    561,
    551,
    544,
    542,
    504,
    492,
    499,
    489,
    495,
    506,
    472,
    480,
    474,
    452,
    457,
    463,
    450,
    444,
    440,
    436,
    430,
    427,
    422,
    431,
    437,
    405,
    417,
    409,
    387,
    390,
    397,
    369,
    376,
    374,
    352,
    363,
    356,
    358,
    365,
    360,
    333,
    331,
    324,
    299,
    318,
    320,
    309,
    290,
    297,
    281,
    293,
    285,
    265,
    278,
    253,
    252,
    257,
    264,
    217,
    244,
    239,
    235,
    243,
    216,
    229,
    221,
    213,
    178,
    182,
    190,
    144,
    155,
    168,
    127,
    139,
    132,
    133,
    142,
    135,
    118,
    110,
    120,
    106,
    108,
    115,
    99,
    93,
    97,
    88,
    94,
    101,
    53,
    56,
    69,
    49,
    47,
    41,
    23,
    36,
    25,
    911,
    972,
    993,
    728,
    748,
    743,
    893,
    856,
    968,
    798,
    713,
    808,
    558,
    572,
    654
  ]);

  // ../meshes/wheel.ts
  function mesh_wheel(gl) {
    let vao = gl.createVertexArray();
    gl.bindVertexArray(vao);
    let vertex_buf = gl.createBuffer();
    gl.bindBuffer(GL_ARRAY_BUFFER, vertex_buf);
    gl.bufferData(GL_ARRAY_BUFFER, vertex_arr4, GL_STATIC_DRAW);
    gl.enableVertexAttribArray(0 /* Position */);
    gl.vertexAttribPointer(0 /* Position */, 3, GL_FLOAT, false, 0, 0);
    let normal_buf = gl.createBuffer();
    gl.bindBuffer(GL_ARRAY_BUFFER, normal_buf);
    gl.bufferData(GL_ARRAY_BUFFER, normal_arr4, GL_STATIC_DRAW);
    gl.enableVertexAttribArray(1 /* Normal */);
    gl.vertexAttribPointer(1 /* Normal */, 3, GL_FLOAT, false, 0, 0);
    let texcoord_buf = gl.createBuffer();
    gl.bindBuffer(GL_ARRAY_BUFFER, texcoord_buf);
    gl.bufferData(GL_ARRAY_BUFFER, texcoord_arr4, GL_STATIC_DRAW);
    gl.enableVertexAttribArray(2 /* TexCoord */);
    gl.vertexAttribPointer(2 /* TexCoord */, 2, GL_FLOAT, false, 0, 0);
    let weights_buf = gl.createBuffer();
    gl.bindBuffer(GL_ARRAY_BUFFER, weights_buf);
    gl.bufferData(GL_ARRAY_BUFFER, weights_arr4, GL_STATIC_DRAW);
    gl.enableVertexAttribArray(5 /* Weights */);
    gl.vertexAttribPointer(5 /* Weights */, 4, GL_FLOAT, false, 0, 0);
    let index_buf = gl.createBuffer();
    gl.bindBuffer(GL_ELEMENT_ARRAY_BUFFER, index_buf);
    gl.bufferData(GL_ELEMENT_ARRAY_BUFFER, index_arr4, GL_STATIC_DRAW);
    gl.bindVertexArray(null);
    return {
      Vao: vao,
      VertexBuffer: vertex_buf,
      VertexArray: vertex_arr4,
      NormalBuffer: normal_buf,
      NormalArray: normal_arr4,
      TexCoordBuffer: texcoord_buf,
      TexCoordArray: texcoord_arr4,
      WeightsBuffer: weights_buf,
      WeightsArray: weights_arr4,
      IndexBuffer: index_buf,
      IndexArray: index_arr4,
      IndexCount: index_arr4.length
    };
  }
  var vertex_arr4 = Float32Array.from([
    -0.3,
    0,
    -1.05,
    -0.3,
    0,
    -1.05,
    -0.3,
    0,
    -1.05,
    -0.3,
    0,
    -1.05,
    -0.13,
    0.39,
    -1.34,
    -0.13,
    0.39,
    -1.34,
    -0.13,
    0.39,
    -1.34,
    -0.13,
    0.39,
    -1.34,
    -0.13,
    -0.39,
    -1.34,
    -0.13,
    -0.39,
    -1.34,
    -0.13,
    -0.39,
    -1.34,
    -0.13,
    -0.39,
    -1.34,
    -0.25,
    0.27,
    -1.23,
    -0.25,
    0.27,
    -1.23,
    -0.25,
    0.27,
    -1.23,
    -0.25,
    0.27,
    -1.23,
    -0.23,
    -0,
    -1.34,
    -0.23,
    -0,
    -1.34,
    -0.23,
    -0,
    -1.34,
    -0.13,
    -0,
    -1.43,
    -0.13,
    -0,
    -1.43,
    -0.13,
    -0,
    -1.43,
    -0.13,
    -0,
    -1.43,
    -0.25,
    -0.27,
    -1.23,
    -0.25,
    -0.27,
    -1.23,
    -0.25,
    -0.27,
    -1.23,
    -0.25,
    -0.27,
    -1.23,
    0.3,
    0,
    -1.05,
    0.3,
    0,
    -1.05,
    0.3,
    0,
    -1.05,
    0.3,
    0,
    -1.05,
    0.13,
    -0.39,
    -1.34,
    0.13,
    -0.39,
    -1.34,
    0.13,
    -0.39,
    -1.34,
    0.13,
    -0.39,
    -1.34,
    0.13,
    0.39,
    -1.34,
    0.13,
    0.39,
    -1.34,
    0.13,
    0.39,
    -1.34,
    0.13,
    0.39,
    -1.34,
    0.25,
    -0.27,
    -1.23,
    0.25,
    -0.27,
    -1.23,
    0.25,
    -0.27,
    -1.23,
    0.25,
    -0.27,
    -1.23,
    0.23,
    -0,
    -1.34,
    0.23,
    -0,
    -1.34,
    0.23,
    -0,
    -1.34,
    0.13,
    -0,
    -1.43,
    0.13,
    -0,
    -1.43,
    0.13,
    -0,
    -1.43,
    0.13,
    -0,
    -1.43,
    0.25,
    0.27,
    -1.23,
    0.25,
    0.27,
    -1.23,
    0.25,
    0.27,
    -1.23,
    0.25,
    0.27,
    -1.23,
    -0.3,
    -0.74,
    -0.74,
    -0.3,
    -0.74,
    -0.74,
    -0.3,
    -0.74,
    -0.74,
    -0.3,
    -0.74,
    -0.74,
    -0.13,
    -0.67,
    -1.22,
    -0.13,
    -0.67,
    -1.22,
    -0.13,
    -0.67,
    -1.22,
    -0.13,
    -0.67,
    -1.22,
    -0.13,
    -1.22,
    -0.67,
    -0.13,
    -1.22,
    -0.67,
    -0.13,
    -1.22,
    -0.67,
    -0.13,
    -1.22,
    -0.67,
    -0.25,
    -0.74,
    -1.06,
    -0.25,
    -0.74,
    -1.06,
    -0.25,
    -0.74,
    -1.06,
    -0.25,
    -0.74,
    -1.06,
    -0.23,
    -0.95,
    -0.95,
    -0.23,
    -0.95,
    -0.95,
    -0.23,
    -0.95,
    -0.95,
    -0.13,
    -0.99,
    -0.99,
    -0.13,
    -0.99,
    -0.99,
    -0.13,
    -0.99,
    -0.99,
    -0.13,
    -0.99,
    -0.99,
    -0.25,
    -1.06,
    -0.74,
    -0.25,
    -1.06,
    -0.74,
    -0.25,
    -1.06,
    -0.74,
    -0.25,
    -1.06,
    -0.74,
    0.3,
    -0.74,
    -0.74,
    0.3,
    -0.74,
    -0.74,
    0.3,
    -0.74,
    -0.74,
    0.3,
    -0.74,
    -0.74,
    0.13,
    -1.22,
    -0.67,
    0.13,
    -1.22,
    -0.67,
    0.13,
    -1.22,
    -0.67,
    0.13,
    -1.22,
    -0.67,
    0.13,
    -0.67,
    -1.22,
    0.13,
    -0.67,
    -1.22,
    0.13,
    -0.67,
    -1.22,
    0.13,
    -0.67,
    -1.22,
    0.25,
    -1.06,
    -0.74,
    0.25,
    -1.06,
    -0.74,
    0.25,
    -1.06,
    -0.74,
    0.25,
    -1.06,
    -0.74,
    0.23,
    -0.95,
    -0.95,
    0.23,
    -0.95,
    -0.95,
    0.23,
    -0.95,
    -0.95,
    0.13,
    -0.99,
    -0.99,
    0.13,
    -0.99,
    -0.99,
    0.13,
    -0.99,
    -0.99,
    0.13,
    -0.99,
    -0.99,
    0.25,
    -0.74,
    -1.06,
    0.25,
    -0.74,
    -1.06,
    0.25,
    -0.74,
    -1.06,
    0.25,
    -0.74,
    -1.06,
    -0.3,
    -1.05,
    0,
    -0.3,
    -1.05,
    0,
    -0.3,
    -1.05,
    0,
    -0.3,
    -1.05,
    0,
    -0.13,
    -1.34,
    -0.39,
    -0.13,
    -1.34,
    -0.39,
    -0.13,
    -1.34,
    -0.39,
    -0.13,
    -1.34,
    -0.39,
    -0.13,
    -1.34,
    0.39,
    -0.13,
    -1.34,
    0.39,
    -0.13,
    -1.34,
    0.39,
    -0.13,
    -1.34,
    0.39,
    -0.25,
    -1.27,
    -0.23,
    -0.25,
    -1.27,
    -0.23,
    -0.25,
    -1.27,
    -0.23,
    -0.25,
    -1.27,
    -0.23,
    -0.23,
    -1.35,
    0,
    -0.23,
    -1.35,
    0,
    -0.23,
    -1.35,
    0,
    -0.13,
    -1.41,
    -0,
    -0.13,
    -1.41,
    -0,
    -0.13,
    -1.41,
    -0,
    -0.13,
    -1.41,
    -0,
    -0.25,
    -1.27,
    0.23,
    -0.25,
    -1.27,
    0.23,
    -0.25,
    -1.27,
    0.23,
    -0.25,
    -1.27,
    0.23,
    0.3,
    -1.05,
    0,
    0.3,
    -1.05,
    0,
    0.3,
    -1.05,
    0,
    0.3,
    -1.05,
    0,
    0.13,
    -1.34,
    0.39,
    0.13,
    -1.34,
    0.39,
    0.13,
    -1.34,
    0.39,
    0.13,
    -1.34,
    0.39,
    0.13,
    -1.34,
    -0.39,
    0.13,
    -1.34,
    -0.39,
    0.13,
    -1.34,
    -0.39,
    0.13,
    -1.34,
    -0.39,
    0.25,
    -1.27,
    0.23,
    0.25,
    -1.27,
    0.23,
    0.25,
    -1.27,
    0.23,
    0.25,
    -1.27,
    0.23,
    0.23,
    -1.35,
    0,
    0.23,
    -1.35,
    0,
    0.23,
    -1.35,
    0,
    0.13,
    -1.41,
    0,
    0.13,
    -1.41,
    0,
    0.13,
    -1.41,
    0,
    0.13,
    -1.41,
    0,
    0.25,
    -1.27,
    -0.23,
    0.25,
    -1.27,
    -0.23,
    0.25,
    -1.27,
    -0.23,
    0.25,
    -1.27,
    -0.23,
    -0.3,
    -0.74,
    0.74,
    -0.3,
    -0.74,
    0.74,
    -0.3,
    -0.74,
    0.74,
    -0.3,
    -0.74,
    0.74,
    -0.13,
    -1.22,
    0.67,
    -0.13,
    -1.22,
    0.67,
    -0.13,
    -1.22,
    0.67,
    -0.13,
    -1.22,
    0.67,
    -0.13,
    -0.67,
    1.22,
    -0.13,
    -0.67,
    1.22,
    -0.13,
    -0.67,
    1.22,
    -0.13,
    -0.67,
    1.22,
    -0.25,
    -1.06,
    0.74,
    -0.25,
    -1.06,
    0.74,
    -0.25,
    -1.06,
    0.74,
    -0.25,
    -1.06,
    0.74,
    -0.23,
    -0.95,
    0.95,
    -0.23,
    -0.95,
    0.95,
    -0.23,
    -0.95,
    0.95,
    -0.13,
    -0.99,
    0.99,
    -0.13,
    -0.99,
    0.99,
    -0.13,
    -0.99,
    0.99,
    -0.13,
    -0.99,
    0.99,
    -0.25,
    -0.74,
    1.06,
    -0.25,
    -0.74,
    1.06,
    -0.25,
    -0.74,
    1.06,
    -0.25,
    -0.74,
    1.06,
    0.3,
    -0.74,
    0.74,
    0.3,
    -0.74,
    0.74,
    0.3,
    -0.74,
    0.74,
    0.3,
    -0.74,
    0.74,
    0.13,
    -0.67,
    1.22,
    0.13,
    -0.67,
    1.22,
    0.13,
    -0.67,
    1.22,
    0.13,
    -0.67,
    1.22,
    0.13,
    -1.22,
    0.67,
    0.13,
    -1.22,
    0.67,
    0.13,
    -1.22,
    0.67,
    0.13,
    -1.22,
    0.67,
    0.25,
    -0.74,
    1.06,
    0.25,
    -0.74,
    1.06,
    0.25,
    -0.74,
    1.06,
    0.25,
    -0.74,
    1.06,
    0.23,
    -0.95,
    0.95,
    0.23,
    -0.95,
    0.95,
    0.23,
    -0.95,
    0.95,
    0.13,
    -0.99,
    0.99,
    0.13,
    -0.99,
    0.99,
    0.13,
    -0.99,
    0.99,
    0.13,
    -0.99,
    0.99,
    0.25,
    -1.06,
    0.74,
    0.25,
    -1.06,
    0.74,
    0.25,
    -1.06,
    0.74,
    0.25,
    -1.06,
    0.74,
    -0.3,
    0,
    1.05,
    -0.3,
    0,
    1.05,
    -0.3,
    0,
    1.05,
    -0.3,
    0,
    1.05,
    -0.13,
    -0.39,
    1.34,
    -0.13,
    -0.39,
    1.34,
    -0.13,
    -0.39,
    1.34,
    -0.13,
    -0.39,
    1.34,
    -0.13,
    0.39,
    1.34,
    -0.13,
    0.39,
    1.34,
    -0.13,
    0.39,
    1.34,
    -0.13,
    0.39,
    1.34,
    -0.25,
    -0.23,
    1.27,
    -0.25,
    -0.23,
    1.27,
    -0.25,
    -0.23,
    1.27,
    -0.25,
    -0.23,
    1.27,
    -0.23,
    0,
    1.35,
    -0.23,
    0,
    1.35,
    -0.23,
    0,
    1.35,
    -0.13,
    0,
    1.41,
    -0.13,
    0,
    1.41,
    -0.13,
    0,
    1.41,
    -0.13,
    0,
    1.41,
    -0.25,
    0.23,
    1.27,
    -0.25,
    0.23,
    1.27,
    -0.25,
    0.23,
    1.27,
    -0.25,
    0.23,
    1.27,
    0.3,
    0,
    1.05,
    0.3,
    0,
    1.05,
    0.3,
    0,
    1.05,
    0.3,
    0,
    1.05,
    0.13,
    0.39,
    1.34,
    0.13,
    0.39,
    1.34,
    0.13,
    0.39,
    1.34,
    0.13,
    0.39,
    1.34,
    0.13,
    -0.39,
    1.34,
    0.13,
    -0.39,
    1.34,
    0.13,
    -0.39,
    1.34,
    0.13,
    -0.39,
    1.34,
    0.25,
    0.23,
    1.27,
    0.25,
    0.23,
    1.27,
    0.25,
    0.23,
    1.27,
    0.25,
    0.23,
    1.27,
    0.23,
    0,
    1.35,
    0.23,
    0,
    1.35,
    0.23,
    0,
    1.35,
    0.13,
    0,
    1.41,
    0.13,
    0,
    1.41,
    0.13,
    0,
    1.41,
    0.13,
    0,
    1.41,
    0.25,
    -0.23,
    1.27,
    0.25,
    -0.23,
    1.27,
    0.25,
    -0.23,
    1.27,
    0.25,
    -0.23,
    1.27,
    -0.3,
    0.74,
    0.74,
    -0.3,
    0.74,
    0.74,
    -0.3,
    0.74,
    0.74,
    -0.3,
    0.74,
    0.74,
    -0.13,
    0.67,
    1.22,
    -0.13,
    0.67,
    1.22,
    -0.13,
    0.67,
    1.22,
    -0.13,
    0.67,
    1.22,
    -0.13,
    1.22,
    0.67,
    -0.13,
    1.22,
    0.67,
    -0.13,
    1.22,
    0.67,
    -0.13,
    1.22,
    0.67,
    -0.25,
    0.74,
    1.06,
    -0.25,
    0.74,
    1.06,
    -0.25,
    0.74,
    1.06,
    -0.25,
    0.74,
    1.06,
    -0.23,
    0.95,
    0.95,
    -0.23,
    0.95,
    0.95,
    -0.23,
    0.95,
    0.95,
    -0.13,
    0.99,
    0.99,
    -0.13,
    0.99,
    0.99,
    -0.13,
    0.99,
    0.99,
    -0.13,
    0.99,
    0.99,
    -0.25,
    1.06,
    0.74,
    -0.25,
    1.06,
    0.74,
    -0.25,
    1.06,
    0.74,
    -0.25,
    1.06,
    0.74,
    0.3,
    0.74,
    0.74,
    0.3,
    0.74,
    0.74,
    0.3,
    0.74,
    0.74,
    0.3,
    0.74,
    0.74,
    0.13,
    1.22,
    0.67,
    0.13,
    1.22,
    0.67,
    0.13,
    1.22,
    0.67,
    0.13,
    1.22,
    0.67,
    0.13,
    0.67,
    1.22,
    0.13,
    0.67,
    1.22,
    0.13,
    0.67,
    1.22,
    0.13,
    0.67,
    1.22,
    0.25,
    1.06,
    0.74,
    0.25,
    1.06,
    0.74,
    0.25,
    1.06,
    0.74,
    0.25,
    1.06,
    0.74,
    0.23,
    0.95,
    0.95,
    0.23,
    0.95,
    0.95,
    0.23,
    0.95,
    0.95,
    0.13,
    0.99,
    0.99,
    0.13,
    0.99,
    0.99,
    0.13,
    0.99,
    0.99,
    0.13,
    0.99,
    0.99,
    0.25,
    0.74,
    1.06,
    0.25,
    0.74,
    1.06,
    0.25,
    0.74,
    1.06,
    0.25,
    0.74,
    1.06,
    -0.3,
    1.05,
    -0,
    -0.3,
    1.05,
    -0,
    -0.3,
    1.05,
    -0,
    -0.3,
    1.05,
    -0,
    -0.13,
    1.34,
    0.39,
    -0.13,
    1.34,
    0.39,
    -0.13,
    1.34,
    0.39,
    -0.13,
    1.34,
    0.39,
    -0.13,
    1.34,
    -0.39,
    -0.13,
    1.34,
    -0.39,
    -0.13,
    1.34,
    -0.39,
    -0.13,
    1.34,
    -0.39,
    -0.25,
    1.27,
    0.23,
    -0.25,
    1.27,
    0.23,
    -0.25,
    1.27,
    0.23,
    -0.25,
    1.27,
    0.23,
    -0.23,
    1.35,
    -0,
    -0.23,
    1.35,
    -0,
    -0.23,
    1.35,
    -0,
    -0.13,
    1.41,
    -0,
    -0.13,
    1.41,
    -0,
    -0.13,
    1.41,
    -0,
    -0.13,
    1.41,
    -0,
    -0.25,
    1.27,
    -0.23,
    -0.25,
    1.27,
    -0.23,
    -0.25,
    1.27,
    -0.23,
    -0.25,
    1.27,
    -0.23,
    0.3,
    1.05,
    -0,
    0.3,
    1.05,
    -0,
    0.3,
    1.05,
    -0,
    0.3,
    1.05,
    -0,
    0.13,
    1.34,
    -0.39,
    0.13,
    1.34,
    -0.39,
    0.13,
    1.34,
    -0.39,
    0.13,
    1.34,
    -0.39,
    0.13,
    1.34,
    0.39,
    0.13,
    1.34,
    0.39,
    0.13,
    1.34,
    0.39,
    0.13,
    1.34,
    0.39,
    0.25,
    1.27,
    -0.23,
    0.25,
    1.27,
    -0.23,
    0.25,
    1.27,
    -0.23,
    0.25,
    1.27,
    -0.23,
    0.23,
    1.35,
    -0,
    0.23,
    1.35,
    -0,
    0.23,
    1.35,
    -0,
    0.13,
    1.41,
    0,
    0.13,
    1.41,
    0,
    0.13,
    1.41,
    0,
    0.13,
    1.41,
    0,
    0.25,
    1.27,
    0.23,
    0.25,
    1.27,
    0.23,
    0.25,
    1.27,
    0.23,
    0.25,
    1.27,
    0.23,
    -0.3,
    0.74,
    -0.74,
    -0.3,
    0.74,
    -0.74,
    -0.3,
    0.74,
    -0.74,
    -0.3,
    0.74,
    -0.74,
    -0.13,
    1.22,
    -0.67,
    -0.13,
    1.22,
    -0.67,
    -0.13,
    1.22,
    -0.67,
    -0.13,
    1.22,
    -0.67,
    -0.13,
    0.67,
    -1.22,
    -0.13,
    0.67,
    -1.22,
    -0.13,
    0.67,
    -1.22,
    -0.13,
    0.67,
    -1.22,
    -0.25,
    1.06,
    -0.74,
    -0.25,
    1.06,
    -0.74,
    -0.25,
    1.06,
    -0.74,
    -0.25,
    1.06,
    -0.74,
    -0.23,
    0.95,
    -0.95,
    -0.23,
    0.95,
    -0.95,
    -0.23,
    0.95,
    -0.95,
    -0.13,
    0.99,
    -0.99,
    -0.13,
    0.99,
    -0.99,
    -0.13,
    0.99,
    -0.99,
    -0.13,
    0.99,
    -0.99,
    -0.25,
    0.74,
    -1.06,
    -0.25,
    0.74,
    -1.06,
    -0.25,
    0.74,
    -1.06,
    -0.25,
    0.74,
    -1.06,
    0.3,
    0.74,
    -0.74,
    0.3,
    0.74,
    -0.74,
    0.3,
    0.74,
    -0.74,
    0.3,
    0.74,
    -0.74,
    0.13,
    0.67,
    -1.22,
    0.13,
    0.67,
    -1.22,
    0.13,
    0.67,
    -1.22,
    0.13,
    0.67,
    -1.22,
    0.13,
    1.22,
    -0.67,
    0.13,
    1.22,
    -0.67,
    0.13,
    1.22,
    -0.67,
    0.13,
    1.22,
    -0.67,
    0.25,
    0.74,
    -1.06,
    0.25,
    0.74,
    -1.06,
    0.25,
    0.74,
    -1.06,
    0.25,
    0.74,
    -1.06,
    0.23,
    0.95,
    -0.95,
    0.23,
    0.95,
    -0.95,
    0.23,
    0.95,
    -0.95,
    0.13,
    0.99,
    -0.99,
    0.13,
    0.99,
    -0.99,
    0.13,
    0.99,
    -0.99,
    0.13,
    0.99,
    -0.99,
    0.25,
    1.06,
    -0.74,
    0.25,
    1.06,
    -0.74,
    0.25,
    1.06,
    -0.74,
    0.25,
    1.06,
    -0.74
  ]);
  var normal_arr4 = Float32Array.from([
    -1,
    0,
    0,
    -0.99,
    -0.06,
    -0.16,
    -0.99,
    0.06,
    -0.16,
    -0.97,
    -0,
    -0.24,
    -0.75,
    0.23,
    -0.61,
    -0.73,
    0.18,
    -0.65,
    -0,
    0.24,
    -0.97,
    0,
    0.38,
    -0.92,
    -0.75,
    -0.23,
    -0.61,
    -0.73,
    -0.18,
    -0.65,
    0,
    -0.38,
    -0.92,
    0,
    -0.24,
    -0.97,
    -0.99,
    0.06,
    -0.16,
    -0.97,
    -0,
    -0.24,
    -0.75,
    0.23,
    -0.61,
    -0.73,
    0.18,
    -0.65,
    -0.97,
    -0,
    -0.24,
    -0.73,
    -0.18,
    -0.65,
    -0.73,
    0.18,
    -0.65,
    -0.73,
    -0.18,
    -0.65,
    -0.73,
    0.18,
    -0.65,
    -0,
    0.24,
    -0.97,
    0,
    -0.24,
    -0.97,
    -0.99,
    -0.06,
    -0.16,
    -0.97,
    -0,
    -0.24,
    -0.75,
    -0.23,
    -0.61,
    -0.73,
    -0.18,
    -0.65,
    0.97,
    0,
    -0.24,
    0.99,
    -0.06,
    -0.16,
    0.99,
    0.06,
    -0.16,
    1,
    -0,
    -0,
    0,
    -0.38,
    -0.92,
    0,
    -0.24,
    -0.97,
    0.73,
    -0.18,
    -0.65,
    0.75,
    -0.23,
    -0.61,
    -0,
    0.24,
    -0.97,
    0,
    0.38,
    -0.92,
    0.73,
    0.18,
    -0.65,
    0.75,
    0.23,
    -0.61,
    0.73,
    -0.18,
    -0.65,
    0.75,
    -0.23,
    -0.61,
    0.97,
    0,
    -0.24,
    0.99,
    -0.06,
    -0.16,
    0.73,
    -0.18,
    -0.65,
    0.73,
    0.18,
    -0.65,
    0.97,
    0,
    -0.24,
    -0,
    0.24,
    -0.97,
    0,
    -0.24,
    -0.97,
    0.73,
    -0.18,
    -0.65,
    0.73,
    0.18,
    -0.65,
    0.73,
    0.18,
    -0.65,
    0.75,
    0.23,
    -0.61,
    0.97,
    0,
    -0.24,
    0.99,
    0.06,
    -0.16,
    -1,
    0,
    0,
    -0.99,
    -0.15,
    -0.06,
    -0.99,
    -0.06,
    -0.16,
    -0.97,
    -0.16,
    -0.16,
    -0.75,
    -0.23,
    -0.61,
    -0.58,
    -0.45,
    -0.68,
    0,
    -0.58,
    -0.82,
    0,
    -0.38,
    -0.92,
    -0.72,
    -0.64,
    -0.27,
    -0.58,
    -0.68,
    -0.45,
    -0,
    -0.92,
    -0.38,
    0,
    -0.82,
    -0.58,
    -0.99,
    -0.06,
    -0.16,
    -0.97,
    -0.16,
    -0.16,
    -0.75,
    -0.23,
    -0.61,
    -0.58,
    -0.45,
    -0.68,
    -0.97,
    -0.16,
    -0.16,
    -0.58,
    -0.45,
    -0.68,
    -0.58,
    -0.68,
    -0.45,
    -0.58,
    -0.45,
    -0.68,
    -0.58,
    -0.68,
    -0.45,
    0,
    -0.82,
    -0.58,
    0,
    -0.58,
    -0.82,
    -0.99,
    -0.15,
    -0.06,
    -0.97,
    -0.16,
    -0.16,
    -0.72,
    -0.64,
    -0.27,
    -0.58,
    -0.68,
    -0.45,
    0.97,
    -0.16,
    -0.16,
    0.99,
    -0.06,
    -0.16,
    0.99,
    -0.15,
    -0.06,
    1,
    -0,
    -0,
    -0,
    -0.92,
    -0.38,
    0,
    -0.82,
    -0.58,
    0.58,
    -0.68,
    -0.45,
    0.72,
    -0.64,
    -0.27,
    0,
    -0.58,
    -0.82,
    0,
    -0.38,
    -0.92,
    0.58,
    -0.45,
    -0.68,
    0.75,
    -0.23,
    -0.61,
    0.58,
    -0.68,
    -0.45,
    0.72,
    -0.64,
    -0.27,
    0.97,
    -0.16,
    -0.16,
    0.99,
    -0.15,
    -0.06,
    0.58,
    -0.68,
    -0.45,
    0.58,
    -0.45,
    -0.68,
    0.97,
    -0.16,
    -0.16,
    0,
    -0.82,
    -0.58,
    0,
    -0.58,
    -0.82,
    0.58,
    -0.68,
    -0.45,
    0.58,
    -0.45,
    -0.68,
    0.58,
    -0.45,
    -0.68,
    0.75,
    -0.23,
    -0.61,
    0.97,
    -0.16,
    -0.16,
    0.99,
    -0.06,
    -0.16,
    -1,
    0,
    0,
    -0.99,
    -0.15,
    -0.06,
    -0.99,
    -0.15,
    0.06,
    -0.97,
    -0.23,
    0,
    -0.72,
    -0.64,
    -0.27,
    -0.58,
    -0.8,
    -0.17,
    -0,
    -0.92,
    -0.38,
    0,
    -0.99,
    -0.17,
    -0.72,
    -0.64,
    0.27,
    -0.58,
    -0.8,
    0.17,
    0,
    -0.92,
    0.38,
    0,
    -0.99,
    0.17,
    -0.99,
    -0.15,
    -0.06,
    -0.97,
    -0.23,
    0,
    -0.72,
    -0.64,
    -0.27,
    -0.58,
    -0.8,
    -0.17,
    -0.97,
    -0.23,
    0,
    -0.58,
    -0.8,
    -0.17,
    -0.58,
    -0.8,
    0.17,
    -0.58,
    -0.8,
    -0.17,
    -0.58,
    -0.8,
    0.17,
    0,
    -0.99,
    0.17,
    0,
    -0.99,
    -0.17,
    -0.99,
    -0.15,
    0.06,
    -0.97,
    -0.23,
    0,
    -0.72,
    -0.64,
    0.27,
    -0.58,
    -0.8,
    0.17,
    0.97,
    -0.23,
    0,
    0.99,
    -0.15,
    -0.06,
    0.99,
    -0.15,
    0.06,
    1,
    -0,
    -0,
    0,
    -0.92,
    0.38,
    0,
    -0.99,
    0.17,
    0.58,
    -0.8,
    0.17,
    0.72,
    -0.64,
    0.27,
    -0,
    -0.92,
    -0.38,
    0,
    -0.99,
    -0.17,
    0.58,
    -0.8,
    -0.17,
    0.72,
    -0.64,
    -0.27,
    0.58,
    -0.8,
    0.17,
    0.72,
    -0.64,
    0.27,
    0.97,
    -0.23,
    0,
    0.99,
    -0.15,
    0.06,
    0.58,
    -0.8,
    0.17,
    0.58,
    -0.8,
    -0.17,
    0.97,
    -0.23,
    0,
    0,
    -0.99,
    0.17,
    0,
    -0.99,
    -0.17,
    0.58,
    -0.8,
    0.17,
    0.58,
    -0.8,
    -0.17,
    0.58,
    -0.8,
    -0.17,
    0.72,
    -0.64,
    -0.27,
    0.97,
    -0.23,
    0,
    0.99,
    -0.15,
    -0.06,
    -1,
    0,
    0,
    -0.99,
    -0.15,
    0.06,
    -0.99,
    -0.06,
    0.15,
    -0.97,
    -0.16,
    0.16,
    -0.72,
    -0.64,
    0.27,
    -0.58,
    -0.68,
    0.45,
    0,
    -0.92,
    0.38,
    0,
    -0.82,
    0.58,
    -0.72,
    -0.27,
    0.64,
    -0.58,
    -0.45,
    0.68,
    -0,
    -0.58,
    0.82,
    0,
    -0.38,
    0.92,
    -0.99,
    -0.15,
    0.06,
    -0.97,
    -0.16,
    0.16,
    -0.72,
    -0.64,
    0.27,
    -0.58,
    -0.68,
    0.45,
    -0.97,
    -0.16,
    0.16,
    -0.58,
    -0.68,
    0.45,
    -0.58,
    -0.45,
    0.68,
    -0.58,
    -0.68,
    0.45,
    -0.58,
    -0.45,
    0.68,
    -0,
    -0.58,
    0.82,
    0,
    -0.82,
    0.58,
    -0.99,
    -0.06,
    0.15,
    -0.97,
    -0.16,
    0.16,
    -0.72,
    -0.27,
    0.64,
    -0.58,
    -0.45,
    0.68,
    0.97,
    -0.16,
    0.16,
    0.99,
    -0.06,
    0.15,
    0.99,
    -0.15,
    0.06,
    1,
    -0,
    -0,
    -0,
    -0.58,
    0.82,
    0,
    -0.38,
    0.92,
    0.58,
    -0.45,
    0.68,
    0.72,
    -0.27,
    0.64,
    0,
    -0.92,
    0.38,
    0,
    -0.82,
    0.58,
    0.58,
    -0.68,
    0.45,
    0.72,
    -0.64,
    0.27,
    0.58,
    -0.45,
    0.68,
    0.72,
    -0.27,
    0.64,
    0.97,
    -0.16,
    0.16,
    0.99,
    -0.06,
    0.15,
    0.58,
    -0.68,
    0.45,
    0.58,
    -0.45,
    0.68,
    0.97,
    -0.16,
    0.16,
    -0,
    -0.58,
    0.82,
    0,
    -0.82,
    0.58,
    0.58,
    -0.68,
    0.45,
    0.58,
    -0.45,
    0.68,
    0.58,
    -0.68,
    0.45,
    0.72,
    -0.64,
    0.27,
    0.97,
    -0.16,
    0.16,
    0.99,
    -0.15,
    0.06,
    -1,
    0,
    0,
    -0.99,
    -0.06,
    0.15,
    -0.99,
    0.06,
    0.15,
    -0.97,
    0,
    0.23,
    -0.72,
    -0.27,
    0.64,
    -0.58,
    -0.17,
    0.8,
    0,
    -0.38,
    0.92,
    0,
    -0.17,
    0.99,
    -0.72,
    0.27,
    0.64,
    -0.58,
    0.17,
    0.8,
    -0,
    0.17,
    0.99,
    0,
    0.38,
    0.92,
    -0.99,
    -0.06,
    0.15,
    -0.97,
    0,
    0.23,
    -0.72,
    -0.27,
    0.64,
    -0.58,
    -0.17,
    0.8,
    -0.97,
    0,
    0.23,
    -0.58,
    0.17,
    0.8,
    -0.58,
    -0.17,
    0.8,
    -0.58,
    0.17,
    0.8,
    -0.58,
    -0.17,
    0.8,
    -0,
    0.17,
    0.99,
    0,
    -0.17,
    0.99,
    -0.99,
    0.06,
    0.15,
    -0.97,
    0,
    0.23,
    -0.72,
    0.27,
    0.64,
    -0.58,
    0.17,
    0.8,
    0.97,
    -0,
    0.23,
    0.99,
    -0.06,
    0.15,
    0.99,
    0.06,
    0.15,
    1,
    -0,
    -0,
    -0,
    0.17,
    0.99,
    0,
    0.38,
    0.92,
    0.58,
    0.17,
    0.8,
    0.72,
    0.27,
    0.64,
    0,
    -0.38,
    0.92,
    0,
    -0.17,
    0.99,
    0.58,
    -0.17,
    0.8,
    0.72,
    -0.27,
    0.64,
    0.58,
    0.17,
    0.8,
    0.72,
    0.27,
    0.64,
    0.97,
    -0,
    0.23,
    0.99,
    0.06,
    0.15,
    0.58,
    -0.17,
    0.8,
    0.58,
    0.17,
    0.8,
    0.97,
    -0,
    0.23,
    -0,
    0.17,
    0.99,
    0,
    -0.17,
    0.99,
    0.58,
    -0.17,
    0.8,
    0.58,
    0.17,
    0.8,
    0.58,
    -0.17,
    0.8,
    0.72,
    -0.27,
    0.64,
    0.97,
    -0,
    0.23,
    0.99,
    -0.06,
    0.15,
    -1,
    0,
    0,
    -0.99,
    0.15,
    0.06,
    -0.99,
    0.06,
    0.15,
    -0.97,
    0.16,
    0.16,
    -0.72,
    0.27,
    0.64,
    -0.58,
    0.45,
    0.68,
    0,
    0.58,
    0.82,
    0,
    0.38,
    0.92,
    -0.72,
    0.64,
    0.27,
    -0.58,
    0.68,
    0.45,
    -0,
    0.82,
    0.58,
    0,
    0.92,
    0.38,
    -0.99,
    0.06,
    0.15,
    -0.97,
    0.16,
    0.16,
    -0.72,
    0.27,
    0.64,
    -0.58,
    0.45,
    0.68,
    -0.97,
    0.16,
    0.16,
    -0.58,
    0.45,
    0.68,
    -0.58,
    0.68,
    0.45,
    -0.58,
    0.45,
    0.68,
    -0.58,
    0.68,
    0.45,
    -0,
    0.82,
    0.58,
    0,
    0.58,
    0.82,
    -0.99,
    0.15,
    0.06,
    -0.97,
    0.16,
    0.16,
    -0.72,
    0.64,
    0.27,
    -0.58,
    0.68,
    0.45,
    0.97,
    0.16,
    0.16,
    0.99,
    0.06,
    0.15,
    0.99,
    0.15,
    0.06,
    1,
    -0,
    -0,
    -0,
    0.82,
    0.58,
    0,
    0.92,
    0.38,
    0.58,
    0.68,
    0.45,
    0.72,
    0.64,
    0.27,
    0,
    0.58,
    0.82,
    0,
    0.38,
    0.92,
    0.58,
    0.45,
    0.68,
    0.72,
    0.27,
    0.64,
    0.58,
    0.68,
    0.45,
    0.72,
    0.64,
    0.27,
    0.97,
    0.16,
    0.16,
    0.99,
    0.15,
    0.06,
    0.58,
    0.68,
    0.45,
    0.58,
    0.45,
    0.68,
    0.97,
    0.16,
    0.16,
    -0,
    0.82,
    0.58,
    0,
    0.58,
    0.82,
    0.58,
    0.68,
    0.45,
    0.58,
    0.45,
    0.68,
    0.58,
    0.45,
    0.68,
    0.72,
    0.27,
    0.64,
    0.97,
    0.16,
    0.16,
    0.99,
    0.06,
    0.15,
    -1,
    0,
    0,
    -0.99,
    0.15,
    -0.06,
    -0.99,
    0.15,
    0.06,
    -0.97,
    0.23,
    0,
    -0.72,
    0.64,
    0.27,
    -0.58,
    0.8,
    0.17,
    -0,
    0.99,
    0.17,
    0,
    0.92,
    0.38,
    -0.72,
    0.64,
    -0.27,
    -0.58,
    0.8,
    -0.17,
    0,
    0.92,
    -0.38,
    0,
    0.99,
    -0.17,
    -0.99,
    0.15,
    0.06,
    -0.97,
    0.23,
    0,
    -0.72,
    0.64,
    0.27,
    -0.58,
    0.8,
    0.17,
    -0.97,
    0.23,
    0,
    -0.58,
    0.8,
    -0.17,
    -0.58,
    0.8,
    0.17,
    -0.58,
    0.8,
    -0.17,
    -0.58,
    0.8,
    0.17,
    -0,
    0.99,
    0.17,
    0,
    0.99,
    -0.17,
    -0.99,
    0.15,
    -0.06,
    -0.97,
    0.23,
    0,
    -0.72,
    0.64,
    -0.27,
    -0.58,
    0.8,
    -0.17,
    0.97,
    0.23,
    0,
    0.99,
    0.15,
    0.06,
    0.99,
    0.15,
    -0.06,
    1,
    -0,
    -0,
    0,
    0.92,
    -0.38,
    0,
    0.99,
    -0.17,
    0.58,
    0.8,
    -0.17,
    0.72,
    0.64,
    -0.27,
    -0,
    0.99,
    0.17,
    0,
    0.92,
    0.38,
    0.58,
    0.8,
    0.17,
    0.72,
    0.64,
    0.27,
    0.58,
    0.8,
    -0.17,
    0.72,
    0.64,
    -0.27,
    0.97,
    0.23,
    0,
    0.99,
    0.15,
    -0.06,
    0.58,
    0.8,
    0.17,
    0.58,
    0.8,
    -0.17,
    0.97,
    0.23,
    0,
    -0,
    0.99,
    0.17,
    0,
    0.99,
    -0.17,
    0.58,
    0.8,
    0.17,
    0.58,
    0.8,
    -0.17,
    0.58,
    0.8,
    0.17,
    0.72,
    0.64,
    0.27,
    0.97,
    0.23,
    0,
    0.99,
    0.15,
    0.06,
    -1,
    0,
    0,
    -0.99,
    0.15,
    -0.06,
    -0.99,
    0.06,
    -0.16,
    -0.97,
    0.16,
    -0.16,
    -0.72,
    0.64,
    -0.27,
    -0.58,
    0.68,
    -0.45,
    0,
    0.92,
    -0.38,
    0,
    0.82,
    -0.58,
    -0.75,
    0.23,
    -0.61,
    -0.58,
    0.45,
    -0.68,
    0,
    0.38,
    -0.92,
    0,
    0.58,
    -0.82,
    -0.99,
    0.15,
    -0.06,
    -0.97,
    0.16,
    -0.16,
    -0.72,
    0.64,
    -0.27,
    -0.58,
    0.68,
    -0.45,
    -0.97,
    0.16,
    -0.16,
    -0.58,
    0.45,
    -0.68,
    -0.58,
    0.68,
    -0.45,
    -0.58,
    0.45,
    -0.68,
    -0.58,
    0.68,
    -0.45,
    0,
    0.58,
    -0.82,
    0,
    0.82,
    -0.58,
    -0.99,
    0.06,
    -0.16,
    -0.97,
    0.16,
    -0.16,
    -0.75,
    0.23,
    -0.61,
    -0.58,
    0.45,
    -0.68,
    0.97,
    0.16,
    -0.16,
    0.99,
    0.06,
    -0.16,
    0.99,
    0.15,
    -0.06,
    1,
    -0,
    -0,
    0,
    0.38,
    -0.92,
    0,
    0.58,
    -0.82,
    0.58,
    0.45,
    -0.68,
    0.75,
    0.23,
    -0.61,
    0,
    0.92,
    -0.38,
    0,
    0.82,
    -0.58,
    0.58,
    0.68,
    -0.45,
    0.72,
    0.64,
    -0.27,
    0.58,
    0.45,
    -0.68,
    0.75,
    0.23,
    -0.61,
    0.97,
    0.16,
    -0.16,
    0.99,
    0.06,
    -0.16,
    0.58,
    0.68,
    -0.45,
    0.58,
    0.45,
    -0.68,
    0.97,
    0.16,
    -0.16,
    0,
    0.58,
    -0.82,
    0,
    0.82,
    -0.58,
    0.58,
    0.68,
    -0.45,
    0.58,
    0.45,
    -0.68,
    0.58,
    0.68,
    -0.45,
    0.72,
    0.64,
    -0.27,
    0.97,
    0.16,
    -0.16,
    0.99,
    0.15,
    -0.06
  ]);
  var texcoord_arr4 = Float32Array.from([
    0.75,
    0.58,
    0.75,
    0.58,
    0.75,
    0.58,
    0.75,
    0.58,
    0.05,
    0.36,
    0.05,
    0.36,
    0.05,
    0.36,
    0.05,
    0.36,
    0.95,
    0.36,
    0.95,
    0.36,
    0.95,
    0.36,
    0.95,
    0.36,
    0.7,
    0.53,
    0.7,
    0.53,
    0.04,
    0.5,
    0.04,
    0.5,
    0.74,
    0.51,
    0.99,
    0.5,
    0,
    0.44,
    1,
    0.36,
    0,
    0.36,
    0,
    0.36,
    1,
    0.36,
    0.8,
    0.53,
    0.8,
    0.53,
    0.96,
    0.5,
    0.96,
    0.5,
    0.25,
    0.58,
    0.25,
    0.58,
    0.25,
    0.58,
    0.25,
    0.58,
    0.95,
    0.14,
    0.95,
    0.14,
    0.95,
    0.14,
    0.95,
    0.14,
    0.05,
    0.14,
    0.05,
    0.14,
    0.05,
    0.14,
    0.05,
    0.14,
    0.96,
    0,
    0.96,
    0,
    0.3,
    0.53,
    0.3,
    0.53,
    1,
    0.06,
    0.01,
    0,
    0.26,
    0.51,
    0,
    0.14,
    1,
    0.14,
    1,
    0.14,
    0,
    0.14,
    0.04,
    0,
    0.04,
    0,
    0.2,
    0.53,
    0.2,
    0.53,
    0.87,
    0.63,
    0.87,
    0.63,
    0.87,
    0.63,
    0.87,
    0.63,
    0.92,
    0.36,
    0.92,
    0.36,
    0.92,
    0.36,
    0.92,
    0.36,
    0.83,
    0.36,
    0.83,
    0.36,
    0.83,
    0.36,
    0.83,
    0.36,
    0.88,
    0.56,
    0.88,
    0.56,
    0.91,
    0.5,
    0.91,
    0.5,
    0.91,
    0.58,
    0.88,
    0.44,
    0.87,
    0.5,
    0.88,
    0.36,
    0.88,
    0.36,
    0.88,
    0.36,
    0.88,
    0.36,
    0.94,
    0.62,
    0.94,
    0.62,
    0.84,
    0.5,
    0.84,
    0.5,
    0.37,
    0.63,
    0.37,
    0.63,
    0.37,
    0.63,
    0.37,
    0.63,
    0.83,
    0.14,
    0.83,
    0.14,
    0.83,
    0.14,
    0.83,
    0.14,
    0.92,
    0.14,
    0.92,
    0.14,
    0.92,
    0.14,
    0.92,
    0.14,
    0.84,
    0,
    0.84,
    0,
    0.44,
    0.62,
    0.44,
    0.62,
    0.88,
    0.06,
    0.88,
    0,
    0.42,
    0.59,
    0.88,
    0.14,
    0.88,
    0.14,
    0.88,
    0.14,
    0.88,
    0.14,
    0.91,
    0,
    0.91,
    0,
    0.38,
    0.56,
    0.38,
    0.56,
    0.92,
    0.75,
    0.92,
    0.75,
    0.92,
    0.75,
    0.92,
    0.75,
    0.8,
    0.36,
    0.8,
    0.36,
    0.8,
    0.36,
    0.8,
    0.36,
    0.7,
    0.36,
    0.7,
    0.36,
    0.7,
    0.36,
    0.7,
    0.36,
    0.97,
    0.71,
    0.97,
    0.71,
    0.78,
    0.5,
    0.78,
    0.5,
    0.99,
    0.74,
    0.75,
    0.44,
    0.74,
    0.5,
    0.75,
    0.36,
    0.75,
    0.36,
    0.75,
    0.36,
    0.75,
    0.36,
    0.97,
    0.79,
    0.97,
    0.79,
    0.72,
    0.5,
    0.72,
    0.5,
    0.42,
    0.75,
    0.42,
    0.75,
    0.42,
    0.75,
    0.42,
    0.75,
    0.7,
    0.14,
    0.7,
    0.14,
    0.7,
    0.14,
    0.7,
    0.14,
    0.8,
    0.14,
    0.8,
    0.14,
    0.8,
    0.14,
    0.8,
    0.14,
    0.72,
    0,
    0.72,
    0,
    0.47,
    0.79,
    0.47,
    0.79,
    0.75,
    0.06,
    0.76,
    0,
    0.49,
    0.76,
    0.75,
    0.14,
    0.75,
    0.14,
    0.75,
    0.14,
    0.75,
    0.14,
    0.78,
    0,
    0.78,
    0,
    0.47,
    0.71,
    0.47,
    0.71,
    0.87,
    0.87,
    0.87,
    0.87,
    0.87,
    0.87,
    0.87,
    0.87,
    0.67,
    0.36,
    0.67,
    0.36,
    0.67,
    0.36,
    0.67,
    0.36,
    0.58,
    0.36,
    0.58,
    0.36,
    0.58,
    0.36,
    0.58,
    0.36,
    0.94,
    0.88,
    0.94,
    0.88,
    0.66,
    0.5,
    0.66,
    0.5,
    0.92,
    0.91,
    0.63,
    0.44,
    0.62,
    0.5,
    0.63,
    0.36,
    0.63,
    0.36,
    0.63,
    0.36,
    0.63,
    0.36,
    0.88,
    0.94,
    0.88,
    0.94,
    0.59,
    0.5,
    0.59,
    0.5,
    0.37,
    0.87,
    0.37,
    0.87,
    0.37,
    0.87,
    0.37,
    0.87,
    0.58,
    0.14,
    0.58,
    0.14,
    0.58,
    0.14,
    0.58,
    0.14,
    0.67,
    0.14,
    0.67,
    0.14,
    0.67,
    0.14,
    0.67,
    0.14,
    0.59,
    0,
    0.59,
    0,
    0.38,
    0.94,
    0.38,
    0.94,
    0.63,
    0,
    0.63,
    0.06,
    0.41,
    0.92,
    0.63,
    0.14,
    0.63,
    0.14,
    0.63,
    0.14,
    0.63,
    0.14,
    0.66,
    0,
    0.66,
    0,
    0.44,
    0.88,
    0.44,
    0.88,
    0.75,
    0.92,
    0.75,
    0.92,
    0.75,
    0.92,
    0.75,
    0.92,
    0.55,
    0.36,
    0.55,
    0.36,
    0.55,
    0.36,
    0.55,
    0.36,
    0.45,
    0.36,
    0.45,
    0.36,
    0.45,
    0.36,
    0.45,
    0.36,
    0.79,
    0.97,
    0.79,
    0.97,
    0.53,
    0.5,
    0.53,
    0.5,
    0.76,
    0.99,
    0.49,
    0.5,
    0.5,
    0.44,
    0.5,
    0.36,
    0.5,
    0.36,
    0.5,
    0.36,
    0.5,
    0.36,
    0.71,
    0.97,
    0.71,
    0.97,
    0.47,
    0.5,
    0.47,
    0.5,
    0.25,
    0.92,
    0.25,
    0.92,
    0.25,
    0.92,
    0.25,
    0.92,
    0.45,
    0.14,
    0.45,
    0.14,
    0.45,
    0.14,
    0.45,
    0.14,
    0.55,
    0.14,
    0.55,
    0.14,
    0.55,
    0.14,
    0.55,
    0.14,
    0.47,
    0,
    0.47,
    0,
    0.21,
    0.97,
    0.21,
    0.97,
    0.51,
    0,
    0.5,
    0.06,
    0.24,
    0.99,
    0.5,
    0.14,
    0.5,
    0.14,
    0.5,
    0.14,
    0.5,
    0.14,
    0.53,
    0,
    0.53,
    0,
    0.29,
    0.97,
    0.29,
    0.97,
    0.63,
    0.87,
    0.63,
    0.87,
    0.63,
    0.87,
    0.63,
    0.87,
    0.42,
    0.36,
    0.42,
    0.36,
    0.42,
    0.36,
    0.42,
    0.36,
    0.33,
    0.36,
    0.33,
    0.36,
    0.33,
    0.36,
    0.33,
    0.36,
    0.62,
    0.94,
    0.62,
    0.94,
    0.41,
    0.5,
    0.41,
    0.5,
    0.59,
    0.92,
    0.38,
    0.44,
    0.37,
    0.5,
    0.38,
    0.36,
    0.38,
    0.36,
    0.38,
    0.36,
    0.38,
    0.36,
    0.56,
    0.88,
    0.56,
    0.88,
    0.34,
    0.5,
    0.34,
    0.5,
    0.13,
    0.87,
    0.13,
    0.87,
    0.13,
    0.87,
    0.13,
    0.87,
    0.33,
    0.14,
    0.33,
    0.14,
    0.33,
    0.14,
    0.33,
    0.14,
    0.42,
    0.14,
    0.42,
    0.14,
    0.42,
    0.14,
    0.42,
    0.14,
    0.34,
    0,
    0.34,
    0,
    0.06,
    0.88,
    0.06,
    0.88,
    0.38,
    0.06,
    0.38,
    0,
    0.08,
    0.91,
    0.38,
    0.14,
    0.38,
    0.14,
    0.38,
    0.14,
    0.38,
    0.14,
    0.41,
    0,
    0.41,
    0,
    0.12,
    0.94,
    0.12,
    0.94,
    0.58,
    0.75,
    0.58,
    0.75,
    0.58,
    0.75,
    0.58,
    0.75,
    0.3,
    0.36,
    0.3,
    0.36,
    0.3,
    0.36,
    0.3,
    0.36,
    0.2,
    0.36,
    0.2,
    0.36,
    0.2,
    0.36,
    0.2,
    0.36,
    0.53,
    0.79,
    0.53,
    0.79,
    0.28,
    0.5,
    0.28,
    0.5,
    0.51,
    0.76,
    0.24,
    0.5,
    0.25,
    0.44,
    0.25,
    0.36,
    0.25,
    0.36,
    0.25,
    0.36,
    0.25,
    0.36,
    0.53,
    0.71,
    0.53,
    0.71,
    0.22,
    0.5,
    0.22,
    0.5,
    0.08,
    0.75,
    0.08,
    0.75,
    0.08,
    0.75,
    0.08,
    0.75,
    0.2,
    0.14,
    0.2,
    0.14,
    0.2,
    0.14,
    0.2,
    0.14,
    0.3,
    0.14,
    0.3,
    0.14,
    0.3,
    0.14,
    0.3,
    0.14,
    0.22,
    0,
    0.22,
    0,
    0.03,
    0.71,
    0.03,
    0.71,
    0.26,
    0,
    0.25,
    0.06,
    0.01,
    0.74,
    0.25,
    0.14,
    0.25,
    0.14,
    0.25,
    0.14,
    0.25,
    0.14,
    0.28,
    0,
    0.28,
    0,
    0.03,
    0.79,
    0.03,
    0.79,
    0.63,
    0.63,
    0.63,
    0.63,
    0.63,
    0.63,
    0.63,
    0.63,
    0.17,
    0.36,
    0.17,
    0.36,
    0.17,
    0.36,
    0.17,
    0.36,
    0.08,
    0.36,
    0.08,
    0.36,
    0.08,
    0.36,
    0.08,
    0.36,
    0.56,
    0.62,
    0.56,
    0.62,
    0.16,
    0.5,
    0.16,
    0.5,
    0.58,
    0.59,
    0.12,
    0.5,
    0.13,
    0.44,
    0.13,
    0.36,
    0.13,
    0.36,
    0.13,
    0.36,
    0.13,
    0.36,
    0.62,
    0.56,
    0.62,
    0.56,
    0.09,
    0.5,
    0.09,
    0.5,
    0.13,
    0.63,
    0.13,
    0.63,
    0.13,
    0.63,
    0.13,
    0.63,
    0.08,
    0.14,
    0.08,
    0.14,
    0.08,
    0.14,
    0.08,
    0.14,
    0.17,
    0.14,
    0.17,
    0.14,
    0.17,
    0.14,
    0.17,
    0.14,
    0.09,
    0,
    0.09,
    0,
    0.12,
    0.56,
    0.12,
    0.56,
    0.13,
    0,
    0.13,
    0.06,
    0.09,
    0.58,
    0.13,
    0.14,
    0.13,
    0.14,
    0.13,
    0.14,
    0.13,
    0.14,
    0.16,
    0,
    0.16,
    0,
    0.06,
    0.62,
    0.06,
    0.62
  ]);
  var weights_arr4 = Float32Array.from([]);
  var index_arr4 = Uint16Array.from([
    378,
    270,
    162,
    162,
    54,
    378,
    378,
    324,
    270,
    270,
    216,
    162,
    162,
    108,
    54,
    54,
    0,
    378,
    29,
    406,
    53,
    406,
    420,
    53,
    51,
    418,
    38,
    418,
    412,
    38,
    380,
    2,
    401,
    2,
    12,
    401,
    403,
    14,
    386,
    14,
    4,
    386,
    414,
    385,
    425,
    385,
    400,
    425,
    424,
    399,
    410,
    399,
    389,
    410,
    407,
    353,
    431,
    353,
    366,
    431,
    429,
    364,
    416,
    364,
    358,
    416,
    325,
    379,
    347,
    379,
    390,
    347,
    349,
    392,
    332,
    392,
    382,
    332,
    359,
    330,
    370,
    330,
    345,
    370,
    371,
    346,
    356,
    346,
    335,
    356,
    352,
    299,
    377,
    299,
    312,
    377,
    375,
    310,
    362,
    310,
    304,
    362,
    271,
    326,
    293,
    326,
    336,
    293,
    295,
    338,
    278,
    338,
    328,
    278,
    305,
    276,
    317,
    276,
    292,
    317,
    316,
    291,
    301,
    291,
    280,
    301,
    298,
    245,
    323,
    245,
    258,
    323,
    321,
    256,
    308,
    256,
    250,
    308,
    218,
    272,
    239,
    272,
    282,
    239,
    241,
    284,
    224,
    284,
    274,
    224,
    252,
    223,
    263,
    223,
    238,
    263,
    262,
    237,
    247,
    237,
    226,
    247,
    244,
    190,
    269,
    190,
    204,
    269,
    267,
    202,
    254,
    202,
    196,
    254,
    164,
    217,
    185,
    217,
    228,
    185,
    187,
    230,
    170,
    230,
    220,
    170,
    198,
    169,
    209,
    169,
    184,
    209,
    208,
    183,
    193,
    183,
    172,
    193,
    191,
    137,
    215,
    137,
    150,
    215,
    213,
    148,
    200,
    148,
    142,
    200,
    110,
    163,
    131,
    163,
    174,
    131,
    133,
    176,
    116,
    176,
    166,
    116,
    144,
    115,
    155,
    115,
    130,
    155,
    154,
    129,
    140,
    129,
    119,
    140,
    136,
    83,
    161,
    83,
    96,
    161,
    159,
    94,
    146,
    94,
    88,
    146,
    55,
    109,
    77,
    109,
    120,
    77,
    79,
    122,
    62,
    122,
    112,
    62,
    89,
    60,
    101,
    60,
    76,
    101,
    100,
    75,
    86,
    75,
    65,
    86,
    11,
    32,
    22,
    32,
    47,
    22,
    21,
    46,
    6,
    46,
    35,
    6,
    82,
    28,
    107,
    28,
    42,
    107,
    105,
    40,
    92,
    40,
    34,
    92,
    1,
    56,
    23,
    56,
    66,
    23,
    25,
    68,
    8,
    68,
    58,
    8,
    426,
    421,
    415,
    421,
    428,
    415,
    417,
    422,
    411,
    422,
    427,
    411,
    430,
    423,
    405,
    423,
    419,
    405,
    397,
    395,
    387,
    395,
    404,
    387,
    393,
    396,
    383,
    396,
    398,
    383,
    402,
    394,
    381,
    394,
    391,
    381,
    372,
    367,
    361,
    367,
    374,
    361,
    363,
    368,
    357,
    368,
    373,
    357,
    376,
    369,
    351,
    369,
    365,
    351,
    343,
    341,
    333,
    341,
    350,
    333,
    339,
    342,
    329,
    342,
    344,
    329,
    348,
    340,
    327,
    340,
    337,
    327,
    319,
    314,
    307,
    314,
    320,
    307,
    309,
    313,
    303,
    313,
    318,
    303,
    322,
    315,
    297,
    315,
    311,
    297,
    290,
    288,
    279,
    288,
    296,
    279,
    285,
    287,
    275,
    287,
    289,
    275,
    294,
    286,
    273,
    286,
    283,
    273,
    264,
    259,
    253,
    259,
    266,
    253,
    255,
    260,
    249,
    260,
    265,
    249,
    268,
    261,
    243,
    261,
    257,
    243,
    235,
    233,
    225,
    233,
    242,
    225,
    231,
    234,
    221,
    234,
    236,
    221,
    240,
    232,
    219,
    232,
    229,
    219,
    210,
    205,
    199,
    205,
    212,
    199,
    201,
    206,
    195,
    206,
    211,
    195,
    214,
    207,
    189,
    207,
    203,
    189,
    182,
    180,
    171,
    180,
    188,
    171,
    177,
    179,
    167,
    179,
    181,
    167,
    186,
    178,
    165,
    178,
    175,
    165,
    157,
    152,
    145,
    152,
    158,
    145,
    147,
    151,
    141,
    151,
    156,
    141,
    160,
    153,
    135,
    153,
    149,
    135,
    128,
    126,
    117,
    126,
    134,
    117,
    123,
    125,
    113,
    125,
    127,
    113,
    132,
    124,
    111,
    124,
    121,
    111,
    103,
    98,
    91,
    98,
    104,
    91,
    93,
    97,
    87,
    97,
    102,
    87,
    106,
    99,
    81,
    99,
    95,
    81,
    74,
    72,
    63,
    72,
    80,
    63,
    69,
    71,
    59,
    71,
    73,
    59,
    78,
    70,
    57,
    70,
    67,
    57,
    49,
    44,
    37,
    44,
    50,
    37,
    39,
    43,
    33,
    43,
    48,
    33,
    52,
    45,
    27,
    45,
    41,
    27,
    19,
    17,
    9,
    17,
    26,
    9,
    15,
    18,
    5,
    18,
    20,
    5,
    24,
    16,
    3,
    16,
    13,
    3,
    61,
    90,
    10,
    90,
    31,
    10,
    138,
    246,
    354,
    354,
    30,
    138,
    138,
    192,
    246,
    246,
    300,
    354,
    354,
    408,
    30,
    30,
    84,
    138,
    114,
    143,
    64,
    143,
    85,
    64,
    384,
    413,
    334,
    413,
    355,
    334,
    331,
    360,
    281,
    360,
    302,
    281,
    277,
    306,
    227,
    306,
    248,
    227,
    222,
    251,
    173,
    251,
    194,
    173,
    168,
    197,
    118,
    197,
    139,
    118,
    7,
    36,
    388,
    36,
    409,
    388
  ]);

  // ../common/math.ts
  var EPSILON = 1e-6;
  var DEG_TO_RAD = Math.PI / 180;
  var RAD_TO_DEG = 180 / Math.PI;

  // ../common/number.ts
  function clamp(min, max, num) {
    return Math.max(min, Math.min(max, num));
  }

  // ../common/vec3.ts
  function set(out, x, y, z) {
    out[0] = x;
    out[1] = y;
    out[2] = z;
    return out;
  }
  function copy(out, a2) {
    out[0] = a2[0];
    out[1] = a2[1];
    out[2] = a2[2];
    return out;
  }
  function add(out, a2, b) {
    out[0] = a2[0] + b[0];
    out[1] = a2[1] + b[1];
    out[2] = a2[2] + b[2];
    return out;
  }
  function subtract(out, a2, b) {
    out[0] = a2[0] - b[0];
    out[1] = a2[1] - b[1];
    out[2] = a2[2] - b[2];
    return out;
  }
  function scale(out, a2, b) {
    out[0] = a2[0] * b;
    out[1] = a2[1] * b;
    out[2] = a2[2] * b;
    return out;
  }
  function negate(out, a2) {
    out[0] = -a2[0];
    out[1] = -a2[1];
    out[2] = -a2[2];
    return out;
  }
  function normalize(out, a2) {
    let x = a2[0];
    let y = a2[1];
    let z = a2[2];
    let len = x * x + y * y + z * z;
    if (len > 0) {
      len = 1 / Math.sqrt(len);
    }
    out[0] = a2[0] * len;
    out[1] = a2[1] * len;
    out[2] = a2[2] * len;
    return out;
  }
  function dot(a2, b) {
    return a2[0] * b[0] + a2[1] * b[1] + a2[2] * b[2];
  }
  function cross(out, a2, b) {
    let ax = a2[0], ay = a2[1], az = a2[2];
    let bx = b[0], by = b[1], bz = b[2];
    out[0] = ay * bz - az * by;
    out[1] = az * bx - ax * bz;
    out[2] = ax * by - ay * bx;
    return out;
  }
  function transform_position(out, a2, m) {
    let x = a2[0];
    let y = a2[1];
    let z = a2[2];
    let w = m[3] * x + m[7] * y + m[11] * z + m[15] || 1;
    out[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) / w;
    out[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) / w;
    out[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) / w;
    return out;
  }
  function transform_direction(out, a2, m) {
    let x = a2[0];
    let y = a2[1];
    let z = a2[2];
    out[0] = m[0] * x + m[4] * y + m[8] * z;
    out[1] = m[1] * x + m[5] * y + m[9] * z;
    out[2] = m[2] * x + m[6] * y + m[10] * z;
    return out;
  }
  function length(a2) {
    let x = a2[0];
    let y = a2[1];
    let z = a2[2];
    return Math.hypot(x, y, z);
  }
  function lerp(out, a2, b, t) {
    let ax = a2[0];
    let ay = a2[1];
    let az = a2[2];
    out[0] = ax + t * (b[0] - ax);
    out[1] = ay + t * (b[1] - ay);
    out[2] = az + t * (b[2] - az);
    return out;
  }

  // ../common/quat.ts
  function set2(out, x, y, z, w) {
    out[0] = x;
    out[1] = y;
    out[2] = z;
    out[3] = w;
    return out;
  }
  function normalize2(out, a2) {
    let x = a2[0];
    let y = a2[1];
    let z = a2[2];
    let w = a2[3];
    let len = x * x + y * y + z * z + w * w;
    if (len > 0) {
      len = 1 / Math.sqrt(len);
    }
    out[0] = x * len;
    out[1] = y * len;
    out[2] = z * len;
    out[3] = w * len;
    return out;
  }
  function multiply(out, a2, b) {
    let ax = a2[0], ay = a2[1], az = a2[2], aw = a2[3];
    let bx = b[0], by = b[1], bz = b[2], bw = b[3];
    out[0] = ax * bw + aw * bx + ay * bz - az * by;
    out[1] = ay * bw + aw * by + az * bx - ax * bz;
    out[2] = az * bw + aw * bz + ax * by - ay * bx;
    out[3] = aw * bw - ax * bx - ay * by - az * bz;
    return out;
  }
  function from_euler(out, x, y, z) {
    let sx = Math.sin(x / 2 * DEG_TO_RAD);
    let cx = Math.cos(x / 2 * DEG_TO_RAD);
    let sy = Math.sin(y / 2 * DEG_TO_RAD);
    let cy = Math.cos(y / 2 * DEG_TO_RAD);
    let sz = Math.sin(z / 2 * DEG_TO_RAD);
    let cz = Math.cos(z / 2 * DEG_TO_RAD);
    out[0] = sx * cy * cz + cx * sy * sz;
    out[1] = cx * sy * cz - sx * cy * sz;
    out[2] = cx * cy * sz - sx * sy * cz;
    out[3] = cx * cy * cz + sx * sy * sz;
    return out;
  }
  function get_pitch(quat) {
    let x = quat[0];
    let y = quat[1];
    let z = quat[2];
    let w = quat[3];
    let m23 = 2 * (y * z - w * x);
    return Math.asin(-clamp(-1, 1, m23)) * RAD_TO_DEG;
  }
  function from_axis(out, axis, angle) {
    let half = angle / 2;
    out[0] = Math.sin(half) * axis[0];
    out[1] = Math.sin(half) * axis[1];
    out[2] = Math.sin(half) * axis[2];
    out[3] = Math.cos(half);
    return out;
  }
  var rotation_to = function() {
    let tmpvec3 = [0, 0, 0];
    let xUnitVec3 = [1, 0, 0];
    let yUnitVec3 = [0, 1, 0];
    return function(out, a2, b) {
      let d = dot(a2, b);
      if (d < -0.999999) {
        cross(tmpvec3, xUnitVec3, a2);
        if (length(tmpvec3) < 1e-6)
          cross(tmpvec3, yUnitVec3, a2);
        normalize(tmpvec3, tmpvec3);
        from_axis(out, tmpvec3, Math.PI);
        return out;
      } else if (d > 0.999999) {
        out[0] = 0;
        out[1] = 0;
        out[2] = 0;
        out[3] = 1;
        return out;
      } else {
        cross(tmpvec3, a2, b);
        out[0] = tmpvec3[0];
        out[1] = tmpvec3[1];
        out[2] = tmpvec3[2];
        out[3] = 1 + d;
        return normalize2(out, out);
      }
    };
  }();
  function slerp(out, a2, b, t) {
    let ax = a2[0], ay = a2[1], az = a2[2], aw = a2[3];
    let bx = b[0], by = b[1], bz = b[2], bw = b[3];
    let omega, cosom, sinom, scale0, scale1;
    cosom = ax * bx + ay * by + az * bz + aw * bw;
    if (cosom < 0) {
      cosom = -cosom;
      bx = -bx;
      by = -by;
      bz = -bz;
      bw = -bw;
    }
    if (1 - cosom > EPSILON) {
      omega = Math.acos(cosom);
      sinom = Math.sin(omega);
      scale0 = Math.sin((1 - t) * omega) / sinom;
      scale1 = Math.sin(t * omega) / sinom;
    } else {
      scale0 = 1 - t;
      scale1 = t;
    }
    out[0] = scale0 * ax + scale1 * bx;
    out[1] = scale0 * ay + scale1 * by;
    out[2] = scale0 * az + scale1 * bz;
    out[3] = scale0 * aw + scale1 * bw;
    return out;
  }

  // ../src/components/com_animate.ts
  function animate(clips) {
    return (game2, entity) => {
      let States = {};
      for (let name in clips) {
        let { Keyframes, Flags = AnimationFlag.Default } = clips[name];
        let duration = Keyframes[Keyframes.length - 1].Timestamp;
        States[name] = {
          Keyframes: Keyframes.map((keyframe) => ({ ...keyframe })),
          Flags,
          Duration: duration,
          Time: 0
        };
      }
      game2.World.Signature[entity] |= 1 /* Animate */;
      game2.World.Animate[entity] = {
        States,
        Current: States["idle"]
      };
    };
  }
  var AnimationFlag = /* @__PURE__ */ ((AnimationFlag2) => {
    AnimationFlag2[AnimationFlag2["None"] = 0] = "None";
    AnimationFlag2[AnimationFlag2["EarlyExit"] = 1] = "EarlyExit";
    AnimationFlag2[AnimationFlag2["Loop"] = 2] = "Loop";
    AnimationFlag2[AnimationFlag2["Alternate"] = 4] = "Alternate";
    AnimationFlag2[AnimationFlag2["Default"] = 7] = "Default";
    return AnimationFlag2;
  })(AnimationFlag || {});

  // ../src/systems/sys_animate.ts
  var QUERY = 4194304 /* Transform */ | 1 /* Animate */;
  function sys_animate(game2, delta) {
    for (let i = 0; i < game2.World.Signature.length; i++) {
      if ((game2.World.Signature[i] & QUERY) === QUERY) {
        update(game2, i, delta);
      }
    }
  }
  function update(game2, entity, delta) {
    let transform2 = game2.World.Transform[entity];
    let animate2 = game2.World.Animate[entity];
    if (animate2.Trigger) {
      let next = animate2.States[animate2.Trigger];
      if (next && next !== animate2.Current) {
        if (animate2.Current.Time === 0) {
          animate2.Current = next;
        } else if (animate2.Current.Flags & 1 /* EarlyExit */) {
          animate2.Current.Time = 0;
          animate2.Current = next;
        }
      }
      animate2.Trigger = void 0;
    }
    let current_keyframe = null;
    let next_keyframe = null;
    for (let keyframe of animate2.Current.Keyframes) {
      if (animate2.Current.Time < keyframe.Timestamp) {
        next_keyframe = keyframe;
        break;
      } else {
        current_keyframe = keyframe;
      }
    }
    if (current_keyframe && next_keyframe) {
      let keyframe_duration = next_keyframe.Timestamp - current_keyframe.Timestamp;
      let current_keyframe_time = animate2.Current.Time - current_keyframe.Timestamp;
      let interpolant = current_keyframe_time / keyframe_duration;
      if (next_keyframe.Ease) {
        interpolant = next_keyframe.Ease(interpolant);
      }
      if (current_keyframe.Translation && next_keyframe.Translation) {
        lerp(transform2.Translation, current_keyframe.Translation, next_keyframe.Translation, interpolant);
        game2.World.Signature[entity] |= 256 /* Dirty */;
      }
      if (current_keyframe.Rotation && next_keyframe.Rotation) {
        slerp(transform2.Rotation, current_keyframe.Rotation, next_keyframe.Rotation, interpolant);
        game2.World.Signature[entity] |= 256 /* Dirty */;
      }
      if (current_keyframe.Scale && next_keyframe.Scale) {
        lerp(transform2.Scale, current_keyframe.Scale, next_keyframe.Scale, interpolant);
        game2.World.Signature[entity] |= 256 /* Dirty */;
      }
    }
    let new_time = animate2.Current.Time + delta;
    if (new_time < animate2.Current.Duration) {
      animate2.Current.Time = new_time;
      return;
    } else {
      animate2.Current.Time = 0;
    }
    if (animate2.Current.Flags & 4 /* Alternate */) {
      for (let keyframe of animate2.Current.Keyframes.reverse()) {
        keyframe.Timestamp = animate2.Current.Duration - keyframe.Timestamp;
      }
    }
    if (!(animate2.Current.Flags & 2 /* Loop */)) {
      animate2.Current = animate2.States["idle"];
    }
  }

  // ../common/mat4.ts
  function create() {
    return [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1];
  }
  function copy2(out, a2) {
    out[0] = a2[0];
    out[1] = a2[1];
    out[2] = a2[2];
    out[3] = a2[3];
    out[4] = a2[4];
    out[5] = a2[5];
    out[6] = a2[6];
    out[7] = a2[7];
    out[8] = a2[8];
    out[9] = a2[9];
    out[10] = a2[10];
    out[11] = a2[11];
    out[12] = a2[12];
    out[13] = a2[13];
    out[14] = a2[14];
    out[15] = a2[15];
    return out;
  }
  function invert(out, a2) {
    let a00 = a2[0], a01 = a2[1], a02 = a2[2], a03 = a2[3];
    let a10 = a2[4], a11 = a2[5], a12 = a2[6], a13 = a2[7];
    let a20 = a2[8], a21 = a2[9], a22 = a2[10], a23 = a2[11];
    let a30 = a2[12], a31 = a2[13], a32 = a2[14], a33 = a2[15];
    let b00 = a00 * a11 - a01 * a10;
    let b01 = a00 * a12 - a02 * a10;
    let b02 = a00 * a13 - a03 * a10;
    let b03 = a01 * a12 - a02 * a11;
    let b04 = a01 * a13 - a03 * a11;
    let b05 = a02 * a13 - a03 * a12;
    let b06 = a20 * a31 - a21 * a30;
    let b07 = a20 * a32 - a22 * a30;
    let b08 = a20 * a33 - a23 * a30;
    let b09 = a21 * a32 - a22 * a31;
    let b10 = a21 * a33 - a23 * a31;
    let b11 = a22 * a33 - a23 * a32;
    let det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;
    if (!det) {
      return null;
    }
    det = 1 / det;
    out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;
    out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;
    out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;
    out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;
    out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;
    out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;
    out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;
    out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;
    out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;
    out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;
    out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;
    out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;
    out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;
    out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;
    out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;
    out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;
    return out;
  }
  function multiply2(out, a2, b) {
    let a00 = a2[0], a01 = a2[1], a02 = a2[2], a03 = a2[3];
    let a10 = a2[4], a11 = a2[5], a12 = a2[6], a13 = a2[7];
    let a20 = a2[8], a21 = a2[9], a22 = a2[10], a23 = a2[11];
    let a30 = a2[12], a31 = a2[13], a32 = a2[14], a33 = a2[15];
    let b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3];
    out[0] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
    out[1] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
    out[2] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
    out[3] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
    b0 = b[4];
    b1 = b[5];
    b2 = b[6];
    b3 = b[7];
    out[4] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
    out[5] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
    out[6] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
    out[7] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
    b0 = b[8];
    b1 = b[9];
    b2 = b[10];
    b3 = b[11];
    out[8] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
    out[9] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
    out[10] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
    out[11] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
    b0 = b[12];
    b1 = b[13];
    b2 = b[14];
    b3 = b[15];
    out[12] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
    out[13] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
    out[14] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
    out[15] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
    return out;
  }
  function from_rotation_translation_scale(out, q, v, s) {
    let x = q[0], y = q[1], z = q[2], w = q[3];
    let x2 = x + x;
    let y2 = y + y;
    let z2 = z + z;
    let xx = x * x2;
    let xy = x * y2;
    let xz = x * z2;
    let yy = y * y2;
    let yz = y * z2;
    let zz = z * z2;
    let wx = w * x2;
    let wy = w * y2;
    let wz = w * z2;
    let sx = s[0];
    let sy = s[1];
    let sz = s[2];
    out[0] = (1 - (yy + zz)) * sx;
    out[1] = (xy + wz) * sx;
    out[2] = (xz - wy) * sx;
    out[3] = 0;
    out[4] = (xy - wz) * sy;
    out[5] = (1 - (xx + zz)) * sy;
    out[6] = (yz + wx) * sy;
    out[7] = 0;
    out[8] = (xz + wy) * sz;
    out[9] = (yz - wx) * sz;
    out[10] = (1 - (xx + yy)) * sz;
    out[11] = 0;
    out[12] = v[0];
    out[13] = v[1];
    out[14] = v[2];
    out[15] = 1;
    return out;
  }
  function from_perspective(out, fovy, aspect, near, far) {
    let f = 1 / Math.tan(fovy / 2), nf;
    out[0] = f / aspect;
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[4] = 0;
    out[5] = f;
    out[6] = 0;
    out[7] = 0;
    out[8] = 0;
    out[9] = 0;
    out[11] = -1;
    out[12] = 0;
    out[13] = 0;
    out[15] = 0;
    if (far != null && far !== Infinity) {
      nf = 1 / (near - far);
      out[10] = (far + near) * nf;
      out[14] = 2 * far * near * nf;
    } else {
      out[10] = -1;
      out[14] = -2 * near;
    }
    return out;
  }
  function from_ortho(out, top, right, bottom, left, near, far) {
    let lr = 1 / (left - right);
    let bt = 1 / (bottom - top);
    let nf = 1 / (near - far);
    out[0] = -2 * lr;
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[4] = 0;
    out[5] = -2 * bt;
    out[6] = 0;
    out[7] = 0;
    out[8] = 0;
    out[9] = 0;
    out[10] = 2 * nf;
    out[11] = 0;
    out[12] = (left + right) * lr;
    out[13] = (top + bottom) * bt;
    out[14] = (far + near) * nf;
    out[15] = 1;
    return out;
  }
  function get_up(out, mat) {
    out[0] = mat[4];
    out[1] = mat[5];
    out[2] = mat[6];
    return normalize(out, out);
  }
  function get_forward(out, mat) {
    out[0] = mat[8];
    out[1] = mat[9];
    out[2] = mat[10];
    return normalize(out, out);
  }
  function get_translation(out, mat) {
    out[0] = mat[12];
    out[1] = mat[13];
    out[2] = mat[14];
    return out;
  }
  function get_scaling(out, mat) {
    let m11 = mat[0];
    let m12 = mat[1];
    let m13 = mat[2];
    let m21 = mat[4];
    let m22 = mat[5];
    let m23 = mat[6];
    let m31 = mat[8];
    let m32 = mat[9];
    let m33 = mat[10];
    out[0] = Math.hypot(m11, m12, m13);
    out[1] = Math.hypot(m21, m22, m23);
    out[2] = Math.hypot(m31, m32, m33);
    return out;
  }
  function get_rotation(out, mat) {
    let scaling = get_scaling([0, 0, 0], mat);
    let is1 = 1 / scaling[0];
    let is2 = 1 / scaling[1];
    let is3 = 1 / scaling[2];
    let sm11 = mat[0] * is1;
    let sm12 = mat[1] * is2;
    let sm13 = mat[2] * is3;
    let sm21 = mat[4] * is1;
    let sm22 = mat[5] * is2;
    let sm23 = mat[6] * is3;
    let sm31 = mat[8] * is1;
    let sm32 = mat[9] * is2;
    let sm33 = mat[10] * is3;
    let trace = sm11 + sm22 + sm33;
    let S = 0;
    if (trace > 0) {
      S = Math.sqrt(trace + 1) * 2;
      out[3] = 0.25 * S;
      out[0] = (sm23 - sm32) / S;
      out[1] = (sm31 - sm13) / S;
      out[2] = (sm12 - sm21) / S;
    } else if (sm11 > sm22 && sm11 > sm33) {
      S = Math.sqrt(1 + sm11 - sm22 - sm33) * 2;
      out[3] = (sm23 - sm32) / S;
      out[0] = 0.25 * S;
      out[1] = (sm12 + sm21) / S;
      out[2] = (sm31 + sm13) / S;
    } else if (sm22 > sm33) {
      S = Math.sqrt(1 + sm22 - sm11 - sm33) * 2;
      out[3] = (sm31 - sm13) / S;
      out[0] = (sm12 + sm21) / S;
      out[1] = 0.25 * S;
      out[2] = (sm23 + sm32) / S;
    } else {
      S = Math.sqrt(1 + sm33 - sm11 - sm22) * 2;
      out[3] = (sm12 - sm21) / S;
      out[0] = (sm31 + sm13) / S;
      out[1] = (sm23 + sm32) / S;
      out[2] = 0.25 * S;
    }
    return out;
  }
  function distance_squared_from_point(m, v) {
    let x = m[12] - v[0];
    let y = m[13] - v[1];
    let z = m[14] - v[2];
    return x * x + y * y + z * z;
  }

  // ../src/systems/sys_audio_listener.ts
  var QUERY2 = 2 /* AudioListener */ | 4194304 /* Transform */;
  function sys_audio_listener(game2, delta) {
    for (let i = 0; i < game2.World.Signature.length; i++) {
      if ((game2.World.Signature[i] & QUERY2) === QUERY2) {
        update2(game2, i);
      }
    }
  }
  var position = [0, 0, 0];
  var forward = [0, 0, 0];
  var up = [0, 0, 0];
  function update2(game2, entity) {
    let transform2 = game2.World.Transform[entity];
    get_translation(position, transform2.World);
    get_forward(forward, transform2.World);
    get_up(up, transform2.World);
    let listener = game2.Audio.listener;
    if (listener.positionX) {
      listener.positionX.value = position[0];
      listener.positionY.value = position[1];
      listener.positionZ.value = position[2];
      listener.forwardX.value = forward[0];
      listener.forwardY.value = forward[1];
      listener.forwardZ.value = forward[2];
      listener.upX.value = up[0];
      listener.upY.value = up[1];
      listener.upZ.value = up[2];
    } else {
      listener.setPosition(...position);
      listener.setOrientation(...forward, ...up);
    }
  }

  // ../common/audio.ts
  function play_note(audio, panner, instr, note, offset) {
    let time = audio.currentTime + offset;
    let total_duration = 0;
    if (panner) {
      panner.connect(audio.destination);
    }
    let master = audio.createGain();
    master.gain.value = (instr[0 /* MasterGainAmount */] / 9) ** 3;
    let lfa, lfo;
    if (instr[5 /* LFOType */]) {
      lfo = audio.createOscillator();
      lfo.type = instr[5 /* LFOType */];
      lfo.frequency.value = (instr[7 /* LFOFreq */] / 3) ** 3;
      lfa = audio.createGain();
      lfa.gain.value = (instr[6 /* LFOAmount */] + 3) ** 3;
      lfo.connect(lfa);
    }
    if (instr[1 /* FilterType */]) {
      let filter = audio.createBiquadFilter();
      filter.type = instr[1 /* FilterType */];
      filter.frequency.value = 2 ** instr[2 /* FilterFreq */];
      filter.Q.value = instr[3 /* FilterQ */] ** 1.5;
      if (lfa && instr[4 /* FilterDetuneLFO */]) {
        lfa.connect(filter.detune);
      }
      master.connect(filter);
      if (panner) {
        filter.connect(panner);
      } else {
        filter.connect(audio.destination);
      }
    } else if (panner) {
      master.connect(panner);
    } else {
      master.connect(audio.destination);
    }
    for (let source of instr[8 /* Sources */]) {
      let amp = audio.createGain();
      amp.connect(master);
      let gain_amount = (source[1 /* GainAmount */] / 9) ** 3;
      let gain_attack = (source[2 /* GainAttack */] / 9) ** 3;
      let gain_sustain = (source[3 /* GainSustain */] / 9) ** 3;
      let gain_release = (source[4 /* GainRelease */] / 6) ** 3;
      let gain_duration = gain_attack + gain_sustain + gain_release;
      amp.gain.setValueAtTime(0, time);
      amp.gain.linearRampToValueAtTime(gain_amount, time + gain_attack);
      amp.gain.setValueAtTime(gain_amount, time + gain_attack + gain_sustain);
      amp.gain.exponentialRampToValueAtTime(1e-5, time + gain_duration);
      if (source[0]) {
        let hfo = audio.createOscillator();
        hfo.type = source[0 /* SourceType */];
        hfo.connect(amp);
        hfo.detune.value = 3 * (source[5 /* DetuneAmount */] - 7.5) ** 3;
        if (lfa && source[6 /* DetuneLFO */]) {
          lfa.connect(hfo.detune);
        }
        let freq = 440 * 2 ** ((note - 69) / 12);
        if (source[7 /* FreqEnabled */]) {
          let freq_attack = (source[8 /* FreqAttack */] / 9) ** 3;
          let freq_sustain = (source[9 /* FreqSustain */] / 9) ** 3;
          let freq_release = (source[10 /* FreqRelease */] / 6) ** 3;
          hfo.frequency.linearRampToValueAtTime(0, time);
          hfo.frequency.linearRampToValueAtTime(freq, time + freq_attack);
          hfo.frequency.setValueAtTime(freq, time + freq_attack + freq_sustain);
          hfo.frequency.exponentialRampToValueAtTime(1e-5, time + freq_attack + freq_sustain + freq_release);
        } else {
          hfo.frequency.setValueAtTime(freq, time);
        }
        hfo.start(time);
        hfo.stop(time + gain_duration);
      } else {
        let noise = audio.createBufferSource();
        noise.buffer = lazy_noise_buffer(audio);
        noise.loop = true;
        noise.connect(amp);
        noise.start(time);
        noise.stop(time + gain_duration);
      }
      if (gain_duration > total_duration) {
        total_duration = gain_duration;
      }
    }
    if (lfo) {
      lfo.start(time);
      lfo.stop(time + total_duration);
    }
  }
  var noise_buffer;
  function lazy_noise_buffer(audio) {
    if (!noise_buffer) {
      noise_buffer = audio.createBuffer(1, audio.sampleRate * 2, audio.sampleRate);
      let channel = noise_buffer.getChannelData(0);
      for (let i = 0; i < channel.length; i++) {
        channel[i] = Math.random() * 2 - 1;
      }
    }
    return noise_buffer;
  }
  function play_synth_clip(audio, panner, clip) {
    let spb = 60 / (clip.BPM || 120);
    let interval = spb / 4;
    for (let track of clip.Tracks) {
      for (let i = 0; i < track.Notes.length; i++) {
        if (track.Notes[i]) {
          play_note(audio, panner, track.Instrument, track.Notes[i], i * interval);
        }
      }
    }
  }
  function play_buffer_clip(audio, panner, clip) {
    let source = audio.createBufferSource();
    source.buffer = clip.Buffer;
    if (panner) {
      source.connect(panner);
      panner.connect(audio.destination);
    } else {
      source.connect(audio.destination);
    }
    source.start();
  }

  // ../src/systems/sys_audio_source.ts
  var QUERY3 = 4 /* AudioSource */ | 4194304 /* Transform */;
  function sys_audio_source(game2, delta) {
    for (let i = 0; i < game2.World.Signature.length; i++) {
      if ((game2.World.Signature[i] & QUERY3) === QUERY3) {
        update3(game2, i, delta);
      }
    }
  }
  function update3(game2, entity, delta) {
    let audio_source2 = game2.World.AudioSource[entity];
    let transform2 = game2.World.Transform[entity];
    if (audio_source2.Current) {
      audio_source2.Time += delta;
      if (audio_source2.Time > audio_source2.Current.Exit) {
        audio_source2.Current = void 0;
      } else if (audio_source2.Panner) {
        update_panner(audio_source2.Panner, transform2);
      }
    }
    if (audio_source2.Trigger && !audio_source2.Current) {
      switch (audio_source2.Trigger.Kind) {
        case 0 /* Buffer */:
          play_buffer_clip(game2.Audio, audio_source2.Panner, audio_source2.Trigger);
          break;
        case 1 /* Synth */:
          play_synth_clip(game2.Audio, audio_source2.Panner, audio_source2.Trigger);
          break;
      }
      audio_source2.Current = audio_source2.Trigger;
      audio_source2.Time = 0;
      if (audio_source2.Panner) {
        update_panner(audio_source2.Panner, transform2);
      }
    }
    audio_source2.Trigger = audio_source2.Idle;
  }
  var position2 = [0, 0, 0];
  var forward2 = [0, 0, 0];
  function update_panner(panner, transform2) {
    get_translation(position2, transform2.World);
    get_forward(forward2, transform2.World);
    if (panner.positionX) {
      panner.positionX.value = position2[0];
      panner.positionY.value = position2[1];
      panner.positionZ.value = position2[2];
      panner.orientationX.value = forward2[0];
      panner.orientationY.value = forward2[1];
      panner.orientationZ.value = forward2[2];
    } else {
      panner.setPosition(...position2);
      panner.setOrientation(...forward2);
    }
  }

  // ../src/components/com_camera.ts
  function camera_canvas(projection, clear_color = [0.9, 0.9, 0.9, 1], clear_mask = GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT) {
    return (game2, entity) => {
      game2.World.Signature[entity] |= 8 /* Camera */;
      game2.World.Camera[entity] = {
        Kind: 0 /* Canvas */,
        Projection: projection,
        View: create(),
        Pv: create(),
        Position: [0, 0, 0],
        FogColor: clear_color,
        FogDistance: projection.Far,
        ClearColor: clear_color,
        ClearMask: clear_mask
      };
    };
  }
  function camera_target(target, projection, clear_color = [0, 0, 0, 1], clear_mask = GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT) {
    return (game2, entity) => {
      game2.World.Signature[entity] |= 8 /* Camera */;
      game2.World.Camera[entity] = {
        Kind: 1 /* Target */,
        Target: target,
        Projection: projection,
        View: create(),
        Pv: create(),
        Position: [0, 0, 0],
        FogColor: clear_color,
        FogDistance: projection.Far,
        ClearColor: clear_color,
        ClearMask: clear_mask
      };
    };
  }

  // ../src/systems/sys_camera.ts
  var QUERY4 = 4194304 /* Transform */ | 8 /* Camera */;
  function sys_camera(game2, delta) {
    for (let i = 0; i < game2.World.Signature.length; i++) {
      if ((game2.World.Signature[i] & QUERY4) === QUERY4) {
        let camera = game2.World.Camera[i];
        switch (camera.Kind) {
          case 0 /* Canvas */:
          case 1 /* Target */:
            update_camera(game2, i, camera);
            game2.Cameras.push(i);
            break;
        }
      }
    }
  }
  function update_camera(game2, entity, camera) {
    let transform2 = game2.World.Transform[entity];
    let projection = camera.Projection;
    copy2(camera.View, transform2.Self);
    multiply2(camera.Pv, projection.Projection, camera.View);
    get_translation(camera.Position, transform2.World);
  }

  // ../common/aabb.ts
  var BOX = [
    [0.5, 0.5, 0.5],
    [0.5, 0.5, -0.5],
    [-0.5, 0.5, -0.5],
    [-0.5, 0.5, 0.5],
    [0.5, -0.5, 0.5],
    [0.5, -0.5, -0.5],
    [-0.5, -0.5, -0.5],
    [-0.5, -0.5, 0.5]
  ];
  function compute_aabb(world, aabb) {
    get_translation(aabb.Center, world);
    let min_x, min_y, min_z, max_x, max_y, max_z;
    min_x = max_x = aabb.Center[0];
    min_y = max_y = aabb.Center[1];
    min_z = max_z = aabb.Center[2];
    let world_vertex = [0, 0, 0];
    for (let i = 0; i < 8; i++) {
      let bb_vertex = BOX[i];
      world_vertex[0] = bb_vertex[0] * aabb.Size[0];
      world_vertex[1] = bb_vertex[1] * aabb.Size[1];
      world_vertex[2] = bb_vertex[2] * aabb.Size[2];
      transform_position(world_vertex, world_vertex, world);
      if (world_vertex[0] < min_x) {
        min_x = world_vertex[0];
      }
      if (world_vertex[0] > max_x) {
        max_x = world_vertex[0];
      }
      if (world_vertex[1] < min_y) {
        min_y = world_vertex[1];
      }
      if (world_vertex[1] > max_y) {
        max_y = world_vertex[1];
      }
      if (world_vertex[2] < min_z) {
        min_z = world_vertex[2];
      }
      if (world_vertex[2] > max_z) {
        max_z = world_vertex[2];
      }
    }
    aabb.Min = [min_x, min_y, min_z];
    aabb.Max = [max_x, max_y, max_z];
    aabb.Half[0] = (max_x - min_x) / 2;
    aabb.Half[1] = (max_y - min_y) / 2;
    aabb.Half[2] = (max_z - min_z) / 2;
  }
  function penetrate_aabb(a2, b) {
    let distance_x = a2.Center[0] - b.Center[0];
    let penetration_x = a2.Half[0] + b.Half[0] - Math.abs(distance_x);
    let distance_y = a2.Center[1] - b.Center[1];
    let penetration_y = a2.Half[1] + b.Half[1] - Math.abs(distance_y);
    let distance_z = a2.Center[2] - b.Center[2];
    let penetration_z = a2.Half[2] + b.Half[2] - Math.abs(distance_z);
    if (penetration_x < penetration_y && penetration_x < penetration_z) {
      return [penetration_x * Math.sign(distance_x), 0, 0];
    } else if (penetration_y < penetration_z) {
      return [0, penetration_y * Math.sign(distance_y), 0];
    } else {
      return [0, 0, penetration_z * Math.sign(distance_z)];
    }
  }
  function intersect_aabb(a2, b) {
    return a2.Min[0] < b.Max[0] && a2.Max[0] > b.Min[0] && a2.Min[1] < b.Max[1] && a2.Max[1] > b.Min[1] && a2.Min[2] < b.Max[2] && a2.Max[2] > b.Min[2];
  }

  // ../src/systems/sys_collide.ts
  var QUERY5 = 4194304 /* Transform */ | 32 /* Collide */;
  function sys_collide(game2, delta) {
    let static_colliders = [];
    let dynamic_colliders = [];
    for (let i = 0; i < game2.World.Signature.length; i++) {
      if ((game2.World.Signature[i] & QUERY5) === QUERY5) {
        let transform2 = game2.World.Transform[i];
        let collider = game2.World.Collide[i];
        collider.Collisions = [];
        if (collider.New) {
          collider.New = false;
          compute_aabb(transform2.World, collider);
        } else if (collider.Dynamic) {
          compute_aabb(transform2.World, collider);
          dynamic_colliders.push(collider);
        } else {
          static_colliders.push(collider);
        }
      }
    }
    for (let i = 0; i < dynamic_colliders.length; i++) {
      check_collisions(dynamic_colliders[i], static_colliders, static_colliders.length);
      check_collisions(dynamic_colliders[i], dynamic_colliders, i);
    }
  }
  function check_collisions(collider, colliders, length2) {
    for (let i = 0; i < length2; i++) {
      let other = colliders[i];
      let collider_can_intersect = collider.Mask & other.Layers;
      let other_can_intersect = other.Mask & collider.Layers;
      if (collider_can_intersect || other_can_intersect) {
        if (intersect_aabb(collider, other)) {
          let hit = penetrate_aabb(collider, other);
          if (collider_can_intersect) {
            collider.Collisions.push({
              Other: other.EntityId,
              Hit: hit
            });
          }
          if (other_can_intersect) {
            other.Collisions.push({
              Other: collider.EntityId,
              Hit: negate([0, 0, 0], hit)
            });
          }
        }
      }
    }
  }

  // ../src/systems/sys_control_always.ts
  var QUERY6 = 64 /* ControlAlways */ | 16384 /* Move */;
  function sys_control_always(game2, delta) {
    for (let i = 0; i < game2.World.Signature.length; i++) {
      if ((game2.World.Signature[i] & QUERY6) === QUERY6) {
        update4(game2, i);
      }
    }
  }
  function update4(game2, entity) {
    let control = game2.World.ControlAlways[entity];
    let move2 = game2.World.Move[entity];
    if (control.Direction) {
      add(move2.Direction, move2.Direction, control.Direction);
    }
    if (control.Rotation) {
      multiply(move2.LocalRotation, move2.LocalRotation, control.Rotation);
    }
    if (control.Animation) {
      for (let ent of query_down(game2.World, entity, 1 /* Animate */)) {
        let animate2 = game2.World.Animate[ent];
        animate2.Trigger = control.Animation;
      }
    }
  }

  // ../src/systems/sys_control_jump.ts
  var QUERY7 = 128 /* ControlPlayer */ | 131072 /* RigidBody */;
  function sys_control_jump(game2, delta) {
    for (let i = 0; i < game2.World.Signature.length; i++) {
      if ((game2.World.Signature[i] & QUERY7) === QUERY7) {
        update5(game2, i);
      }
    }
  }
  function update5(game2, entity) {
    let control = game2.World.ControlPlayer[entity];
    let rigid_body2 = game2.World.RigidBody[entity];
    if (control.Jump) {
      if (game2.InputState["ArrowUp"]) {
        if (!rigid_body2.IsAirborne) {
          rigid_body2.Acceleration[1] += 300;
          for (let ent of query_down(game2.World, entity, 1 /* Animate */)) {
            game2.World.Animate[ent].Trigger = "jump";
          }
        }
      }
    }
  }

  // ../src/systems/sys_control_keyboard.ts
  var QUERY8 = 16384 /* Move */ | 128 /* ControlPlayer */;
  function sys_control_keyboard(game2, delta) {
    for (let i = 0; i < game2.World.Signature.length; i++) {
      if ((game2.World.Signature[i] & QUERY8) === QUERY8) {
        update6(game2, i);
      }
    }
  }
  function update6(game2, entity) {
    let control = game2.World.ControlPlayer[entity];
    if (control.Yaw) {
      let move2 = game2.World.Move[entity];
      if (game2.InputState["ArrowLeft"]) {
        multiply(move2.LocalRotation, move2.LocalRotation, [0, 1, 0, 0]);
      }
      if (game2.InputState["ArrowRight"]) {
        multiply(move2.LocalRotation, move2.LocalRotation, [0, -1, 0, 0]);
      }
    }
    if (control.Pitch) {
      let transform2 = game2.World.Transform[entity];
      let move2 = game2.World.Move[entity];
      let current_pitch = get_pitch(transform2.Rotation);
      if (game2.InputState["ArrowDown"] && current_pitch > control.MinPitch) {
        multiply(move2.SelfRotation, move2.SelfRotation, [-1, 0, 0, 0]);
      } else if (current_pitch < control.MaxPitch) {
        multiply(move2.SelfRotation, move2.SelfRotation, [1, 0, 0, 0]);
      }
    }
  }

  // ../src/components/com_render.ts
  function render_colored_shadows(material, mesh, diffuse_color, shininess = 0, emission = 0, specular_rgb = [1, 1, 1], front_face = GL_CW) {
    return (game2, entity) => {
      game2.World.Signature[entity] |= 65536 /* Render */;
      game2.World.Render[entity] = {
        Kind: 2 /* ColoredShadows */,
        Material: material,
        Mesh: mesh,
        Phase: diffuse_color[3] < 1 ? 1 /* Transparent */ : 0 /* Opaque */,
        FrontFace: front_face,
        DiffuseColor: diffuse_color,
        SpecularColor: [...specular_rgb, shininess],
        EmissiveColor: [diffuse_color[0], diffuse_color[1], diffuse_color[2], emission]
      };
    };
  }
  var FLOATS_PER_PARTICLE = 8;

  // ../src/components/com_transform.ts
  function transform(translation = [0, 0, 0], rotation = [0, 0, 0, 1], scale2 = [1, 1, 1]) {
    return (game2, entity) => {
      game2.World.Signature[entity] |= 4194304 /* Transform */ | 256 /* Dirty */;
      game2.World.Transform[entity] = {
        World: create(),
        Self: create(),
        Translation: translation,
        Rotation: rotation,
        Scale: scale2,
        Gyroscope: false
      };
    };
  }

  // ../src/systems/sys_draw.ts
  var QUERY9 = 4194304 /* Transform */ | 512 /* Draw */;
  function sys_draw(game2, delta) {
    game2.Context2D.resetTransform();
    game2.Context2D.clearRect(0, 0, game2.ViewportWidth, game2.ViewportHeight);
    let position3 = [0, 0, 0];
    let camera_entity = game2.Cameras[0];
    let main_camera = game2.World.Camera[camera_entity];
    if (!main_camera || main_camera.Kind === 2 /* Xr */) {
      return;
    }
    for (let i = 0; i < game2.World.Signature.length; i++) {
      if ((game2.World.Signature[i] & QUERY9) == QUERY9) {
        get_translation(position3, game2.World.Transform[i].World);
        transform_position(position3, position3, main_camera.Pv);
        if (position3[2] < -1 || position3[2] > 1) {
          continue;
        }
        game2.Context2D.setTransform(1, 0, 0, 1, 0.5 * (position3[0] + 1) * game2.ViewportWidth, 0.5 * (-position3[1] + 1) * game2.ViewportHeight);
        let draw = game2.World.Draw[i];
        switch (draw.Kind) {
          case 0 /* Text */:
            draw_text(game2, draw);
            break;
          case 2 /* Selection */:
            draw_selection(game2, draw);
            break;
        }
      }
    }
  }
  function draw_text(game2, draw) {
    game2.Context2D.textAlign = "center";
    game2.Context2D.font = draw.Font;
    game2.Context2D.fillStyle = draw.FillStyle;
    game2.Context2D.fillText(draw.Text, 0, 0);
  }
  function draw_selection(game2, draw) {
    game2.Context2D.strokeStyle = draw.Color;
    game2.Context2D.strokeRect(-draw.Size / 2, -draw.Size / 2, draw.Size, draw.Size);
  }

  // ../src/systems/sys_lifespan.ts
  var QUERY10 = 2048 /* Lifespan */;
  function sys_lifespan(game2, delta) {
    for (let i = 0; i < game2.World.Signature.length; i++) {
      if ((game2.World.Signature[i] & QUERY10) == QUERY10) {
        update7(game2, i, delta);
      }
    }
  }
  function update7(game2, entity, delta) {
    let lifespan2 = game2.World.Lifespan[entity];
    lifespan2.Remaining -= delta;
    if (lifespan2.Remaining < 0) {
      if (lifespan2.Action) {
        dispatch(game2, lifespan2.Action, entity);
      }
      destroy_all(game2.World, entity);
    }
  }

  // ../src/systems/sys_light.ts
  var QUERY11 = 4194304 /* Transform */ | 4096 /* Light */;
  function sys_light(game2, delta) {
    game2.LightPositions.fill(0);
    game2.LightDetails.fill(0);
    let counter = 0;
    for (let i = 0; i < game2.World.Signature.length; i++) {
      if ((game2.World.Signature[i] & QUERY11) === QUERY11) {
        update8(game2, i, counter++);
      }
    }
  }
  var world_pos = [0, 0, 0];
  function update8(game2, entity, idx) {
    let light = game2.World.Light[entity];
    let transform2 = game2.World.Transform[entity];
    if (light.Kind === 2 /* Directional */) {
      get_forward(world_pos, transform2.World);
    } else {
      get_translation(world_pos, transform2.World);
    }
    game2.LightPositions[4 * idx + 0] = world_pos[0];
    game2.LightPositions[4 * idx + 1] = world_pos[1];
    game2.LightPositions[4 * idx + 2] = world_pos[2];
    game2.LightPositions[4 * idx + 3] = light.Kind;
    game2.LightDetails[4 * idx + 0] = light.Color[0];
    game2.LightDetails[4 * idx + 1] = light.Color[1];
    game2.LightDetails[4 * idx + 2] = light.Color[2];
    game2.LightDetails[4 * idx + 3] = light.Intensity;
  }

  // ../src/systems/sys_mimic.ts
  var QUERY12 = 4194304 /* Transform */ | 8192 /* Mimic */;
  function sys_mimic(game2, delta) {
    for (let ent = 0; ent < game2.World.Signature.length; ent++) {
      if ((game2.World.Signature[ent] & QUERY12) === QUERY12) {
        let follower_transform = game2.World.Transform[ent];
        let follower_mimic = game2.World.Mimic[ent];
        let target_transform = game2.World.Transform[follower_mimic.Target];
        let target_world_position = get_translation([0, 0, 0], target_transform.World);
        let target_world_rotation = get_rotation([0, 0, 0, 0], target_transform.World);
        lerp(follower_transform.Translation, follower_transform.Translation, target_world_position, follower_mimic.Stiffness);
        slerp(follower_transform.Rotation, follower_transform.Rotation, target_world_rotation, follower_mimic.Stiffness);
        game2.World.Signature[ent] |= 256 /* Dirty */;
      }
    }
  }

  // ../src/systems/sys_move.ts
  var QUERY13 = 4194304 /* Transform */ | 16384 /* Move */;
  var NO_ROTATION = [0, 0, 0, 1];
  function sys_move(game2, delta) {
    for (let i = 0; i < game2.World.Signature.length; i++) {
      if ((game2.World.Signature[i] & QUERY13) === QUERY13) {
        update9(game2, i, delta);
      }
    }
  }
  function update9(game2, entity, delta) {
    let transform2 = game2.World.Transform[entity];
    let move2 = game2.World.Move[entity];
    if (move2.Direction[0] !== 0 || move2.Direction[1] !== 0 || move2.Direction[2] !== 0) {
      let amount = Math.min(1, length(move2.Direction));
      transform_direction(move2.Direction, move2.Direction, transform2.World);
      if (transform2.Parent !== void 0) {
        let parent = game2.World.Transform[transform2.Parent];
        transform_direction(move2.Direction, move2.Direction, parent.Self);
      }
      normalize(move2.Direction, move2.Direction);
      scale(move2.Direction, move2.Direction, amount * move2.MoveSpeed * delta);
      add(transform2.Translation, transform2.Translation, move2.Direction);
      game2.World.Signature[entity] |= 256 /* Dirty */;
      set(move2.Direction, 0, 0, 0);
    }
    if (move2.LocalRotation[3] < 1) {
      let t = Math.min(1, move2.RotationSpeed / Math.PI * delta);
      slerp(move2.LocalRotation, NO_ROTATION, move2.LocalRotation, t);
      multiply(transform2.Rotation, move2.LocalRotation, transform2.Rotation);
      game2.World.Signature[entity] |= 256 /* Dirty */;
      set2(move2.LocalRotation, 0, 0, 0, 1);
    }
    if (move2.SelfRotation[3] < 1) {
      let t = Math.min(1, move2.RotationSpeed / Math.PI * delta);
      slerp(move2.SelfRotation, NO_ROTATION, move2.SelfRotation, t);
      multiply(transform2.Rotation, transform2.Rotation, move2.SelfRotation);
      game2.World.Signature[entity] |= 256 /* Dirty */;
      set2(move2.SelfRotation, 0, 0, 0, 1);
    }
  }

  // ../src/systems/sys_particles.ts
  var QUERY14 = 4194304 /* Transform */ | 1024 /* EmitParticles */;
  function sys_particles(game2, delta) {
    for (let i = 0; i < game2.World.Signature.length; i++) {
      if ((game2.World.Signature[i] & QUERY14) == QUERY14) {
        update10(game2, i, delta);
      }
    }
  }
  var origin = [0, 0, 0];
  var forward3 = [0, 0, 0];
  function update10(game2, entity, delta) {
    let emitter = game2.World.EmitParticles[entity];
    let transform2 = game2.World.Transform[entity];
    emitter.SinceLast += delta;
    if (emitter.SinceLast > emitter.Frequency) {
      emitter.SinceLast = 0;
      get_translation(origin, transform2.World);
      get_forward(forward3, transform2.World);
      emitter.Instances.push(...origin, 0);
      emitter.Instances.push(...forward3, Math.random());
    }
    for (let i = 0; i < emitter.Instances.length; ) {
      emitter.Instances[i + 3] += delta;
      if (emitter.Instances[i + 3] > emitter.Lifespan) {
        emitter.Instances.splice(i, FLOATS_PER_PARTICLE);
      } else {
        i += FLOATS_PER_PARTICLE;
      }
    }
  }

  // ../src/components/com_rigid_body.ts
  function rigid_body(kind, bounciness = 0.5) {
    return (game2, entity) => {
      game2.World.Signature[entity] |= 131072 /* RigidBody */;
      game2.World.RigidBody[entity] = {
        Kind: kind,
        ColliderId: entity,
        Bounciness: bounciness,
        Acceleration: [0, 0, 0],
        VelocityIntegrated: [0, 0, 0],
        VelocityResolved: [0, 0, 0],
        LastPosition: [0, 0, 0],
        IsAirborne: false
      };
    };
  }

  // ../src/systems/sys_physics_integrate.ts
  var QUERY15 = 4194304 /* Transform */ | 131072 /* RigidBody */;
  var GRAVITY = -9.81;
  function sys_physics_integrate(game2, delta) {
    for (let i = 0; i < game2.World.Signature.length; i++) {
      if ((game2.World.Signature[i] & QUERY15) === QUERY15) {
        update11(game2, i, delta);
      }
    }
  }
  function update11(game2, entity, delta) {
    let transform2 = game2.World.Transform[entity];
    let rigid_body2 = game2.World.RigidBody[entity];
    if (rigid_body2.Kind === 1 /* Dynamic */) {
      copy(rigid_body2.VelocityIntegrated, rigid_body2.VelocityResolved);
      scale(rigid_body2.Acceleration, rigid_body2.Acceleration, delta);
      add(rigid_body2.VelocityIntegrated, rigid_body2.VelocityIntegrated, rigid_body2.Acceleration);
      rigid_body2.VelocityIntegrated[1] += GRAVITY * delta;
      let vel_delta = [0, 0, 0];
      scale(vel_delta, rigid_body2.VelocityIntegrated, delta);
      add(transform2.Translation, transform2.Translation, vel_delta);
      game2.World.Signature[entity] |= 256 /* Dirty */;
      set(rigid_body2.Acceleration, 0, 0, 0);
    }
  }

  // ../src/systems/sys_physics_kinematic.ts
  var QUERY16 = 4194304 /* Transform */ | 131072 /* RigidBody */;
  function sys_physics_kinematic(game2, delta) {
    for (let i = 0; i < game2.World.Signature.length; i++) {
      if ((game2.World.Signature[i] & QUERY16) === QUERY16) {
        update12(game2, i, delta);
      }
    }
  }
  var current_position = [0, 0, 0];
  var movement_delta = [0, 0, 0];
  function update12(game2, entity, delta) {
    let transform2 = game2.World.Transform[entity];
    let rigid_body2 = game2.World.RigidBody[entity];
    get_translation(current_position, transform2.World);
    if (rigid_body2.Kind === 2 /* Kinematic */) {
      subtract(movement_delta, current_position, rigid_body2.LastPosition);
      scale(rigid_body2.VelocityIntegrated, movement_delta, 1 / delta);
    }
    copy(rigid_body2.LastPosition, current_position);
  }

  // ../src/systems/sys_physics_resolve.ts
  var QUERY17 = 4194304 /* Transform */ | 32 /* Collide */ | 131072 /* RigidBody */;
  function sys_physics_resolve(game2, delta) {
    for (let i = 0; i < game2.World.Signature.length; i++) {
      if ((game2.World.Signature[i] & QUERY17) === QUERY17) {
        update13(game2, i);
      }
    }
  }
  var a = [0, 0, 0];
  function update13(game2, entity) {
    let transform2 = game2.World.Transform[entity];
    let rigid_body2 = game2.World.RigidBody[entity];
    let collide2 = game2.World.Collide[rigid_body2.ColliderId];
    if (rigid_body2.Kind === 1 /* Dynamic */) {
      rigid_body2.IsAirborne = true;
      let has_collision = false;
      for (let i = 0; i < collide2.Collisions.length; i++) {
        let collision = collide2.Collisions[i];
        if (game2.World.Signature[collision.Other] & 131072 /* RigidBody */) {
          has_collision = true;
          add(transform2.Translation, transform2.Translation, collision.Hit);
          game2.World.Signature[entity] |= 256 /* Dirty */;
          let other_body = game2.World.RigidBody[collision.Other];
          switch (other_body.Kind) {
            case 0 /* Static */:
              normalize(a, collision.Hit);
              scale(a, a, -2 * dot(rigid_body2.VelocityIntegrated, a));
              add(rigid_body2.VelocityResolved, rigid_body2.VelocityIntegrated, a);
              break;
            case 1 /* Dynamic */:
            case 2 /* Kinematic */:
              copy(rigid_body2.VelocityResolved, other_body.VelocityIntegrated);
              break;
          }
          scale(rigid_body2.VelocityResolved, rigid_body2.VelocityResolved, rigid_body2.Bounciness);
          if (collision.Hit[1] > 0 && rigid_body2.VelocityResolved[1] < 1) {
            rigid_body2.VelocityResolved[1] = 0;
            rigid_body2.IsAirborne = false;
          }
        }
      }
      if (!has_collision) {
        copy(rigid_body2.VelocityResolved, rigid_body2.VelocityIntegrated);
      }
    } else if (rigid_body2.Kind === 2 /* Kinematic */) {
      copy(rigid_body2.VelocityResolved, rigid_body2.VelocityIntegrated);
    }
  }

  // ../src/components/com_task.ts
  function task_until(predicate, on_done) {
    return (game2, entity) => {
      game2.World.Signature[entity] |= 1048576 /* Task */;
      game2.World.Task[entity] = {
        Kind: 0 /* Until */,
        Predicate: predicate,
        OnDone: on_done
      };
    };
  }

  // ../src/systems/sys_poll.ts
  var QUERY18 = 1048576 /* Task */;
  function sys_poll(game2, delta) {
    let tasks_to_complete = [];
    for (let i = 0; i < game2.World.Signature.length; i++) {
      if ((game2.World.Signature[i] & QUERY18) === QUERY18) {
        if (has_blocking_dependencies(game2.World, i)) {
          continue;
        }
        let task = game2.World.Task[i];
        switch (task.Kind) {
          case 0 /* Until */: {
            if (task.Predicate(i)) {
              tasks_to_complete.push(i);
            }
            break;
          }
          case 1 /* Timeout */: {
            task.Remaining -= delta;
            if (task.Remaining < 0) {
              tasks_to_complete.push(i);
            }
            break;
          }
        }
      }
    }
    for (let entity of tasks_to_complete) {
      let task = game2.World.Task[entity];
      if (task.OnDone) {
        task.OnDone(entity);
      }
      game2.World.Signature[entity] &= ~1048576 /* Task */;
      if (game2.World.Signature[entity] === 0 /* None */) {
        game2.World.DestroyEntity(entity);
      }
      delete game2.World.Task[entity];
    }
  }
  function has_blocking_dependencies(world, entity) {
    if (world.Signature[entity] & 16 /* Children */) {
      let children2 = world.Children[entity];
      for (let child of children2.Children) {
        if (world.Signature[child] & 1048576 /* Task */) {
          return true;
        }
      }
    }
    return false;
  }

  // ../src/systems/sys_render_depth.ts
  var QUERY19 = 4194304 /* Transform */ | 65536 /* Render */;
  function sys_render_depth(game2, delta) {
    for (let camera_entity of game2.Cameras) {
      let camera = game2.World.Camera[camera_entity];
      if (camera.Kind === 1 /* Target */) {
        if (camera.Target.Kind === 3 /* Depth */) {
          game2.Gl.bindFramebuffer(GL_FRAMEBUFFER, camera.Target.Framebuffer);
          game2.Gl.viewport(0, 0, camera.Target.Width, camera.Target.Height);
          game2.Gl.clearColor(...camera.ClearColor);
          game2.Gl.clear(camera.ClearMask);
          render_all(game2, camera);
        }
      }
    }
  }
  function render_all(game2, eye) {
    let material = game2.MaterialDepth;
    let current_front_face = null;
    game2.Gl.useProgram(material.Program);
    game2.Gl.uniformMatrix4fv(material.Locations.Pv, false, eye.Pv);
    for (let ent = 0; ent < game2.World.Signature.length; ent++) {
      if ((game2.World.Signature[ent] & QUERY19) === QUERY19) {
        let transform2 = game2.World.Transform[ent];
        let render = game2.World.Render[ent];
        switch (render.Kind) {
          case 7 /* Vertices */:
          case 8 /* ParticlesColored */:
          case 9 /* ParticlesTextured */:
            continue;
        }
        if (render.FrontFace !== current_front_face) {
          current_front_face = render.FrontFace;
          game2.Gl.frontFace(render.FrontFace);
        }
        game2.Gl.uniformMatrix4fv(material.Locations.World, false, transform2.World);
        game2.Gl.bindVertexArray(render.Mesh.Vao);
        game2.Gl.drawElements(material.Mode, render.Mesh.IndexCount, GL_UNSIGNED_SHORT, 0);
        game2.Gl.bindVertexArray(null);
      }
    }
  }

  // ../src/systems/sys_render_forward.ts
  var QUERY20 = 4194304 /* Transform */ | 65536 /* Render */;
  function sys_render_forward(game2, delta) {
    for (let camera_entity of game2.Cameras) {
      let camera = game2.World.Camera[camera_entity];
      switch (camera.Kind) {
        case 0 /* Canvas */:
          game2.Gl.bindFramebuffer(GL_FRAMEBUFFER, null);
          game2.Gl.viewport(0, 0, game2.ViewportWidth, game2.ViewportHeight);
          game2.Gl.clearColor(...camera.ClearColor);
          game2.Gl.clear(camera.ClearMask);
          render_all2(game2, camera);
          break;
        case 1 /* Target */:
          if (camera.Target.Kind === 0 /* Forward */) {
            game2.Gl.bindFramebuffer(GL_FRAMEBUFFER, camera.Target.Framebuffer);
            game2.Gl.viewport(0, 0, camera.Target.Width, camera.Target.Height);
            game2.Gl.clearColor(...camera.ClearColor);
            game2.Gl.clear(camera.ClearMask);
            render_all2(game2, camera, camera.Target.ColorTexture);
          }
          break;
      }
    }
  }
  function render_all2(game2, eye, current_target) {
    let current_material = null;
    let current_front_face = null;
    let transparent_entities = [];
    for (let ent = 0; ent < game2.World.Signature.length; ent++) {
      if ((game2.World.Signature[ent] & QUERY20) === QUERY20) {
        let render = game2.World.Render[ent];
        if (render.Phase === 1 /* Transparent */) {
          transparent_entities.push(ent);
          continue;
        }
        if (render.Material !== current_material) {
          current_material = render.Material;
          use_material(game2, render, eye);
        }
        if (render.FrontFace !== current_front_face) {
          current_front_face = render.FrontFace;
          game2.Gl.frontFace(render.FrontFace);
        }
        draw_entity(game2, ent, current_target);
      }
    }
    transparent_entities.sort((a2, b) => {
      let transform_a = game2.World.Transform[a2];
      let transform_b = game2.World.Transform[b];
      return distance_squared_from_point(transform_b.World, eye.Position) - distance_squared_from_point(transform_a.World, eye.Position);
    });
    game2.Gl.enable(GL_BLEND);
    for (let i = 0; i < transparent_entities.length; i++) {
      let ent = transparent_entities[i];
      let render = game2.World.Render[ent];
      if (render.Material !== current_material) {
        current_material = render.Material;
        use_material(game2, render, eye);
      }
      if (render.FrontFace !== current_front_face) {
        current_front_face = render.FrontFace;
        game2.Gl.frontFace(render.FrontFace);
      }
      draw_entity(game2, ent, current_target);
    }
    game2.Gl.disable(GL_BLEND);
  }
  function use_material(game2, render, eye) {
    switch (render.Kind) {
      case 0 /* ColoredUnlit */:
        game2.Gl.useProgram(render.Material.Program);
        game2.Gl.uniformMatrix4fv(render.Material.Locations.Pv, false, eye.Pv);
        break;
      case 1 /* ColoredShaded */:
        game2.Gl.useProgram(render.Material.Program);
        game2.Gl.uniformMatrix4fv(render.Material.Locations.Pv, false, eye.Pv);
        game2.Gl.uniform3fv(render.Material.Locations.Eye, eye.Position);
        game2.Gl.uniform4fv(render.Material.Locations.LightPositions, game2.LightPositions);
        game2.Gl.uniform4fv(render.Material.Locations.LightDetails, game2.LightDetails);
        break;
      case 2 /* ColoredShadows */:
        game2.Gl.useProgram(render.Material.Program);
        game2.Gl.uniformMatrix4fv(render.Material.Locations.Pv, false, eye.Pv);
        game2.Gl.uniform3fv(render.Material.Locations.Eye, eye.Position);
        game2.Gl.uniform4fv(render.Material.Locations.LightPositions, game2.LightPositions);
        game2.Gl.uniform4fv(render.Material.Locations.LightDetails, game2.LightDetails);
        game2.Gl.activeTexture(GL_TEXTURE0);
        game2.Gl.bindTexture(GL_TEXTURE_2D, game2.Targets.Sun.DepthTexture);
        game2.Gl.uniform1i(render.Material.Locations.ShadowMap, 0);
        let light_entity = first_having(game2.World, 8 /* Camera */ | 4096 /* Light */);
        if (light_entity) {
          let light_camera = game2.World.Camera[light_entity];
          if (light_camera.Kind === 2 /* Xr */) {
            throw new Error("XR cameras cannot be shadow sources.");
          }
          game2.Gl.uniformMatrix4fv(render.Material.Locations.ShadowSpace, false, light_camera.Pv);
        }
        break;
      case 4 /* TexturedUnlit */:
        game2.Gl.useProgram(render.Material.Program);
        game2.Gl.uniformMatrix4fv(render.Material.Locations.Pv, false, eye.Pv);
        break;
      case 5 /* TexturedShaded */:
        game2.Gl.useProgram(render.Material.Program);
        game2.Gl.uniformMatrix4fv(render.Material.Locations.Pv, false, eye.Pv);
        game2.Gl.uniform3fv(render.Material.Locations.Eye, eye.Position);
        game2.Gl.uniform4fv(render.Material.Locations.LightPositions, game2.LightPositions);
        game2.Gl.uniform4fv(render.Material.Locations.LightDetails, game2.LightDetails);
        break;
      case 6 /* MappedShaded */:
        game2.Gl.useProgram(render.Material.Program);
        game2.Gl.uniformMatrix4fv(render.Material.Locations.Pv, false, eye.Pv);
        game2.Gl.uniform3fv(render.Material.Locations.Eye, eye.Position);
        game2.Gl.uniform4fv(render.Material.Locations.LightPositions, game2.LightPositions);
        game2.Gl.uniform4fv(render.Material.Locations.LightDetails, game2.LightDetails);
        break;
      case 7 /* Vertices */:
      case 8 /* ParticlesColored */:
      case 9 /* ParticlesTextured */:
        game2.Gl.useProgram(render.Material.Program);
        game2.Gl.uniformMatrix4fv(render.Material.Locations.Pv, false, eye.Pv);
        break;
    }
  }
  function draw_entity(game2, entity, current_target) {
    let transform2 = game2.World.Transform[entity];
    let render = game2.World.Render[entity];
    switch (render.Kind) {
      case 0 /* ColoredUnlit */:
        game2.Gl.uniformMatrix4fv(render.Material.Locations.World, false, transform2.World);
        game2.Gl.uniform4fv(render.Material.Locations.Color, render.Color);
        game2.Gl.bindVertexArray(render.Mesh.Vao);
        game2.Gl.drawElements(render.Material.Mode, render.Mesh.IndexCount, GL_UNSIGNED_SHORT, 0);
        game2.Gl.bindVertexArray(null);
        break;
      case 1 /* ColoredShaded */:
        game2.Gl.uniformMatrix4fv(render.Material.Locations.World, false, transform2.World);
        game2.Gl.uniformMatrix4fv(render.Material.Locations.Self, false, transform2.Self);
        game2.Gl.uniform4fv(render.Material.Locations.DiffuseColor, render.DiffuseColor);
        game2.Gl.uniform4fv(render.Material.Locations.SpecularColor, render.SpecularColor);
        game2.Gl.uniform4fv(render.Material.Locations.EmissiveColor, render.EmissiveColor);
        game2.Gl.bindVertexArray(render.Mesh.Vao);
        game2.Gl.drawElements(render.Material.Mode, render.Mesh.IndexCount, GL_UNSIGNED_SHORT, 0);
        game2.Gl.bindVertexArray(null);
        break;
      case 2 /* ColoredShadows */:
        game2.Gl.uniformMatrix4fv(render.Material.Locations.World, false, transform2.World);
        game2.Gl.uniformMatrix4fv(render.Material.Locations.Self, false, transform2.Self);
        game2.Gl.uniform4fv(render.Material.Locations.DiffuseColor, render.DiffuseColor);
        game2.Gl.uniform4fv(render.Material.Locations.SpecularColor, render.SpecularColor);
        game2.Gl.uniform4fv(render.Material.Locations.EmissiveColor, render.EmissiveColor);
        game2.Gl.bindVertexArray(render.Mesh.Vao);
        game2.Gl.drawElements(render.Material.Mode, render.Mesh.IndexCount, GL_UNSIGNED_SHORT, 0);
        game2.Gl.bindVertexArray(null);
        break;
      case 4 /* TexturedUnlit */:
        if (render.Texture === current_target) {
          break;
        }
        game2.Gl.uniformMatrix4fv(render.Material.Locations.World, false, transform2.World);
        game2.Gl.uniform4fv(render.Material.Locations.Color, render.Color);
        game2.Gl.activeTexture(GL_TEXTURE0);
        game2.Gl.bindTexture(GL_TEXTURE_2D, render.Texture);
        game2.Gl.uniform1i(render.Material.Locations.TextureMap, 0);
        game2.Gl.bindVertexArray(render.Mesh.Vao);
        game2.Gl.drawElements(render.Material.Mode, render.Mesh.IndexCount, GL_UNSIGNED_SHORT, 0);
        game2.Gl.bindVertexArray(null);
        break;
      case 5 /* TexturedShaded */:
        if (render.Texture === current_target) {
          break;
        }
        game2.Gl.uniformMatrix4fv(render.Material.Locations.World, false, transform2.World);
        game2.Gl.uniformMatrix4fv(render.Material.Locations.Self, false, transform2.Self);
        game2.Gl.uniform4fv(render.Material.Locations.DiffuseColor, render.DiffuseColor);
        game2.Gl.uniform4fv(render.Material.Locations.SpecularColor, render.SpecularColor);
        game2.Gl.uniform4fv(render.Material.Locations.EmissiveColor, render.EmissiveColor);
        game2.Gl.activeTexture(GL_TEXTURE0);
        game2.Gl.bindTexture(GL_TEXTURE_2D, render.Texture);
        game2.Gl.uniform1i(render.Material.Locations.DiffuseMap, 0);
        game2.Gl.bindVertexArray(render.Mesh.Vao);
        game2.Gl.drawElements(render.Material.Mode, render.Mesh.IndexCount, GL_UNSIGNED_SHORT, 0);
        game2.Gl.bindVertexArray(null);
        break;
      case 6 /* MappedShaded */:
        if (render.DiffuseMap === current_target) {
          break;
        }
        game2.Gl.uniformMatrix4fv(render.Material.Locations.World, false, transform2.World);
        game2.Gl.uniformMatrix4fv(render.Material.Locations.Self, false, transform2.Self);
        game2.Gl.uniform4fv(render.Material.Locations.DiffuseColor, render.DiffuseColor);
        game2.Gl.activeTexture(GL_TEXTURE1);
        game2.Gl.bindTexture(GL_TEXTURE_2D, render.DiffuseMap);
        game2.Gl.uniform1i(render.Material.Locations.DiffuseMap, 1);
        game2.Gl.activeTexture(GL_TEXTURE2);
        game2.Gl.bindTexture(GL_TEXTURE_2D, render.NormalMap);
        game2.Gl.uniform1i(render.Material.Locations.NormalMap, 2);
        game2.Gl.activeTexture(GL_TEXTURE3);
        game2.Gl.bindTexture(GL_TEXTURE_2D, render.RoughnessMap);
        game2.Gl.uniform1i(render.Material.Locations.RoughnessMap, 3);
        game2.Gl.bindVertexArray(render.Mesh.Vao);
        game2.Gl.drawElements(render.Material.Mode, render.Mesh.IndexCount, GL_UNSIGNED_SHORT, 0);
        game2.Gl.bindVertexArray(null);
        break;
      case 7 /* Vertices */:
        game2.Gl.uniformMatrix4fv(render.Material.Locations.World, false, transform2.World);
        game2.Gl.uniform4fv(render.Material.Locations.Color, render.Color);
        game2.Gl.bindBuffer(GL_ARRAY_BUFFER, render.VertexBuffer);
        game2.Gl.enableVertexAttribArray(0 /* Position */);
        game2.Gl.vertexAttribPointer(0 /* Position */, 3, GL_FLOAT, false, 0, 0);
        game2.Gl.drawArrays(render.Material.Mode, 0, render.IndexCount);
        break;
      case 8 /* ParticlesColored */: {
        let emitter = game2.World.EmitParticles[entity];
        game2.Gl.uniform4fv(render.Material.Locations.ColorStart, render.ColorStart);
        game2.Gl.uniform4fv(render.Material.Locations.ColorEnd, render.ColorEnd);
        game2.Gl.uniform4f(render.Material.Locations.Details, emitter.Lifespan, emitter.Speed, ...render.Size);
        let instances = Float32Array.from(emitter.Instances);
        game2.Gl.bindBuffer(GL_ARRAY_BUFFER, render.Buffer);
        game2.Gl.bufferSubData(GL_ARRAY_BUFFER, 0, instances);
        game2.Gl.enableVertexAttribArray(render.Material.Locations.OriginAge);
        game2.Gl.vertexAttribPointer(render.Material.Locations.OriginAge, 4, GL_FLOAT, false, FLOATS_PER_PARTICLE * 4, 0);
        game2.Gl.enableVertexAttribArray(render.Material.Locations.Direction);
        game2.Gl.vertexAttribPointer(render.Material.Locations.Direction, 3, GL_FLOAT, false, FLOATS_PER_PARTICLE * 4, 4 * 4);
        game2.Gl.drawArrays(render.Material.Mode, 0, emitter.Instances.length / FLOATS_PER_PARTICLE);
        break;
      }
    }
  }

  // ../common/projection.ts
  function perspective(fovy, near, far) {
    return {
      Kind: 0 /* Perspective */,
      FovY: fovy,
      Near: near,
      Far: far,
      Projection: create(),
      Inverse: create()
    };
  }
  function resize_perspective(projection, aspect) {
    if (aspect > 1) {
      from_perspective(projection.Projection, projection.FovY, aspect, projection.Near, projection.Far);
    } else {
      from_perspective(projection.Projection, projection.FovY / aspect, aspect, projection.Near, projection.Far);
    }
    invert(projection.Inverse, projection.Projection);
  }
  function orthographic(radius, near, far) {
    return {
      Kind: 1 /* Orthographic */,
      Radius: radius,
      Near: near,
      Far: far,
      Projection: create(),
      Inverse: create()
    };
  }
  function resize_ortho(projection, aspect) {
    if (aspect > 1) {
      from_ortho(projection.Projection, projection.Radius / aspect, projection.Radius, -projection.Radius / aspect, -projection.Radius, projection.Near, projection.Far);
    } else {
      from_ortho(projection.Projection, projection.Radius, projection.Radius * aspect, -projection.Radius, -projection.Radius * aspect, projection.Near, projection.Far);
    }
    invert(projection.Inverse, projection.Projection);
  }

  // ../src/systems/sys_resize.ts
  var QUERY21 = 8 /* Camera */;
  function sys_resize(game2, delta) {
    if (game2.ViewportWidth != window.innerWidth || game2.ViewportHeight != window.innerHeight) {
      game2.ViewportResized = true;
    }
    if (game2.ViewportResized) {
      game2.ViewportWidth = game2.Canvas3D.width = game2.Canvas2D.width = window.innerWidth;
      game2.ViewportHeight = game2.Canvas3D.height = game2.Canvas2D.height = window.innerHeight;
      for (let target of Object.values(game2.Targets)) {
        if (target.ResizeToViewport) {
          switch (target.Kind) {
            case 0 /* Forward */:
              resize_forward_target(game2.Gl, target, game2.ViewportWidth, game2.ViewportHeight);
              break;
            case 1 /* Hdr */:
              resize_hdr_target(game2.Gl, target, game2.ViewportWidth, game2.ViewportHeight);
              break;
            case 2 /* Deferred */:
              resize_deferred_target(game2.Gl, target, game2.ViewportWidth, game2.ViewportHeight);
              break;
          }
        }
      }
      for (let i = 0; i < game2.World.Signature.length; i++) {
        if ((game2.World.Signature[i] & QUERY21) === QUERY21) {
          let camera = game2.World.Camera[i];
          switch (camera.Kind) {
            case 0 /* Canvas */:
              update_projection(camera.Projection, game2.ViewportWidth / game2.ViewportHeight);
              break;
            case 1 /* Target */:
              update_projection(camera.Projection, camera.Target.Width / camera.Target.Height);
              break;
            case 2 /* Xr */:
              break;
          }
        }
      }
    }
  }
  function update_projection(projection, aspect) {
    switch (projection.Kind) {
      case 0 /* Perspective */: {
        resize_perspective(projection, aspect);
        break;
      }
      case 1 /* Orthographic */:
        resize_ortho(projection, aspect);
        break;
    }
  }

  // ../src/systems/sys_shake.ts
  var QUERY22 = 4194304 /* Transform */ | 262144 /* Shake */;
  function sys_shake(game2, delta) {
    for (let i = 0; i < game2.World.Signature.length; i++) {
      if ((game2.World.Signature[i] & QUERY22) == QUERY22) {
        update14(game2, i);
      }
    }
  }
  function update14(game2, entity) {
    let shake2 = game2.World.Shake[entity];
    let transform2 = game2.World.Transform[entity];
    transform2.Translation = [Math.random() - 0.5, Math.random() - 0.5, Math.random() - 0.5];
    scale(transform2.Translation, transform2.Translation, shake2.Magnitude * 2);
    game2.World.Signature[entity] |= 256 /* Dirty */;
  }

  // ../src/systems/sys_spawn.ts
  var QUERY23 = 4194304 /* Transform */ | 524288 /* Spawn */;
  function sys_spawn(game2, delta) {
    for (let i = 0; i < game2.World.Signature.length; i++) {
      if ((game2.World.Signature[i] & QUERY23) == QUERY23) {
        update15(game2, i, delta);
      }
    }
  }
  function update15(game2, entity, delta) {
    let spawn2 = game2.World.Spawn[entity];
    spawn2.SinceLast += delta;
    if (spawn2.SinceLast > spawn2.Interval) {
      spawn2.SinceLast = 0;
      let entity_transform = game2.World.Transform[entity];
      let world_position2 = [0, 0, 0];
      get_translation(world_position2, entity_transform.World);
      let world_rotation = [0, 0, 0, 0];
      get_rotation(world_rotation, entity_transform.World);
      instantiate(game2, [...spawn2.Creator(game2), transform(world_position2, world_rotation)]);
    }
  }

  // ../src/systems/sys_toggle.ts
  var QUERY24 = 2097152 /* Toggle */;
  function sys_toggle(game2, delta) {
    for (let i = 0; i < game2.World.Signature.length; i++) {
      if ((game2.World.Signature[i] & QUERY24) == QUERY24) {
        update16(game2, i, delta);
      }
    }
  }
  function update16(game2, entity, delta) {
    let toggle = game2.World.Toggle[entity];
    toggle.SinceLast += delta;
    if (toggle.SinceLast > toggle.Frequency) {
      toggle.SinceLast = 0;
      if (toggle.CurrentlyEnabled) {
        toggle.CurrentlyEnabled = false;
        game2.World.Signature[entity] &= ~toggle.Mask;
      } else {
        toggle.CurrentlyEnabled = true;
        game2.World.Signature[entity] |= toggle.Mask;
      }
    }
  }

  // ../src/systems/sys_transform.ts
  var QUERY25 = 4194304 /* Transform */ | 256 /* Dirty */;
  function sys_transform(game2, delta) {
    for (let ent = 0; ent < game2.World.Signature.length; ent++) {
      if ((game2.World.Signature[ent] & QUERY25) === QUERY25) {
        let transform2 = game2.World.Transform[ent];
        update_transform(game2.World, ent, transform2);
      }
    }
  }
  var world_position = [0, 0, 0];
  function update_transform(world, entity, transform2) {
    world.Signature[entity] &= ~256 /* Dirty */;
    from_rotation_translation_scale(transform2.World, transform2.Rotation, transform2.Translation, transform2.Scale);
    if (transform2.Parent !== void 0) {
      let parent_transform = world.Transform[transform2.Parent];
      multiply2(transform2.World, parent_transform.World, transform2.World);
      if (transform2.Gyroscope) {
        get_translation(world_position, transform2.World);
        from_rotation_translation_scale(transform2.World, transform2.Rotation, world_position, transform2.Scale);
      }
    }
    invert(transform2.Self, transform2.World);
    if (world.Signature[entity] & 16 /* Children */) {
      let children2 = world.Children[entity];
      for (let i = 0; i < children2.Children.length; i++) {
        let child = children2.Children[i];
        if (world.Signature[child] & 4194304 /* Transform */) {
          let child_transform = world.Transform[child];
          child_transform.Parent = entity;
          update_transform(world, child, child_transform);
        }
      }
    }
  }

  // ../src/systems/sys_trigger.ts
  var QUERY26 = 4194304 /* Transform */ | 32 /* Collide */ | 8388608 /* Trigger */;
  function sys_trigger(game2, delta) {
    for (let i = 0; i < game2.World.Signature.length; i++) {
      if ((game2.World.Signature[i] & QUERY26) === QUERY26) {
        update17(game2, i);
      }
    }
  }
  function update17(game2, entity) {
    let collide2 = game2.World.Collide[entity];
    let trigger = game2.World.Trigger[entity];
    for (let collision of collide2.Collisions) {
      let other_collide = game2.World.Collide[collision.Other];
      if (trigger.Mask & other_collide.Layers) {
        dispatch(game2, trigger.Action, [entity, collision.Other]);
      }
    }
  }

  // ../common/html.ts
  function shift(values) {
    let value = values.shift();
    if (typeof value === "boolean" || value == void 0) {
      return "";
    } else if (Array.isArray(value)) {
      return value.join("");
    } else {
      return value;
    }
  }
  function html(strings, ...values) {
    return strings.reduce((out, cur) => out + shift(values) + cur);
  }

  // ../src/ui/App.ts
  function App(game2) {
    switch (game2.PlayState) {
      case "title":
        return Title(game2);
      default:
        return "";
    }
  }
  function Title(game2) {
    return html`
        <div
            style="
                padding: 1vmin;
                font-family: Helvetica, Arial, sans-serif;
                text-transform: uppercase;
                color: white;
            "
        >
            <div
                style="
                    font-size: 15vmin;
                    font-weight: 800;
                "
            >
                You are the snooze button.
                <button
                    onclick="$(${1 /* GameStart */})"
                    style="
                        font-size: 10vmin;
                        font-weight: 800;
                        text-transform: uppercase;
                        color: white;
                        background: none;
                        padding: 5px 20px;
                        border: 10px solid white;
                        border-radius: 50px;
                    "
                >
                    Let's go
                </button>
            </div>
        </div>
    `;
  }

  // ../src/systems/sys_ui.ts
  var prev;
  function sys_ui(game2, delta) {
    let next = App(game2);
    if (next !== prev) {
      game2.Ui.innerHTML = prev = next;
    }
  }

  // ../src/game.ts
  var Game = class extends Game3D {
    constructor() {
      super(...arguments);
      this.World = new World();
      this.MaterialWireframe = mat_forward_colored_wireframe(this.Gl);
      this.MaterialColoredShadows = mat_forward_colored_shadows(this.Gl);
      this.MaterialParticlesColored = mat_forward_particles_colored(this.Gl);
      this.MaterialDepth = mat_forward_depth(this.Gl);
      this.MeshCube = mesh_cube(this.Gl);
      this.MeshBody = mesh_body(this.Gl);
      this.MeshWheel = mesh_wheel(this.Gl);
      this.MeshHand = mesh_hand(this.Gl);
      this.LightPositions = new Float32Array(4 * MAX_FORWARD_LIGHTS);
      this.LightDetails = new Float32Array(4 * MAX_FORWARD_LIGHTS);
      this.Targets = {
        Sun: create_depth_target(this.Gl, 4096, 4096)
      };
      this.PlayState = "title";
      this.ItemsCollected = 0;
      this.DistanceTraveled = 0;
      this.PlatformsTraveled = 0;
    }
    FixedUpdate(delta) {
      sys_physics_integrate(this, delta);
      sys_transform(this, delta);
      sys_physics_kinematic(this, delta);
      sys_collide(this, delta);
      sys_physics_resolve(this, delta);
      sys_transform(this, delta);
      sys_trigger(this, delta);
    }
    FrameUpdate(delta) {
      sys_poll(this, delta);
      sys_resize(this, delta);
      sys_camera(this, delta);
      sys_control_always(this, delta);
      sys_control_keyboard(this, delta);
      sys_control_jump(this, delta);
      sys_animate(this, delta);
      sys_move(this, delta);
      sys_mimic(this, delta);
      sys_lifespan(this, delta);
      sys_shake(this, delta);
      sys_toggle(this, delta);
      sys_spawn(this, delta);
      sys_particles(this, delta);
      sys_transform(this, delta);
      if (false) {
        sys_debug(this, delta);
      }
      sys_audio_listener(this, delta);
      sys_audio_source(this, delta);
      sys_light(this, delta);
      sys_render_depth(this, delta);
      sys_render_forward(this, delta);
      sys_draw(this, delta);
      sys_ui(this, delta);
    }
  };

  // ../src/components/com_mimic.ts
  function mimic(Target, Stiffness = 0.1) {
    return (game2, entity) => {
      game2.World.Signature[entity] |= 8192 /* Mimic */;
      game2.World.Mimic[entity] = {
        Target,
        Stiffness
      };
    };
  }

  // ../src/components/com_named.ts
  function named(Name) {
    return (game2, entity) => {
      game2.World.Signature[entity] |= 32768 /* Named */;
      game2.World.Named[entity] = { Name };
    };
  }
  function first_named(world, name, start_at = 0) {
    for (let i = start_at; i < world.Signature.length; i++) {
      if (world.Signature[i] & 32768 /* Named */ && world.Named[i].Name === name) {
        return i;
      }
    }
    throw `No entity named ${name}.`;
  }

  // ../src/blueprints/blu_camera_follow.ts
  function blueprint_camera_follow(game2) {
    return [
      mimic(first_named(game2.World, "title camera anchor")),
      task_until(() => game2.PlayState === "playing", (entity) => {
        mimic(first_named(game2.World, "player camera anchor"))(game2, entity);
      }),
      children([
        transform([0, 1, -8], [0, 1, 0, 0]),
        camera_canvas(perspective(1, 0.1, 1e3), [170 / 255, 199 / 255, 172 / 255, 1])
      ])
    ];
  }

  // ../common/easing.ts
  function ease_in_quad(t) {
    return t * t;
  }
  function ease_out_quad(t) {
    return 1 - (1 - t) ** 2;
  }
  function ease_in_out_quad(t) {
    return t < 0.5 ? 2 * t * t : 1 - (-2 * t + 2) ** 2 / 2;
  }

  // ../src/components/com_audio_listener.ts
  function audio_listener() {
    return (game2, entity) => {
      game2.World.Signature[entity] |= 2 /* AudioListener */;
    };
  }

  // ../src/components/com_audio_source.ts
  function audio_source(spatial, idle) {
    return (game2, entity) => {
      let panner = spatial ? game2.Audio.createPanner() : void 0;
      game2.World.Signature[entity] |= 4 /* AudioSource */;
      game2.World.AudioSource[entity] = {
        Panner: panner,
        Idle: idle,
        Time: 0
      };
    };
  }

  // ../src/components/com_collide.ts
  function collide(dynamic, layers, mask, size = [1, 1, 1]) {
    return (game2, entity) => {
      game2.World.Signature[entity] |= 32 /* Collide */;
      game2.World.Collide[entity] = {
        EntityId: entity,
        New: true,
        Dynamic: dynamic,
        Layers: layers,
        Mask: mask,
        Size: size,
        Min: [0, 0, 0],
        Max: [0, 0, 0],
        Center: [0, 0, 0],
        Half: [0, 0, 0],
        Collisions: []
      };
    };
  }

  // ../src/components/com_control_always.ts
  function control_always(direction, rotation, animation) {
    return (game2, entity) => {
      game2.World.Signature[entity] |= 64 /* ControlAlways */;
      game2.World.ControlAlways[entity] = {
        Direction: direction,
        Rotation: rotation,
        Animation: animation
      };
    };
  }

  // ../src/components/com_control_player.ts
  function control_player(jump, yaw, pitch, min_pitch = 0, max_pitch = 0) {
    return (game2, entity) => {
      game2.World.Signature[entity] |= 128 /* ControlPlayer */;
      game2.World.ControlPlayer[entity] = {
        Jump: jump,
        Yaw: yaw,
        Pitch: pitch,
        MinPitch: min_pitch,
        MaxPitch: max_pitch
      };
    };
  }

  // ../src/components/com_disable.ts
  function disable(mask) {
    return (game2, entity) => {
      game2.World.Signature[entity] &= ~mask;
    };
  }

  // ../src/components/com_move.ts
  function move(move_speed, rotation_speed) {
    return (game2, entity) => {
      game2.World.Signature[entity] |= 16384 /* Move */;
      game2.World.Move[entity] = {
        MoveSpeed: move_speed,
        RotationSpeed: rotation_speed,
        Direction: [0, 0, 0],
        LocalRotation: [0, 0, 0, 1],
        SelfRotation: [0, 0, 0, 1]
      };
    };
  }

  // ../src/components/com_shake.ts
  function shake(magnitude) {
    return (game2, entity) => {
      game2.World.Signature[entity] |= 262144 /* Shake */;
      game2.World.Shake[entity] = {
        Magnitude: magnitude
      };
    };
  }

  // ../src/components/com_spawn.ts
  function spawn(creator, interval) {
    return (game2, entity) => {
      game2.World.Signature[entity] |= 524288 /* Spawn */;
      game2.World.Spawn[entity] = {
        Creator: creator,
        Interval: interval,
        SinceLast: interval
      };
    };
  }

  // ../src/components/com_callback.ts
  function callback(fn) {
    return (game2, entity) => {
      fn(game2, entity);
    };
  }

  // ../src/components/com_lifespan.ts
  function lifespan(remaining, action) {
    return (game2, entity) => {
      game2.World.Signature[entity] |= 2048 /* Lifespan */;
      game2.World.Lifespan[entity] = {
        Remaining: remaining,
        Action: action
      };
    };
  }

  // ../src/blueprints/blu_hand.ts
  function blueprint_hand(game2) {
    return [
      collide(true, 4 /* Obstacle */, 2 /* Terrain */ | 1 /* Player */),
      rigid_body(1 /* Dynamic */, 0.3),
      callback((game3, entity) => {
        let rigid_body2 = game3.World.RigidBody[entity];
        rigid_body2.Acceleration[1] = -100;
      }),
      lifespan(10),
      children([
        transform(),
        render_colored_shadows(game2.MaterialColoredShadows, game2.MeshHand, [
          242 / 255,
          194 / 255,
          61 / 255,
          1
        ])
      ])
    ];
  }

  // ../src/blueprints/blu_spawner.ts
  function blueprint_spawner(game2) {
    return [
      children([
        transform(),
        shake(5),
        spawn(blueprint_hand, 2),
        disable(524288 /* Spawn */),
        task_until(() => game2.PlayState === "playing", (entity) => {
          game2.World.Signature[entity] |= 524288 /* Spawn */;
        })
      ])
    ];
  }

  // ../src/blueprints/blu_player.ts
  function blueprint_player(game2) {
    return [
      control_player(true, 0.2, 0),
      control_always([0, 0, 1], null, "move"),
      disable(64 /* ControlAlways */),
      task_until(() => game2.PlayState === "playing", (entity) => {
        game2.World.Signature[entity] |= 64 /* ControlAlways */;
      }),
      move(10, 3),
      collide(true, 1 /* Player */, 2 /* Terrain */),
      rigid_body(1 /* Dynamic */),
      audio_source(false),
      audio_listener(),
      children([
        transform([0, 0.75, 0]),
        render_colored_shadows(game2.MaterialColoredShadows, game2.MeshBody, [
          224 / 255,
          114 / 255,
          128 / 255,
          1
        ]),
        animate({
          idle: {
            Keyframes: [
              {
                Timestamp: 0,
                Rotation: from_euler([0, 0, 0, 1], 0, -5, 0),
                Ease: ease_in_out_quad
              },
              {
                Timestamp: 1,
                Rotation: from_euler([0, 0, 0, 1], 0, 5, 0),
                Ease: ease_in_out_quad
              }
            ]
          },
          jump: {
            Keyframes: [
              {
                Timestamp: 0,
                Rotation: [0, 0, 0, 1]
              },
              {
                Timestamp: 0.5,
                Rotation: [1, 0, 0, 0],
                Ease: ease_in_quad
              },
              {
                Timestamp: 1,
                Rotation: [0, 0, 0, -1],
                Ease: ease_out_quad
              }
            ],
            Flags: 0 /* None */
          }
        }),
        children([
          transform([0, 0, 1], [0.707, 0, 0, 0.707], [0.7, 0.1, 0.6]),
          render_colored_shadows(game2.MaterialColoredShadows, game2.MeshBody, [
            200 / 255,
            231 / 255,
            229 / 255,
            1
          ])
        ], [
          transform([0, 1, 0], [0, 0, 0, 1], [0.6, 0.2, 0.5]),
          render_colored_shadows(game2.MaterialColoredShadows, game2.MeshBody, [
            174 / 255,
            248 / 255,
            181 / 255,
            1
          ])
        ])
      ], [
        transform([0, 0.75, 0]),
        animate({
          idle: {
            Flags: 0 /* None */,
            Keyframes: [
              {
                Timestamp: 0,
                Rotation: [0, 0, 0, 1]
              }
            ]
          },
          move: {
            Flags: 2 /* Loop */,
            Keyframes: [
              {
                Timestamp: 0,
                Rotation: [0, 0, 0, 1]
              },
              {
                Timestamp: 0.5,
                Rotation: [1, 0, 0, 0]
              },
              {
                Timestamp: 1,
                Rotation: [0, 0, 0, -1]
              }
            ]
          }
        }),
        children([
          transform([-1.8, 0, 0]),
          render_colored_shadows(game2.MaterialColoredShadows, game2.MeshWheel, [
            240 / 255,
            202 / 255,
            82 / 255,
            1
          ])
        ], [
          transform([1.8, 0, 0]),
          render_colored_shadows(game2.MaterialColoredShadows, game2.MeshWheel, [
            240 / 255,
            202 / 255,
            82 / 255,
            1
          ])
        ])
      ], [
        named("player camera anchor"),
        transform(void 0, from_euler([0, 0, 0, 1], 15, 0, 0)),
        move(0, 3),
        control_player(false, 0, 0.2, -10, 15)
      ], [named("hand spawner anchor"), transform([0, 25, 25]), ...blueprint_spawner(game2)])
    ];
  }

  // ../src/components/com_light.ts
  function light_directional(color = [1, 1, 1], intensity = 1) {
    return (game2, entity) => {
      game2.World.Signature[entity] |= 4096 /* Light */;
      game2.World.Light[entity] = {
        Kind: 2 /* Directional */,
        Color: color,
        Intensity: intensity
      };
    };
  }

  // ../src/blueprints/blu_sun.ts
  function blueprint_sun(game2) {
    return [
      children([
        transform([0, 0, 100]),
        light_directional([1, 1, 1], 0.3),
        camera_target(game2.Targets.Sun, orthographic(73, 35, 150))
      ])
    ];
  }

  // ../src/scenes/sce_room.ts
  function scene_room(game2) {
    game2.World = new World();
    game2.ViewportResized = true;
    instantiate(game2, [
      ...blueprint_player(game2),
      transform([0, 7, 48], [0, 1, 0, 0], [0.5, 0.5, 0.5])
    ]);
    instantiate(game2, [
      ...blueprint_sun(game2),
      transform(void 0, from_euler([0, 0, 0, 0], -45, 45, 0))
    ]);
    instantiate(game2, [
      transform([0, 0, 0], void 0, [100, 1, 100]),
      collide(false, 2 /* Terrain */, 0 /* None */),
      rigid_body(0 /* Static */),
      children([
        transform(),
        render_colored_shadows(game2.MaterialColoredShadows, game2.MeshCube, [
          221 / 255,
          157 / 255,
          105 / 255,
          1
        ])
      ])
    ]);
    instantiate(game2, [
      transform([0, 3, 48], void 0, [5, 6, 5]),
      collide(false, 2 /* Terrain */, 0 /* None */),
      rigid_body(0 /* Static */),
      children([
        transform(),
        render_colored_shadows(game2.MaterialColoredShadows, game2.MeshCube, [
          221 / 255,
          157 / 255,
          105 / 255,
          1
        ])
      ], [
        transform([0.1, 0.5, 0], from_euler([0, 0, 0, 1], 0, 15, 0)),
        named("title camera anchor")
      ])
    ]);
    instantiate(game2, [...blueprint_camera_follow(game2), transform([0, 10, 0])]);
  }

  // ../src/index.ts
  var game = new Game();
  scene_room(game);
  game.Start();
  window.$ = dispatch.bind(null, game);
  window.game = game;
})();
